/*
RestServices

REST APIs used for managing CDC instances are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssrest

import (
	"encoding/json"
	"fmt"
)


// PostRedfishV1SFSSInstanceDDCs200Response struct for PostRedfishV1SFSSInstanceDDCs200Response
type PostRedfishV1SFSSInstanceDDCs200Response struct {
	PostRedfishV1SFSSInstanceDDCs200ResponseAnyOf *PostRedfishV1SFSSInstanceDDCs200ResponseAnyOf
	PutRedfishV1SFSSInstanceIDDDCs200Response *PutRedfishV1SFSSInstanceIDDDCs200Response
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *PostRedfishV1SFSSInstanceDDCs200Response) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into PostRedfishV1SFSSInstanceDDCs200ResponseAnyOf
	err = json.Unmarshal(data, &dst.PostRedfishV1SFSSInstanceDDCs200ResponseAnyOf);
	if err == nil {
		jsonPostRedfishV1SFSSInstanceDDCs200ResponseAnyOf, _ := json.Marshal(dst.PostRedfishV1SFSSInstanceDDCs200ResponseAnyOf)
		if string(jsonPostRedfishV1SFSSInstanceDDCs200ResponseAnyOf) == "{}" { // empty struct
			dst.PostRedfishV1SFSSInstanceDDCs200ResponseAnyOf = nil
		} else {
			return nil // data stored in dst.PostRedfishV1SFSSInstanceDDCs200ResponseAnyOf, return on the first match
		}
	} else {
		dst.PostRedfishV1SFSSInstanceDDCs200ResponseAnyOf = nil
	}

	// try to unmarshal JSON data into PutRedfishV1SFSSInstanceIDDDCs200Response
	err = json.Unmarshal(data, &dst.PutRedfishV1SFSSInstanceIDDDCs200Response);
	if err == nil {
		jsonPutRedfishV1SFSSInstanceIDDDCs200Response, _ := json.Marshal(dst.PutRedfishV1SFSSInstanceIDDDCs200Response)
		if string(jsonPutRedfishV1SFSSInstanceIDDDCs200Response) == "{}" { // empty struct
			dst.PutRedfishV1SFSSInstanceIDDDCs200Response = nil
		} else {
			return nil // data stored in dst.PutRedfishV1SFSSInstanceIDDDCs200Response, return on the first match
		}
	} else {
		dst.PutRedfishV1SFSSInstanceIDDDCs200Response = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(PostRedfishV1SFSSInstanceDDCs200Response)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PostRedfishV1SFSSInstanceDDCs200Response) MarshalJSON() ([]byte, error) {
	if src.PostRedfishV1SFSSInstanceDDCs200ResponseAnyOf != nil {
		return json.Marshal(&src.PostRedfishV1SFSSInstanceDDCs200ResponseAnyOf)
	}

	if src.PutRedfishV1SFSSInstanceIDDDCs200Response != nil {
		return json.Marshal(&src.PutRedfishV1SFSSInstanceIDDDCs200Response)
	}

	return nil, nil // no data in anyOf schemas
}


type NullablePostRedfishV1SFSSInstanceDDCs200Response struct {
	value *PostRedfishV1SFSSInstanceDDCs200Response
	isSet bool
}

func (v NullablePostRedfishV1SFSSInstanceDDCs200Response) Get() *PostRedfishV1SFSSInstanceDDCs200Response {
	return v.value
}

func (v *NullablePostRedfishV1SFSSInstanceDDCs200Response) Set(val *PostRedfishV1SFSSInstanceDDCs200Response) {
	v.value = val
	v.isSet = true
}

func (v NullablePostRedfishV1SFSSInstanceDDCs200Response) IsSet() bool {
	return v.isSet
}

func (v *NullablePostRedfishV1SFSSInstanceDDCs200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostRedfishV1SFSSInstanceDDCs200Response(val *PostRedfishV1SFSSInstanceDDCs200Response) *NullablePostRedfishV1SFSSInstanceDDCs200Response {
	return &NullablePostRedfishV1SFSSInstanceDDCs200Response{value: val, isSet: true}
}

func (v NullablePostRedfishV1SFSSInstanceDDCs200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostRedfishV1SFSSInstanceDDCs200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


