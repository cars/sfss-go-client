/*
RestServices

REST APIs used for managing CDC instances are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssrest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubsystemsGETExpand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubsystemsGETExpand{}

// SubsystemsGETExpand This model contains detailed information about the subsystems.
type SubsystemsGETExpand struct {
	// Detailed subsystem information 
	Subsystems []SubsystemsGETExpandSubsystemsInner `json:"Subsystems"`
	// Number of subsystems registered with the CDC instance
	SubsystemsodataCount float32 `json:"Subsystems@odata.count"`
	OdataId string `json:"@odata.id"`
	OdataContext string `json:"@odata.context"`
	OdataType string `json:"@odata.type"`
}

type _SubsystemsGETExpand SubsystemsGETExpand

// NewSubsystemsGETExpand instantiates a new SubsystemsGETExpand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubsystemsGETExpand(subsystems []SubsystemsGETExpandSubsystemsInner, subsystemsodataCount float32, odataId string, odataContext string, odataType string) *SubsystemsGETExpand {
	this := SubsystemsGETExpand{}
	this.Subsystems = subsystems
	this.SubsystemsodataCount = subsystemsodataCount
	this.OdataId = odataId
	this.OdataContext = odataContext
	this.OdataType = odataType
	return &this
}

// NewSubsystemsGETExpandWithDefaults instantiates a new SubsystemsGETExpand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubsystemsGETExpandWithDefaults() *SubsystemsGETExpand {
	this := SubsystemsGETExpand{}
	return &this
}

// GetSubsystems returns the Subsystems field value
func (o *SubsystemsGETExpand) GetSubsystems() []SubsystemsGETExpandSubsystemsInner {
	if o == nil {
		var ret []SubsystemsGETExpandSubsystemsInner
		return ret
	}

	return o.Subsystems
}

// GetSubsystemsOk returns a tuple with the Subsystems field value
// and a boolean to check if the value has been set.
func (o *SubsystemsGETExpand) GetSubsystemsOk() ([]SubsystemsGETExpandSubsystemsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subsystems, true
}

// SetSubsystems sets field value
func (o *SubsystemsGETExpand) SetSubsystems(v []SubsystemsGETExpandSubsystemsInner) {
	o.Subsystems = v
}

// GetSubsystemsodataCount returns the SubsystemsodataCount field value
func (o *SubsystemsGETExpand) GetSubsystemsodataCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SubsystemsodataCount
}

// GetSubsystemsodataCountOk returns a tuple with the SubsystemsodataCount field value
// and a boolean to check if the value has been set.
func (o *SubsystemsGETExpand) GetSubsystemsodataCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubsystemsodataCount, true
}

// SetSubsystemsodataCount sets field value
func (o *SubsystemsGETExpand) SetSubsystemsodataCount(v float32) {
	o.SubsystemsodataCount = v
}

// GetOdataId returns the OdataId field value
func (o *SubsystemsGETExpand) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *SubsystemsGETExpand) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *SubsystemsGETExpand) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataContext returns the OdataContext field value
func (o *SubsystemsGETExpand) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *SubsystemsGETExpand) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *SubsystemsGETExpand) SetOdataContext(v string) {
	o.OdataContext = v
}

// GetOdataType returns the OdataType field value
func (o *SubsystemsGETExpand) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *SubsystemsGETExpand) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *SubsystemsGETExpand) SetOdataType(v string) {
	o.OdataType = v
}

func (o SubsystemsGETExpand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubsystemsGETExpand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Subsystems"] = o.Subsystems
	toSerialize["Subsystems@odata.count"] = o.SubsystemsodataCount
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.context"] = o.OdataContext
	toSerialize["@odata.type"] = o.OdataType
	return toSerialize, nil
}

func (o *SubsystemsGETExpand) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Subsystems",
		"Subsystems@odata.count",
		"@odata.id",
		"@odata.context",
		"@odata.type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubsystemsGETExpand := _SubsystemsGETExpand{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubsystemsGETExpand)

	if err != nil {
		return err
	}

	*o = SubsystemsGETExpand(varSubsystemsGETExpand)

	return err
}

type NullableSubsystemsGETExpand struct {
	value *SubsystemsGETExpand
	isSet bool
}

func (v NullableSubsystemsGETExpand) Get() *SubsystemsGETExpand {
	return v.value
}

func (v *NullableSubsystemsGETExpand) Set(val *SubsystemsGETExpand) {
	v.value = val
	v.isSet = true
}

func (v NullableSubsystemsGETExpand) IsSet() bool {
	return v.isSet
}

func (v *NullableSubsystemsGETExpand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubsystemsGETExpand(val *SubsystemsGETExpand) *NullableSubsystemsGETExpand {
	return &NullableSubsystemsGETExpand{value: val, isSet: true}
}

func (v NullableSubsystemsGETExpand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubsystemsGETExpand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


