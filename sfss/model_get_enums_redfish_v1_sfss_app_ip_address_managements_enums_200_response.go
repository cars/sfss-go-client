/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfss

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response{}

// GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response 
type GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response struct {
	// A set of available interface types; possible values include Ethernet and VLAN
	Type []string `json:"Type"`
	// A set of supported IPv4 configuration types; possible values include Manual, Automatic, and Disabled 
	IPV4Config []string `json:"IPV4Config"`
	// A set of supported IPv6 configuration types; possible values include Manual, Automatic, and Disabled 
	IPV6Config []string `json:"IPV6Config"`
}

type _GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response

// NewGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response instantiates a new GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response(type_ []string, iPV4Config []string, iPV6Config []string) *GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response {
	this := GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response{}
	this.Type = type_
	this.IPV4Config = iPV4Config
	this.IPV6Config = iPV6Config
	return &this
}

// NewGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200ResponseWithDefaults instantiates a new GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200ResponseWithDefaults() *GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response {
	this := GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response{}
	return &this
}

// GetType returns the Type field value
func (o *GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) GetType() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) GetTypeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) SetType(v []string) {
	o.Type = v
}

// GetIPV4Config returns the IPV4Config field value
func (o *GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) GetIPV4Config() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IPV4Config
}

// GetIPV4ConfigOk returns a tuple with the IPV4Config field value
// and a boolean to check if the value has been set.
func (o *GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) GetIPV4ConfigOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IPV4Config, true
}

// SetIPV4Config sets field value
func (o *GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) SetIPV4Config(v []string) {
	o.IPV4Config = v
}

// GetIPV6Config returns the IPV6Config field value
func (o *GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) GetIPV6Config() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IPV6Config
}

// GetIPV6ConfigOk returns a tuple with the IPV6Config field value
// and a boolean to check if the value has been set.
func (o *GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) GetIPV6ConfigOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IPV6Config, true
}

// SetIPV6Config sets field value
func (o *GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) SetIPV6Config(v []string) {
	o.IPV6Config = v
}

func (o GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Type"] = o.Type
	toSerialize["IPV4Config"] = o.IPV4Config
	toSerialize["IPV6Config"] = o.IPV6Config
	return toSerialize, nil
}

func (o *GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Type",
		"IPV4Config",
		"IPV6Config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response := _GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response)

	if err != nil {
		return err
	}

	*o = GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response(varGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response)

	return err
}

type NullableGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response struct {
	value *GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response
	isSet bool
}

func (v NullableGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) Get() *GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response {
	return v.value
}

func (v *NullableGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) Set(val *GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response(val *GetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) *NullableGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response {
	return &NullableGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response{value: val, isSet: true}
}

func (v NullableGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEnumsRedfishV1SFSSAppIpAddressManagementsEnums200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


