/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfss

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SFSSHealthStatusGET type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SFSSHealthStatusGET{}

// SFSSHealthStatusGET This model lists the SFSS health status.
type SFSSHealthStatusGET struct {
	// Health status of the SFSS VM; possible values include Ok, Warning, and Critical
	Health string `json:"Health"`
	// Reason for the SFSS VM health to be in Warning or Critical state
	ReasonCode []map[string]interface{} `json:"ReasonCode"`
	OdataId string `json:"@odata.id"`
	OdataType string `json:"@odata.type"`
	OdataContext string `json:"@odata.context"`
}

type _SFSSHealthStatusGET SFSSHealthStatusGET

// NewSFSSHealthStatusGET instantiates a new SFSSHealthStatusGET object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSFSSHealthStatusGET(health string, reasonCode []map[string]interface{}, odataId string, odataType string, odataContext string) *SFSSHealthStatusGET {
	this := SFSSHealthStatusGET{}
	this.Health = health
	this.ReasonCode = reasonCode
	this.OdataId = odataId
	this.OdataType = odataType
	this.OdataContext = odataContext
	return &this
}

// NewSFSSHealthStatusGETWithDefaults instantiates a new SFSSHealthStatusGET object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSFSSHealthStatusGETWithDefaults() *SFSSHealthStatusGET {
	this := SFSSHealthStatusGET{}
	return &this
}

// GetHealth returns the Health field value
func (o *SFSSHealthStatusGET) GetHealth() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Health
}

// GetHealthOk returns a tuple with the Health field value
// and a boolean to check if the value has been set.
func (o *SFSSHealthStatusGET) GetHealthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Health, true
}

// SetHealth sets field value
func (o *SFSSHealthStatusGET) SetHealth(v string) {
	o.Health = v
}

// GetReasonCode returns the ReasonCode field value
func (o *SFSSHealthStatusGET) GetReasonCode() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value
// and a boolean to check if the value has been set.
func (o *SFSSHealthStatusGET) GetReasonCodeOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReasonCode, true
}

// SetReasonCode sets field value
func (o *SFSSHealthStatusGET) SetReasonCode(v []map[string]interface{}) {
	o.ReasonCode = v
}

// GetOdataId returns the OdataId field value
func (o *SFSSHealthStatusGET) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *SFSSHealthStatusGET) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *SFSSHealthStatusGET) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataType returns the OdataType field value
func (o *SFSSHealthStatusGET) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *SFSSHealthStatusGET) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *SFSSHealthStatusGET) SetOdataType(v string) {
	o.OdataType = v
}

// GetOdataContext returns the OdataContext field value
func (o *SFSSHealthStatusGET) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *SFSSHealthStatusGET) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *SFSSHealthStatusGET) SetOdataContext(v string) {
	o.OdataContext = v
}

func (o SFSSHealthStatusGET) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SFSSHealthStatusGET) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Health"] = o.Health
	toSerialize["ReasonCode"] = o.ReasonCode
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.type"] = o.OdataType
	toSerialize["@odata.context"] = o.OdataContext
	return toSerialize, nil
}

func (o *SFSSHealthStatusGET) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Health",
		"ReasonCode",
		"@odata.id",
		"@odata.type",
		"@odata.context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSFSSHealthStatusGET := _SFSSHealthStatusGET{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSFSSHealthStatusGET)

	if err != nil {
		return err
	}

	*o = SFSSHealthStatusGET(varSFSSHealthStatusGET)

	return err
}

type NullableSFSSHealthStatusGET struct {
	value *SFSSHealthStatusGET
	isSet bool
}

func (v NullableSFSSHealthStatusGET) Get() *SFSSHealthStatusGET {
	return v.value
}

func (v *NullableSFSSHealthStatusGET) Set(val *SFSSHealthStatusGET) {
	v.value = val
	v.isSet = true
}

func (v NullableSFSSHealthStatusGET) IsSet() bool {
	return v.isSet
}

func (v *NullableSFSSHealthStatusGET) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSFSSHealthStatusGET(val *SFSSHealthStatusGET) *NullableSFSSHealthStatusGET {
	return &NullableSFSSHealthStatusGET{value: val, isSet: true}
}

func (v NullableSFSSHealthStatusGET) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSFSSHealthStatusGET) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


