/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfss

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostRedfishV1SFSSAppLicensesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostRedfishV1SFSSAppLicensesRequest{}

// PostRedfishV1SFSSAppLicensesRequest 
type PostRedfishV1SFSSAppLicensesRequest struct {
	// License information
	LicenseContent string `json:"LicenseContent"`
	// Name of the license file
	LicenseFileName string `json:"LicenseFileName"`
}

type _PostRedfishV1SFSSAppLicensesRequest PostRedfishV1SFSSAppLicensesRequest

// NewPostRedfishV1SFSSAppLicensesRequest instantiates a new PostRedfishV1SFSSAppLicensesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostRedfishV1SFSSAppLicensesRequest(licenseContent string, licenseFileName string) *PostRedfishV1SFSSAppLicensesRequest {
	this := PostRedfishV1SFSSAppLicensesRequest{}
	this.LicenseContent = licenseContent
	this.LicenseFileName = licenseFileName
	return &this
}

// NewPostRedfishV1SFSSAppLicensesRequestWithDefaults instantiates a new PostRedfishV1SFSSAppLicensesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostRedfishV1SFSSAppLicensesRequestWithDefaults() *PostRedfishV1SFSSAppLicensesRequest {
	this := PostRedfishV1SFSSAppLicensesRequest{}
	return &this
}

// GetLicenseContent returns the LicenseContent field value
func (o *PostRedfishV1SFSSAppLicensesRequest) GetLicenseContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseContent
}

// GetLicenseContentOk returns a tuple with the LicenseContent field value
// and a boolean to check if the value has been set.
func (o *PostRedfishV1SFSSAppLicensesRequest) GetLicenseContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseContent, true
}

// SetLicenseContent sets field value
func (o *PostRedfishV1SFSSAppLicensesRequest) SetLicenseContent(v string) {
	o.LicenseContent = v
}

// GetLicenseFileName returns the LicenseFileName field value
func (o *PostRedfishV1SFSSAppLicensesRequest) GetLicenseFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseFileName
}

// GetLicenseFileNameOk returns a tuple with the LicenseFileName field value
// and a boolean to check if the value has been set.
func (o *PostRedfishV1SFSSAppLicensesRequest) GetLicenseFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseFileName, true
}

// SetLicenseFileName sets field value
func (o *PostRedfishV1SFSSAppLicensesRequest) SetLicenseFileName(v string) {
	o.LicenseFileName = v
}

func (o PostRedfishV1SFSSAppLicensesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostRedfishV1SFSSAppLicensesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["LicenseContent"] = o.LicenseContent
	toSerialize["LicenseFileName"] = o.LicenseFileName
	return toSerialize, nil
}

func (o *PostRedfishV1SFSSAppLicensesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"LicenseContent",
		"LicenseFileName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostRedfishV1SFSSAppLicensesRequest := _PostRedfishV1SFSSAppLicensesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostRedfishV1SFSSAppLicensesRequest)

	if err != nil {
		return err
	}

	*o = PostRedfishV1SFSSAppLicensesRequest(varPostRedfishV1SFSSAppLicensesRequest)

	return err
}

type NullablePostRedfishV1SFSSAppLicensesRequest struct {
	value *PostRedfishV1SFSSAppLicensesRequest
	isSet bool
}

func (v NullablePostRedfishV1SFSSAppLicensesRequest) Get() *PostRedfishV1SFSSAppLicensesRequest {
	return v.value
}

func (v *NullablePostRedfishV1SFSSAppLicensesRequest) Set(val *PostRedfishV1SFSSAppLicensesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostRedfishV1SFSSAppLicensesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostRedfishV1SFSSAppLicensesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostRedfishV1SFSSAppLicensesRequest(val *PostRedfishV1SFSSAppLicensesRequest) *NullablePostRedfishV1SFSSAppLicensesRequest {
	return &NullablePostRedfishV1SFSSAppLicensesRequest{value: val, isSet: true}
}

func (v NullablePostRedfishV1SFSSAppLicensesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostRedfishV1SFSSAppLicensesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


