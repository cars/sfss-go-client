/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfss

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventsGET type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsGET{}

// EventsGET This model lists all the events in SFSS.
type EventsGET struct {
	// A set of events
	Events []EventsGETEventsInner `json:"Events"`
	// Number of events reported
	EventsodataCount float32 `json:"Events@odata.count"`
	OdataId string `json:"@odata.id"`
	OdataContext string `json:"@odata.context"`
	OdataType string `json:"@odata.type"`
	TotalCount float32 `json:"TotalCount"`
}

type _EventsGET EventsGET

// NewEventsGET instantiates a new EventsGET object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsGET(events []EventsGETEventsInner, eventsodataCount float32, odataId string, odataContext string, odataType string, totalCount float32) *EventsGET {
	this := EventsGET{}
	this.Events = events
	this.EventsodataCount = eventsodataCount
	this.OdataId = odataId
	this.OdataContext = odataContext
	this.OdataType = odataType
	this.TotalCount = totalCount
	return &this
}

// NewEventsGETWithDefaults instantiates a new EventsGET object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsGETWithDefaults() *EventsGET {
	this := EventsGET{}
	return &this
}

// GetEvents returns the Events field value
func (o *EventsGET) GetEvents() []EventsGETEventsInner {
	if o == nil {
		var ret []EventsGETEventsInner
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *EventsGET) GetEventsOk() ([]EventsGETEventsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *EventsGET) SetEvents(v []EventsGETEventsInner) {
	o.Events = v
}

// GetEventsodataCount returns the EventsodataCount field value
func (o *EventsGET) GetEventsodataCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.EventsodataCount
}

// GetEventsodataCountOk returns a tuple with the EventsodataCount field value
// and a boolean to check if the value has been set.
func (o *EventsGET) GetEventsodataCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventsodataCount, true
}

// SetEventsodataCount sets field value
func (o *EventsGET) SetEventsodataCount(v float32) {
	o.EventsodataCount = v
}

// GetOdataId returns the OdataId field value
func (o *EventsGET) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *EventsGET) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *EventsGET) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataContext returns the OdataContext field value
func (o *EventsGET) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *EventsGET) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *EventsGET) SetOdataContext(v string) {
	o.OdataContext = v
}

// GetOdataType returns the OdataType field value
func (o *EventsGET) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *EventsGET) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *EventsGET) SetOdataType(v string) {
	o.OdataType = v
}

// GetTotalCount returns the TotalCount field value
func (o *EventsGET) GetTotalCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *EventsGET) GetTotalCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *EventsGET) SetTotalCount(v float32) {
	o.TotalCount = v
}

func (o EventsGET) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsGET) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Events"] = o.Events
	toSerialize["Events@odata.count"] = o.EventsodataCount
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.context"] = o.OdataContext
	toSerialize["@odata.type"] = o.OdataType
	toSerialize["TotalCount"] = o.TotalCount
	return toSerialize, nil
}

func (o *EventsGET) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Events",
		"Events@odata.count",
		"@odata.id",
		"@odata.context",
		"@odata.type",
		"TotalCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventsGET := _EventsGET{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventsGET)

	if err != nil {
		return err
	}

	*o = EventsGET(varEventsGET)

	return err
}

type NullableEventsGET struct {
	value *EventsGET
	isSet bool
}

func (v NullableEventsGET) Get() *EventsGET {
	return v.value
}

func (v *NullableEventsGET) Set(val *EventsGET) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsGET) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsGET) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsGET(val *EventsGET) *NullableEventsGET {
	return &NullableEventsGET{value: val, isSet: true}
}

func (v NullableEventsGET) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsGET) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


