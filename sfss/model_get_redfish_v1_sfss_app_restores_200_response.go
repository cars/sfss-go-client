/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfss

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetRedfishV1SFSSAppRestores200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRedfishV1SFSSAppRestores200Response{}

// GetRedfishV1SFSSAppRestores200Response 
type GetRedfishV1SFSSAppRestores200Response struct {
	// A set of restore operations performed on SFSS
	Restores []GetRedfishV1SFSSAppLicenses200ResponseLicensesInner `json:"Restores"`
	// Number of restore operations performed
	RestoresodataCount float32 `json:"Restores@odata.count"`
	OdataId string `json:"@odata.id"`
	OdataContext string `json:"@odata.context"`
	OdataType string `json:"@odata.type"`
}

type _GetRedfishV1SFSSAppRestores200Response GetRedfishV1SFSSAppRestores200Response

// NewGetRedfishV1SFSSAppRestores200Response instantiates a new GetRedfishV1SFSSAppRestores200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRedfishV1SFSSAppRestores200Response(restores []GetRedfishV1SFSSAppLicenses200ResponseLicensesInner, restoresodataCount float32, odataId string, odataContext string, odataType string) *GetRedfishV1SFSSAppRestores200Response {
	this := GetRedfishV1SFSSAppRestores200Response{}
	this.Restores = restores
	this.RestoresodataCount = restoresodataCount
	this.OdataId = odataId
	this.OdataContext = odataContext
	this.OdataType = odataType
	return &this
}

// NewGetRedfishV1SFSSAppRestores200ResponseWithDefaults instantiates a new GetRedfishV1SFSSAppRestores200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRedfishV1SFSSAppRestores200ResponseWithDefaults() *GetRedfishV1SFSSAppRestores200Response {
	this := GetRedfishV1SFSSAppRestores200Response{}
	return &this
}

// GetRestores returns the Restores field value
func (o *GetRedfishV1SFSSAppRestores200Response) GetRestores() []GetRedfishV1SFSSAppLicenses200ResponseLicensesInner {
	if o == nil {
		var ret []GetRedfishV1SFSSAppLicenses200ResponseLicensesInner
		return ret
	}

	return o.Restores
}

// GetRestoresOk returns a tuple with the Restores field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppRestores200Response) GetRestoresOk() ([]GetRedfishV1SFSSAppLicenses200ResponseLicensesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Restores, true
}

// SetRestores sets field value
func (o *GetRedfishV1SFSSAppRestores200Response) SetRestores(v []GetRedfishV1SFSSAppLicenses200ResponseLicensesInner) {
	o.Restores = v
}

// GetRestoresodataCount returns the RestoresodataCount field value
func (o *GetRedfishV1SFSSAppRestores200Response) GetRestoresodataCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RestoresodataCount
}

// GetRestoresodataCountOk returns a tuple with the RestoresodataCount field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppRestores200Response) GetRestoresodataCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestoresodataCount, true
}

// SetRestoresodataCount sets field value
func (o *GetRedfishV1SFSSAppRestores200Response) SetRestoresodataCount(v float32) {
	o.RestoresodataCount = v
}

// GetOdataId returns the OdataId field value
func (o *GetRedfishV1SFSSAppRestores200Response) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppRestores200Response) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *GetRedfishV1SFSSAppRestores200Response) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataContext returns the OdataContext field value
func (o *GetRedfishV1SFSSAppRestores200Response) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppRestores200Response) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *GetRedfishV1SFSSAppRestores200Response) SetOdataContext(v string) {
	o.OdataContext = v
}

// GetOdataType returns the OdataType field value
func (o *GetRedfishV1SFSSAppRestores200Response) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppRestores200Response) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *GetRedfishV1SFSSAppRestores200Response) SetOdataType(v string) {
	o.OdataType = v
}

func (o GetRedfishV1SFSSAppRestores200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRedfishV1SFSSAppRestores200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Restores"] = o.Restores
	toSerialize["Restores@odata.count"] = o.RestoresodataCount
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.context"] = o.OdataContext
	toSerialize["@odata.type"] = o.OdataType
	return toSerialize, nil
}

func (o *GetRedfishV1SFSSAppRestores200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Restores",
		"Restores@odata.count",
		"@odata.id",
		"@odata.context",
		"@odata.type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRedfishV1SFSSAppRestores200Response := _GetRedfishV1SFSSAppRestores200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRedfishV1SFSSAppRestores200Response)

	if err != nil {
		return err
	}

	*o = GetRedfishV1SFSSAppRestores200Response(varGetRedfishV1SFSSAppRestores200Response)

	return err
}

type NullableGetRedfishV1SFSSAppRestores200Response struct {
	value *GetRedfishV1SFSSAppRestores200Response
	isSet bool
}

func (v NullableGetRedfishV1SFSSAppRestores200Response) Get() *GetRedfishV1SFSSAppRestores200Response {
	return v.value
}

func (v *NullableGetRedfishV1SFSSAppRestores200Response) Set(val *GetRedfishV1SFSSAppRestores200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRedfishV1SFSSAppRestores200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRedfishV1SFSSAppRestores200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRedfishV1SFSSAppRestores200Response(val *GetRedfishV1SFSSAppRestores200Response) *NullableGetRedfishV1SFSSAppRestores200Response {
	return &NullableGetRedfishV1SFSSAppRestores200Response{value: val, isSet: true}
}

func (v NullableGetRedfishV1SFSSAppRestores200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRedfishV1SFSSAppRestores200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


