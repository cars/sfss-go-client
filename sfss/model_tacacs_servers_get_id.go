/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfss

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TacacsServersGETID type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TacacsServersGETID{}

// TacacsServersGETID This model lists the TACACS+ server information based on the specified TACACS+ server ID. 
type TacacsServersGETID struct {
	// List of configured TACACS+ servers
	TacacsServers []GetRedfishV1SFSSAppLicenses200ResponseLicensesInner `json:"TacacsServers"`
	// Number of configured TACACS+ servers
	TacacsServersodataCount float32 `json:"TacacsServers@odata.count"`
	OdataId string `json:"@odata.id"`
	OdataContext string `json:"@odata.context"`
	OdataType string `json:"@odata.type"`
}

type _TacacsServersGETID TacacsServersGETID

// NewTacacsServersGETID instantiates a new TacacsServersGETID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTacacsServersGETID(tacacsServers []GetRedfishV1SFSSAppLicenses200ResponseLicensesInner, tacacsServersodataCount float32, odataId string, odataContext string, odataType string) *TacacsServersGETID {
	this := TacacsServersGETID{}
	this.TacacsServers = tacacsServers
	this.TacacsServersodataCount = tacacsServersodataCount
	this.OdataId = odataId
	this.OdataContext = odataContext
	this.OdataType = odataType
	return &this
}

// NewTacacsServersGETIDWithDefaults instantiates a new TacacsServersGETID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTacacsServersGETIDWithDefaults() *TacacsServersGETID {
	this := TacacsServersGETID{}
	return &this
}

// GetTacacsServers returns the TacacsServers field value
func (o *TacacsServersGETID) GetTacacsServers() []GetRedfishV1SFSSAppLicenses200ResponseLicensesInner {
	if o == nil {
		var ret []GetRedfishV1SFSSAppLicenses200ResponseLicensesInner
		return ret
	}

	return o.TacacsServers
}

// GetTacacsServersOk returns a tuple with the TacacsServers field value
// and a boolean to check if the value has been set.
func (o *TacacsServersGETID) GetTacacsServersOk() ([]GetRedfishV1SFSSAppLicenses200ResponseLicensesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.TacacsServers, true
}

// SetTacacsServers sets field value
func (o *TacacsServersGETID) SetTacacsServers(v []GetRedfishV1SFSSAppLicenses200ResponseLicensesInner) {
	o.TacacsServers = v
}

// GetTacacsServersodataCount returns the TacacsServersodataCount field value
func (o *TacacsServersGETID) GetTacacsServersodataCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TacacsServersodataCount
}

// GetTacacsServersodataCountOk returns a tuple with the TacacsServersodataCount field value
// and a boolean to check if the value has been set.
func (o *TacacsServersGETID) GetTacacsServersodataCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TacacsServersodataCount, true
}

// SetTacacsServersodataCount sets field value
func (o *TacacsServersGETID) SetTacacsServersodataCount(v float32) {
	o.TacacsServersodataCount = v
}

// GetOdataId returns the OdataId field value
func (o *TacacsServersGETID) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *TacacsServersGETID) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *TacacsServersGETID) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataContext returns the OdataContext field value
func (o *TacacsServersGETID) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *TacacsServersGETID) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *TacacsServersGETID) SetOdataContext(v string) {
	o.OdataContext = v
}

// GetOdataType returns the OdataType field value
func (o *TacacsServersGETID) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *TacacsServersGETID) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *TacacsServersGETID) SetOdataType(v string) {
	o.OdataType = v
}

func (o TacacsServersGETID) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TacacsServersGETID) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["TacacsServers"] = o.TacacsServers
	toSerialize["TacacsServers@odata.count"] = o.TacacsServersodataCount
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.context"] = o.OdataContext
	toSerialize["@odata.type"] = o.OdataType
	return toSerialize, nil
}

func (o *TacacsServersGETID) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"TacacsServers",
		"TacacsServers@odata.count",
		"@odata.id",
		"@odata.context",
		"@odata.type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTacacsServersGETID := _TacacsServersGETID{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTacacsServersGETID)

	if err != nil {
		return err
	}

	*o = TacacsServersGETID(varTacacsServersGETID)

	return err
}

type NullableTacacsServersGETID struct {
	value *TacacsServersGETID
	isSet bool
}

func (v NullableTacacsServersGETID) Get() *TacacsServersGETID {
	return v.value
}

func (v *NullableTacacsServersGETID) Set(val *TacacsServersGETID) {
	v.value = val
	v.isSet = true
}

func (v NullableTacacsServersGETID) IsSet() bool {
	return v.isSet
}

func (v *NullableTacacsServersGETID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTacacsServersGETID(val *TacacsServersGETID) *NullableTacacsServersGETID {
	return &NullableTacacsServersGETID{value: val, isSet: true}
}

func (v NullableTacacsServersGETID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTacacsServersGETID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


