/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfss

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventsGETEventsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsGETEventsInner{}

// EventsGETEventsInner struct for EventsGETEventsInner
type EventsGETEventsInner struct {
	// Required arguments
	Args []map[string]interface{} `json:"Args,omitempty"`
	// CDC instance identifier
	CDCInstance string `json:"CDCInstance"`
	// Enhanced Event Message Initiative (EEMI) Message Code
	EEMI string `json:"EEMI"`
	// Hostname of the CDC instance
	HostName string `json:"HostName"`
	// Message summary
	Message string `json:"Message"`
	OriginOfCondition []map[string]interface{} `json:"OriginOfCondition,omitempty"`
	// Severity of the event; possible values include Critical, Warning, and Informational
	Severity string `json:"Severity"`
	// SFSS service that is responsible for handling the event
	Source string `json:"Source"`
	// The module within the SFSS service that is responsible for handling the event 
	SourceSubType string `json:"SourceSubType"`
	// Date and time at which the event occurred; date is of the mm/dd/yyyy format and time is of hh:mm:ss format
	TimeStamp string `json:"timeStamp"`
	OdataId string `json:"@odata.id"`
	OdataType string `json:"@odata.type"`
	OdataContext string `json:"@odata.context"`
}

type _EventsGETEventsInner EventsGETEventsInner

// NewEventsGETEventsInner instantiates a new EventsGETEventsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsGETEventsInner(cDCInstance string, eEMI string, hostName string, message string, severity string, source string, sourceSubType string, timeStamp string, odataId string, odataType string, odataContext string) *EventsGETEventsInner {
	this := EventsGETEventsInner{}
	this.CDCInstance = cDCInstance
	this.EEMI = eEMI
	this.HostName = hostName
	this.Message = message
	this.Severity = severity
	this.Source = source
	this.SourceSubType = sourceSubType
	this.TimeStamp = timeStamp
	this.OdataId = odataId
	this.OdataType = odataType
	this.OdataContext = odataContext
	return &this
}

// NewEventsGETEventsInnerWithDefaults instantiates a new EventsGETEventsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsGETEventsInnerWithDefaults() *EventsGETEventsInner {
	this := EventsGETEventsInner{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *EventsGETEventsInner) GetArgs() []map[string]interface{} {
	if o == nil || IsNil(o.Args) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsGETEventsInner) GetArgsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Args) {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *EventsGETEventsInner) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []map[string]interface{} and assigns it to the Args field.
func (o *EventsGETEventsInner) SetArgs(v []map[string]interface{}) {
	o.Args = v
}

// GetCDCInstance returns the CDCInstance field value
func (o *EventsGETEventsInner) GetCDCInstance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CDCInstance
}

// GetCDCInstanceOk returns a tuple with the CDCInstance field value
// and a boolean to check if the value has been set.
func (o *EventsGETEventsInner) GetCDCInstanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CDCInstance, true
}

// SetCDCInstance sets field value
func (o *EventsGETEventsInner) SetCDCInstance(v string) {
	o.CDCInstance = v
}

// GetEEMI returns the EEMI field value
func (o *EventsGETEventsInner) GetEEMI() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EEMI
}

// GetEEMIOk returns a tuple with the EEMI field value
// and a boolean to check if the value has been set.
func (o *EventsGETEventsInner) GetEEMIOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EEMI, true
}

// SetEEMI sets field value
func (o *EventsGETEventsInner) SetEEMI(v string) {
	o.EEMI = v
}

// GetHostName returns the HostName field value
func (o *EventsGETEventsInner) GetHostName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value
// and a boolean to check if the value has been set.
func (o *EventsGETEventsInner) GetHostNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostName, true
}

// SetHostName sets field value
func (o *EventsGETEventsInner) SetHostName(v string) {
	o.HostName = v
}

// GetMessage returns the Message field value
func (o *EventsGETEventsInner) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *EventsGETEventsInner) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *EventsGETEventsInner) SetMessage(v string) {
	o.Message = v
}

// GetOriginOfCondition returns the OriginOfCondition field value if set, zero value otherwise.
func (o *EventsGETEventsInner) GetOriginOfCondition() []map[string]interface{} {
	if o == nil || IsNil(o.OriginOfCondition) {
		var ret []map[string]interface{}
		return ret
	}
	return o.OriginOfCondition
}

// GetOriginOfConditionOk returns a tuple with the OriginOfCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsGETEventsInner) GetOriginOfConditionOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.OriginOfCondition) {
		return nil, false
	}
	return o.OriginOfCondition, true
}

// HasOriginOfCondition returns a boolean if a field has been set.
func (o *EventsGETEventsInner) HasOriginOfCondition() bool {
	if o != nil && !IsNil(o.OriginOfCondition) {
		return true
	}

	return false
}

// SetOriginOfCondition gets a reference to the given []map[string]interface{} and assigns it to the OriginOfCondition field.
func (o *EventsGETEventsInner) SetOriginOfCondition(v []map[string]interface{}) {
	o.OriginOfCondition = v
}

// GetSeverity returns the Severity field value
func (o *EventsGETEventsInner) GetSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *EventsGETEventsInner) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *EventsGETEventsInner) SetSeverity(v string) {
	o.Severity = v
}

// GetSource returns the Source field value
func (o *EventsGETEventsInner) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *EventsGETEventsInner) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *EventsGETEventsInner) SetSource(v string) {
	o.Source = v
}

// GetSourceSubType returns the SourceSubType field value
func (o *EventsGETEventsInner) GetSourceSubType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceSubType
}

// GetSourceSubTypeOk returns a tuple with the SourceSubType field value
// and a boolean to check if the value has been set.
func (o *EventsGETEventsInner) GetSourceSubTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceSubType, true
}

// SetSourceSubType sets field value
func (o *EventsGETEventsInner) SetSourceSubType(v string) {
	o.SourceSubType = v
}

// GetTimeStamp returns the TimeStamp field value
func (o *EventsGETEventsInner) GetTimeStamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value
// and a boolean to check if the value has been set.
func (o *EventsGETEventsInner) GetTimeStampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeStamp, true
}

// SetTimeStamp sets field value
func (o *EventsGETEventsInner) SetTimeStamp(v string) {
	o.TimeStamp = v
}

// GetOdataId returns the OdataId field value
func (o *EventsGETEventsInner) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *EventsGETEventsInner) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *EventsGETEventsInner) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataType returns the OdataType field value
func (o *EventsGETEventsInner) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *EventsGETEventsInner) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *EventsGETEventsInner) SetOdataType(v string) {
	o.OdataType = v
}

// GetOdataContext returns the OdataContext field value
func (o *EventsGETEventsInner) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *EventsGETEventsInner) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *EventsGETEventsInner) SetOdataContext(v string) {
	o.OdataContext = v
}

func (o EventsGETEventsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsGETEventsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Args) {
		toSerialize["Args"] = o.Args
	}
	toSerialize["CDCInstance"] = o.CDCInstance
	toSerialize["EEMI"] = o.EEMI
	toSerialize["HostName"] = o.HostName
	toSerialize["Message"] = o.Message
	if !IsNil(o.OriginOfCondition) {
		toSerialize["OriginOfCondition"] = o.OriginOfCondition
	}
	toSerialize["Severity"] = o.Severity
	toSerialize["Source"] = o.Source
	toSerialize["SourceSubType"] = o.SourceSubType
	toSerialize["timeStamp"] = o.TimeStamp
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.type"] = o.OdataType
	toSerialize["@odata.context"] = o.OdataContext
	return toSerialize, nil
}

func (o *EventsGETEventsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CDCInstance",
		"EEMI",
		"HostName",
		"Message",
		"Severity",
		"Source",
		"SourceSubType",
		"timeStamp",
		"@odata.id",
		"@odata.type",
		"@odata.context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventsGETEventsInner := _EventsGETEventsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventsGETEventsInner)

	if err != nil {
		return err
	}

	*o = EventsGETEventsInner(varEventsGETEventsInner)

	return err
}

type NullableEventsGETEventsInner struct {
	value *EventsGETEventsInner
	isSet bool
}

func (v NullableEventsGETEventsInner) Get() *EventsGETEventsInner {
	return v.value
}

func (v *NullableEventsGETEventsInner) Set(val *EventsGETEventsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsGETEventsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsGETEventsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsGETEventsInner(val *EventsGETEventsInner) *NullableEventsGETEventsInner {
	return &NullableEventsGETEventsInner{value: val, isSet: true}
}

func (v NullableEventsGETEventsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsGETEventsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


