/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfss

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SFSSImagesGETENUMs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SFSSImagesGETENUMs{}

// SFSSImagesGETENUMs This model lists the supported enumerations for the SFSS image configuration
type SFSSImagesGETENUMs struct {
	// Status of the add image operation; possible values inclulde Failure, InProgress, Success, and NotStarted 
	Status []interface{} `json:"Status"`
	// Transport type used to copy the SFSS image from the remote repository; possible values include SCP, SFTP, HTTP, and HTTPs
	TransportType []interface{} `json:"TransportType"`
}

type _SFSSImagesGETENUMs SFSSImagesGETENUMs

// NewSFSSImagesGETENUMs instantiates a new SFSSImagesGETENUMs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSFSSImagesGETENUMs(status []interface{}, transportType []interface{}) *SFSSImagesGETENUMs {
	this := SFSSImagesGETENUMs{}
	this.Status = status
	this.TransportType = transportType
	return &this
}

// NewSFSSImagesGETENUMsWithDefaults instantiates a new SFSSImagesGETENUMs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSFSSImagesGETENUMsWithDefaults() *SFSSImagesGETENUMs {
	this := SFSSImagesGETENUMs{}
	return &this
}

// GetStatus returns the Status field value
func (o *SFSSImagesGETENUMs) GetStatus() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SFSSImagesGETENUMs) GetStatusOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status, true
}

// SetStatus sets field value
func (o *SFSSImagesGETENUMs) SetStatus(v []interface{}) {
	o.Status = v
}

// GetTransportType returns the TransportType field value
func (o *SFSSImagesGETENUMs) GetTransportType() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.TransportType
}

// GetTransportTypeOk returns a tuple with the TransportType field value
// and a boolean to check if the value has been set.
func (o *SFSSImagesGETENUMs) GetTransportTypeOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransportType, true
}

// SetTransportType sets field value
func (o *SFSSImagesGETENUMs) SetTransportType(v []interface{}) {
	o.TransportType = v
}

func (o SFSSImagesGETENUMs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SFSSImagesGETENUMs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Status"] = o.Status
	toSerialize["TransportType"] = o.TransportType
	return toSerialize, nil
}

func (o *SFSSImagesGETENUMs) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Status",
		"TransportType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSFSSImagesGETENUMs := _SFSSImagesGETENUMs{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSFSSImagesGETENUMs)

	if err != nil {
		return err
	}

	*o = SFSSImagesGETENUMs(varSFSSImagesGETENUMs)

	return err
}

type NullableSFSSImagesGETENUMs struct {
	value *SFSSImagesGETENUMs
	isSet bool
}

func (v NullableSFSSImagesGETENUMs) Get() *SFSSImagesGETENUMs {
	return v.value
}

func (v *NullableSFSSImagesGETENUMs) Set(val *SFSSImagesGETENUMs) {
	v.value = val
	v.isSet = true
}

func (v NullableSFSSImagesGETENUMs) IsSet() bool {
	return v.isSet
}

func (v *NullableSFSSImagesGETENUMs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSFSSImagesGETENUMs(val *SFSSImagesGETENUMs) *NullableSFSSImagesGETENUMs {
	return &NullableSFSSImagesGETENUMs{value: val, isSet: true}
}

func (v NullableSFSSImagesGETENUMs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSFSSImagesGETENUMs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


