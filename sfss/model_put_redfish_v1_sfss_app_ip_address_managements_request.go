/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfss

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PutRedfishV1SFSSAppIpAddressManagementsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutRedfishV1SFSSAppIpAddressManagementsRequest{}

// PutRedfishV1SFSSAppIpAddressManagementsRequest 
type PutRedfishV1SFSSAppIpAddressManagementsRequest struct {
	// Interface IPv4 address 
	IPV4Address []string `json:"IPV4Address"`
	// IP address configuration type; possible values include Manual, Automatic, and Disabled
	IPV4Config string `json:"IPV4Config"`
	// IPv4 gateway address
	IPV4Gateway string `json:"IPV4Gateway"`
	// Subnet mask
	IPV4PrefixLength float32 `json:"IPV4PrefixLength"`
	// IPv4 static route configuration
	IPV4Route []PostRedfishV1SFSSAppIpAddressManagementsRequestIPV4RouteInner `json:"IPV4Route,omitempty"`
	// IP address configuration type; possible values include Manual, Automatic, and Disabled
	IPV6Config string `json:"IPV6Config"`
	// Friendly name for the interface
	Name *string `json:"Name,omitempty"`
	// Interface IPv6 address 
	IPV6Address []string `json:"IPV6Address"`
	// IPv6 gateway address
	IPV6Gateway string `json:"IPV6Gateway"`
	// Subnet mask
	IPV6PrefixLength float32 `json:"IPV6PrefixLength"`
	// The cost assigned to the route; valid range is from 1 to 255
	MTU *float32 `json:"MTU,omitempty"`
	IPV6Route []PutRedfishV1SFSSAppIpAddressManagementsRequestIPV6RouteInner `json:"IPV6Route,omitempty"`
}

type _PutRedfishV1SFSSAppIpAddressManagementsRequest PutRedfishV1SFSSAppIpAddressManagementsRequest

// NewPutRedfishV1SFSSAppIpAddressManagementsRequest instantiates a new PutRedfishV1SFSSAppIpAddressManagementsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutRedfishV1SFSSAppIpAddressManagementsRequest(iPV4Address []string, iPV4Config string, iPV4Gateway string, iPV4PrefixLength float32, iPV6Config string, iPV6Address []string, iPV6Gateway string, iPV6PrefixLength float32) *PutRedfishV1SFSSAppIpAddressManagementsRequest {
	this := PutRedfishV1SFSSAppIpAddressManagementsRequest{}
	this.IPV4Address = iPV4Address
	this.IPV4Config = iPV4Config
	this.IPV4Gateway = iPV4Gateway
	this.IPV4PrefixLength = iPV4PrefixLength
	this.IPV6Config = iPV6Config
	this.IPV6Address = iPV6Address
	this.IPV6Gateway = iPV6Gateway
	this.IPV6PrefixLength = iPV6PrefixLength
	return &this
}

// NewPutRedfishV1SFSSAppIpAddressManagementsRequestWithDefaults instantiates a new PutRedfishV1SFSSAppIpAddressManagementsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutRedfishV1SFSSAppIpAddressManagementsRequestWithDefaults() *PutRedfishV1SFSSAppIpAddressManagementsRequest {
	this := PutRedfishV1SFSSAppIpAddressManagementsRequest{}
	return &this
}

// GetIPV4Address returns the IPV4Address field value
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV4Address() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IPV4Address
}

// GetIPV4AddressOk returns a tuple with the IPV4Address field value
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV4AddressOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IPV4Address, true
}

// SetIPV4Address sets field value
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) SetIPV4Address(v []string) {
	o.IPV4Address = v
}

// GetIPV4Config returns the IPV4Config field value
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV4Config() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IPV4Config
}

// GetIPV4ConfigOk returns a tuple with the IPV4Config field value
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV4ConfigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IPV4Config, true
}

// SetIPV4Config sets field value
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) SetIPV4Config(v string) {
	o.IPV4Config = v
}

// GetIPV4Gateway returns the IPV4Gateway field value
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV4Gateway() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IPV4Gateway
}

// GetIPV4GatewayOk returns a tuple with the IPV4Gateway field value
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV4GatewayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IPV4Gateway, true
}

// SetIPV4Gateway sets field value
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) SetIPV4Gateway(v string) {
	o.IPV4Gateway = v
}

// GetIPV4PrefixLength returns the IPV4PrefixLength field value
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV4PrefixLength() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.IPV4PrefixLength
}

// GetIPV4PrefixLengthOk returns a tuple with the IPV4PrefixLength field value
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV4PrefixLengthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IPV4PrefixLength, true
}

// SetIPV4PrefixLength sets field value
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) SetIPV4PrefixLength(v float32) {
	o.IPV4PrefixLength = v
}

// GetIPV4Route returns the IPV4Route field value if set, zero value otherwise.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV4Route() []PostRedfishV1SFSSAppIpAddressManagementsRequestIPV4RouteInner {
	if o == nil || IsNil(o.IPV4Route) {
		var ret []PostRedfishV1SFSSAppIpAddressManagementsRequestIPV4RouteInner
		return ret
	}
	return o.IPV4Route
}

// GetIPV4RouteOk returns a tuple with the IPV4Route field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV4RouteOk() ([]PostRedfishV1SFSSAppIpAddressManagementsRequestIPV4RouteInner, bool) {
	if o == nil || IsNil(o.IPV4Route) {
		return nil, false
	}
	return o.IPV4Route, true
}

// HasIPV4Route returns a boolean if a field has been set.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) HasIPV4Route() bool {
	if o != nil && !IsNil(o.IPV4Route) {
		return true
	}

	return false
}

// SetIPV4Route gets a reference to the given []PostRedfishV1SFSSAppIpAddressManagementsRequestIPV4RouteInner and assigns it to the IPV4Route field.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) SetIPV4Route(v []PostRedfishV1SFSSAppIpAddressManagementsRequestIPV4RouteInner) {
	o.IPV4Route = v
}

// GetIPV6Config returns the IPV6Config field value
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV6Config() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IPV6Config
}

// GetIPV6ConfigOk returns a tuple with the IPV6Config field value
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV6ConfigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IPV6Config, true
}

// SetIPV6Config sets field value
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) SetIPV6Config(v string) {
	o.IPV6Config = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) SetName(v string) {
	o.Name = &v
}

// GetIPV6Address returns the IPV6Address field value
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV6Address() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IPV6Address
}

// GetIPV6AddressOk returns a tuple with the IPV6Address field value
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV6AddressOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IPV6Address, true
}

// SetIPV6Address sets field value
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) SetIPV6Address(v []string) {
	o.IPV6Address = v
}

// GetIPV6Gateway returns the IPV6Gateway field value
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV6Gateway() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IPV6Gateway
}

// GetIPV6GatewayOk returns a tuple with the IPV6Gateway field value
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV6GatewayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IPV6Gateway, true
}

// SetIPV6Gateway sets field value
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) SetIPV6Gateway(v string) {
	o.IPV6Gateway = v
}

// GetIPV6PrefixLength returns the IPV6PrefixLength field value
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV6PrefixLength() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.IPV6PrefixLength
}

// GetIPV6PrefixLengthOk returns a tuple with the IPV6PrefixLength field value
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV6PrefixLengthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IPV6PrefixLength, true
}

// SetIPV6PrefixLength sets field value
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) SetIPV6PrefixLength(v float32) {
	o.IPV6PrefixLength = v
}

// GetMTU returns the MTU field value if set, zero value otherwise.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetMTU() float32 {
	if o == nil || IsNil(o.MTU) {
		var ret float32
		return ret
	}
	return *o.MTU
}

// GetMTUOk returns a tuple with the MTU field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetMTUOk() (*float32, bool) {
	if o == nil || IsNil(o.MTU) {
		return nil, false
	}
	return o.MTU, true
}

// HasMTU returns a boolean if a field has been set.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) HasMTU() bool {
	if o != nil && !IsNil(o.MTU) {
		return true
	}

	return false
}

// SetMTU gets a reference to the given float32 and assigns it to the MTU field.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) SetMTU(v float32) {
	o.MTU = &v
}

// GetIPV6Route returns the IPV6Route field value if set, zero value otherwise.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV6Route() []PutRedfishV1SFSSAppIpAddressManagementsRequestIPV6RouteInner {
	if o == nil || IsNil(o.IPV6Route) {
		var ret []PutRedfishV1SFSSAppIpAddressManagementsRequestIPV6RouteInner
		return ret
	}
	return o.IPV6Route
}

// GetIPV6RouteOk returns a tuple with the IPV6Route field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) GetIPV6RouteOk() ([]PutRedfishV1SFSSAppIpAddressManagementsRequestIPV6RouteInner, bool) {
	if o == nil || IsNil(o.IPV6Route) {
		return nil, false
	}
	return o.IPV6Route, true
}

// HasIPV6Route returns a boolean if a field has been set.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) HasIPV6Route() bool {
	if o != nil && !IsNil(o.IPV6Route) {
		return true
	}

	return false
}

// SetIPV6Route gets a reference to the given []PutRedfishV1SFSSAppIpAddressManagementsRequestIPV6RouteInner and assigns it to the IPV6Route field.
func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) SetIPV6Route(v []PutRedfishV1SFSSAppIpAddressManagementsRequestIPV6RouteInner) {
	o.IPV6Route = v
}

func (o PutRedfishV1SFSSAppIpAddressManagementsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutRedfishV1SFSSAppIpAddressManagementsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["IPV4Address"] = o.IPV4Address
	toSerialize["IPV4Config"] = o.IPV4Config
	toSerialize["IPV4Gateway"] = o.IPV4Gateway
	toSerialize["IPV4PrefixLength"] = o.IPV4PrefixLength
	if !IsNil(o.IPV4Route) {
		toSerialize["IPV4Route"] = o.IPV4Route
	}
	toSerialize["IPV6Config"] = o.IPV6Config
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	toSerialize["IPV6Address"] = o.IPV6Address
	toSerialize["IPV6Gateway"] = o.IPV6Gateway
	toSerialize["IPV6PrefixLength"] = o.IPV6PrefixLength
	if !IsNil(o.MTU) {
		toSerialize["MTU"] = o.MTU
	}
	if !IsNil(o.IPV6Route) {
		toSerialize["IPV6Route"] = o.IPV6Route
	}
	return toSerialize, nil
}

func (o *PutRedfishV1SFSSAppIpAddressManagementsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"IPV4Address",
		"IPV4Config",
		"IPV4Gateway",
		"IPV4PrefixLength",
		"IPV6Config",
		"IPV6Address",
		"IPV6Gateway",
		"IPV6PrefixLength",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPutRedfishV1SFSSAppIpAddressManagementsRequest := _PutRedfishV1SFSSAppIpAddressManagementsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPutRedfishV1SFSSAppIpAddressManagementsRequest)

	if err != nil {
		return err
	}

	*o = PutRedfishV1SFSSAppIpAddressManagementsRequest(varPutRedfishV1SFSSAppIpAddressManagementsRequest)

	return err
}

type NullablePutRedfishV1SFSSAppIpAddressManagementsRequest struct {
	value *PutRedfishV1SFSSAppIpAddressManagementsRequest
	isSet bool
}

func (v NullablePutRedfishV1SFSSAppIpAddressManagementsRequest) Get() *PutRedfishV1SFSSAppIpAddressManagementsRequest {
	return v.value
}

func (v *NullablePutRedfishV1SFSSAppIpAddressManagementsRequest) Set(val *PutRedfishV1SFSSAppIpAddressManagementsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutRedfishV1SFSSAppIpAddressManagementsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutRedfishV1SFSSAppIpAddressManagementsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutRedfishV1SFSSAppIpAddressManagementsRequest(val *PutRedfishV1SFSSAppIpAddressManagementsRequest) *NullablePutRedfishV1SFSSAppIpAddressManagementsRequest {
	return &NullablePutRedfishV1SFSSAppIpAddressManagementsRequest{value: val, isSet: true}
}

func (v NullablePutRedfishV1SFSSAppIpAddressManagementsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutRedfishV1SFSSAppIpAddressManagementsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


