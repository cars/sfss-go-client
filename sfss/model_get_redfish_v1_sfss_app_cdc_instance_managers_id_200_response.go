/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfss

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetRedfishV1SFSSAppCDCInstanceManagersID200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRedfishV1SFSSAppCDCInstanceManagersID200Response{}

// GetRedfishV1SFSSAppCDCInstanceManagersID200Response 
type GetRedfishV1SFSSAppCDCInstanceManagersID200Response struct {
	// Administrative state of the CDC instance
	CDCAdminState string `json:"CDCAdminState"`
	// Administrative state of the discovery service
	DiscoverySvcAdminState string `json:"DiscoverySvcAdminState"`
	// CDC instance identifier
	InstanceIdentifier string `json:"InstanceIdentifier"`
	// Interface(s) assigned to the CDC instance 
	Interfaces []string `json:"Interfaces"`
	// IP address assigned to the interface
	IpAddresses []string `json:"IpAddresses"`
	OdataId string `json:"@odata.id"`
	OdataType string `json:"@odata.type"`
	OdataContext string `json:"@odata.context"`
}

type _GetRedfishV1SFSSAppCDCInstanceManagersID200Response GetRedfishV1SFSSAppCDCInstanceManagersID200Response

// NewGetRedfishV1SFSSAppCDCInstanceManagersID200Response instantiates a new GetRedfishV1SFSSAppCDCInstanceManagersID200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRedfishV1SFSSAppCDCInstanceManagersID200Response(cDCAdminState string, discoverySvcAdminState string, instanceIdentifier string, interfaces []string, ipAddresses []string, odataId string, odataType string, odataContext string) *GetRedfishV1SFSSAppCDCInstanceManagersID200Response {
	this := GetRedfishV1SFSSAppCDCInstanceManagersID200Response{}
	this.CDCAdminState = cDCAdminState
	this.DiscoverySvcAdminState = discoverySvcAdminState
	this.InstanceIdentifier = instanceIdentifier
	this.Interfaces = interfaces
	this.IpAddresses = ipAddresses
	this.OdataId = odataId
	this.OdataType = odataType
	this.OdataContext = odataContext
	return &this
}

// NewGetRedfishV1SFSSAppCDCInstanceManagersID200ResponseWithDefaults instantiates a new GetRedfishV1SFSSAppCDCInstanceManagersID200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRedfishV1SFSSAppCDCInstanceManagersID200ResponseWithDefaults() *GetRedfishV1SFSSAppCDCInstanceManagersID200Response {
	this := GetRedfishV1SFSSAppCDCInstanceManagersID200Response{}
	return &this
}

// GetCDCAdminState returns the CDCAdminState field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) GetCDCAdminState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CDCAdminState
}

// GetCDCAdminStateOk returns a tuple with the CDCAdminState field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) GetCDCAdminStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CDCAdminState, true
}

// SetCDCAdminState sets field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) SetCDCAdminState(v string) {
	o.CDCAdminState = v
}

// GetDiscoverySvcAdminState returns the DiscoverySvcAdminState field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) GetDiscoverySvcAdminState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DiscoverySvcAdminState
}

// GetDiscoverySvcAdminStateOk returns a tuple with the DiscoverySvcAdminState field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) GetDiscoverySvcAdminStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscoverySvcAdminState, true
}

// SetDiscoverySvcAdminState sets field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) SetDiscoverySvcAdminState(v string) {
	o.DiscoverySvcAdminState = v
}

// GetInstanceIdentifier returns the InstanceIdentifier field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) GetInstanceIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceIdentifier
}

// GetInstanceIdentifierOk returns a tuple with the InstanceIdentifier field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) GetInstanceIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceIdentifier, true
}

// SetInstanceIdentifier sets field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) SetInstanceIdentifier(v string) {
	o.InstanceIdentifier = v
}

// GetInterfaces returns the Interfaces field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) GetInterfaces() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) GetInterfacesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Interfaces, true
}

// SetInterfaces sets field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) SetInterfaces(v []string) {
	o.Interfaces = v
}

// GetIpAddresses returns the IpAddresses field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) GetIpAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) GetIpAddressesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpAddresses, true
}

// SetIpAddresses sets field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) SetIpAddresses(v []string) {
	o.IpAddresses = v
}

// GetOdataId returns the OdataId field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataType returns the OdataType field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) SetOdataType(v string) {
	o.OdataType = v
}

// GetOdataContext returns the OdataContext field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) SetOdataContext(v string) {
	o.OdataContext = v
}

func (o GetRedfishV1SFSSAppCDCInstanceManagersID200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRedfishV1SFSSAppCDCInstanceManagersID200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CDCAdminState"] = o.CDCAdminState
	toSerialize["DiscoverySvcAdminState"] = o.DiscoverySvcAdminState
	toSerialize["InstanceIdentifier"] = o.InstanceIdentifier
	toSerialize["Interfaces"] = o.Interfaces
	toSerialize["IpAddresses"] = o.IpAddresses
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.type"] = o.OdataType
	toSerialize["@odata.context"] = o.OdataContext
	return toSerialize, nil
}

func (o *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CDCAdminState",
		"DiscoverySvcAdminState",
		"InstanceIdentifier",
		"Interfaces",
		"IpAddresses",
		"@odata.id",
		"@odata.type",
		"@odata.context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRedfishV1SFSSAppCDCInstanceManagersID200Response := _GetRedfishV1SFSSAppCDCInstanceManagersID200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRedfishV1SFSSAppCDCInstanceManagersID200Response)

	if err != nil {
		return err
	}

	*o = GetRedfishV1SFSSAppCDCInstanceManagersID200Response(varGetRedfishV1SFSSAppCDCInstanceManagersID200Response)

	return err
}

type NullableGetRedfishV1SFSSAppCDCInstanceManagersID200Response struct {
	value *GetRedfishV1SFSSAppCDCInstanceManagersID200Response
	isSet bool
}

func (v NullableGetRedfishV1SFSSAppCDCInstanceManagersID200Response) Get() *GetRedfishV1SFSSAppCDCInstanceManagersID200Response {
	return v.value
}

func (v *NullableGetRedfishV1SFSSAppCDCInstanceManagersID200Response) Set(val *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRedfishV1SFSSAppCDCInstanceManagersID200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRedfishV1SFSSAppCDCInstanceManagersID200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRedfishV1SFSSAppCDCInstanceManagersID200Response(val *GetRedfishV1SFSSAppCDCInstanceManagersID200Response) *NullableGetRedfishV1SFSSAppCDCInstanceManagersID200Response {
	return &NullableGetRedfishV1SFSSAppCDCInstanceManagersID200Response{value: val, isSet: true}
}

func (v NullableGetRedfishV1SFSSAppCDCInstanceManagersID200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRedfishV1SFSSAppCDCInstanceManagersID200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


