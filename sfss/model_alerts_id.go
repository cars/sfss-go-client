/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfss

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AlertsID type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertsID{}

// AlertsID This model lists the alert information based on the specified alert ID.
type AlertsID struct {
	CdcInstances []interface{} `json:"CdcInstances"`
	Identifier string `json:"Identifier"`
	OdataContext string `json:"@odata.context"`
	OdataId string `json:"@odata.id"`
	Protocol string `json:"Protocol"`
	Context string `json:"Context"`
	EventTypes []interface{} `json:"EventTypes"`
	OdataType string `json:"@odata.type"`
	HttpHeaders []interface{} `json:"HttpHeaders"`
	Destination string `json:"Destination"`
}

type _AlertsID AlertsID

// NewAlertsID instantiates a new AlertsID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertsID(cdcInstances []interface{}, identifier string, odataContext string, odataId string, protocol string, context string, eventTypes []interface{}, odataType string, httpHeaders []interface{}, destination string) *AlertsID {
	this := AlertsID{}
	this.CdcInstances = cdcInstances
	this.Identifier = identifier
	this.OdataContext = odataContext
	this.OdataId = odataId
	this.Protocol = protocol
	this.Context = context
	this.EventTypes = eventTypes
	this.OdataType = odataType
	this.HttpHeaders = httpHeaders
	this.Destination = destination
	return &this
}

// NewAlertsIDWithDefaults instantiates a new AlertsID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertsIDWithDefaults() *AlertsID {
	this := AlertsID{}
	return &this
}

// GetCdcInstances returns the CdcInstances field value
func (o *AlertsID) GetCdcInstances() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.CdcInstances
}

// GetCdcInstancesOk returns a tuple with the CdcInstances field value
// and a boolean to check if the value has been set.
func (o *AlertsID) GetCdcInstancesOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.CdcInstances, true
}

// SetCdcInstances sets field value
func (o *AlertsID) SetCdcInstances(v []interface{}) {
	o.CdcInstances = v
}

// GetIdentifier returns the Identifier field value
func (o *AlertsID) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *AlertsID) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *AlertsID) SetIdentifier(v string) {
	o.Identifier = v
}

// GetOdataContext returns the OdataContext field value
func (o *AlertsID) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *AlertsID) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *AlertsID) SetOdataContext(v string) {
	o.OdataContext = v
}

// GetOdataId returns the OdataId field value
func (o *AlertsID) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *AlertsID) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *AlertsID) SetOdataId(v string) {
	o.OdataId = v
}

// GetProtocol returns the Protocol field value
func (o *AlertsID) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *AlertsID) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *AlertsID) SetProtocol(v string) {
	o.Protocol = v
}

// GetContext returns the Context field value
func (o *AlertsID) GetContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *AlertsID) GetContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *AlertsID) SetContext(v string) {
	o.Context = v
}

// GetEventTypes returns the EventTypes field value
func (o *AlertsID) GetEventTypes() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value
// and a boolean to check if the value has been set.
func (o *AlertsID) GetEventTypesOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTypes, true
}

// SetEventTypes sets field value
func (o *AlertsID) SetEventTypes(v []interface{}) {
	o.EventTypes = v
}

// GetOdataType returns the OdataType field value
func (o *AlertsID) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *AlertsID) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *AlertsID) SetOdataType(v string) {
	o.OdataType = v
}

// GetHttpHeaders returns the HttpHeaders field value
func (o *AlertsID) GetHttpHeaders() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.HttpHeaders
}

// GetHttpHeadersOk returns a tuple with the HttpHeaders field value
// and a boolean to check if the value has been set.
func (o *AlertsID) GetHttpHeadersOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.HttpHeaders, true
}

// SetHttpHeaders sets field value
func (o *AlertsID) SetHttpHeaders(v []interface{}) {
	o.HttpHeaders = v
}

// GetDestination returns the Destination field value
func (o *AlertsID) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *AlertsID) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *AlertsID) SetDestination(v string) {
	o.Destination = v
}

func (o AlertsID) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertsID) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CdcInstances"] = o.CdcInstances
	toSerialize["Identifier"] = o.Identifier
	toSerialize["@odata.context"] = o.OdataContext
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["Protocol"] = o.Protocol
	toSerialize["Context"] = o.Context
	toSerialize["EventTypes"] = o.EventTypes
	toSerialize["@odata.type"] = o.OdataType
	toSerialize["HttpHeaders"] = o.HttpHeaders
	toSerialize["Destination"] = o.Destination
	return toSerialize, nil
}

func (o *AlertsID) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CdcInstances",
		"Identifier",
		"@odata.context",
		"@odata.id",
		"Protocol",
		"Context",
		"EventTypes",
		"@odata.type",
		"HttpHeaders",
		"Destination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlertsID := _AlertsID{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAlertsID)

	if err != nil {
		return err
	}

	*o = AlertsID(varAlertsID)

	return err
}

type NullableAlertsID struct {
	value *AlertsID
	isSet bool
}

func (v NullableAlertsID) Get() *AlertsID {
	return v.value
}

func (v *NullableAlertsID) Set(val *AlertsID) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertsID) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertsID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertsID(val *AlertsID) *NullableAlertsID {
	return &NullableAlertsID{value: val, isSet: true}
}

func (v NullableAlertsID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertsID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


