/*
RestServices

REST APIs used for managing CDC instances are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssrest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response{}

// GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response 
type GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response struct {
	// The port that CDC listens on for mDNS queries
	DiscoveryControllerPort float32 `json:"DiscoveryControllerPort"`
	// CDC instance identifier 
	InstanceId string `json:"InstanceId"`
	// NVMe Qualified Name (NQN) of the CDC instance
	NQN string `json:"NQN"`
	UpTime string `json:"UpTime"`
	Version string `json:"Version"`
	OdataId string `json:"@odata.id"`
	OdataType string `json:"@odata.type"`
	OdataContext string `json:"@odata.context"`
}

type _GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response

// NewGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response instantiates a new GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response(discoveryControllerPort float32, instanceId string, nQN string, upTime string, version string, odataId string, odataType string, odataContext string) *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response {
	this := GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response{}
	this.DiscoveryControllerPort = discoveryControllerPort
	this.InstanceId = instanceId
	this.NQN = nQN
	this.UpTime = upTime
	this.Version = version
	this.OdataId = odataId
	this.OdataType = odataType
	this.OdataContext = odataContext
	return &this
}

// NewGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200ResponseWithDefaults instantiates a new GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200ResponseWithDefaults() *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response {
	this := GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response{}
	return &this
}

// GetDiscoveryControllerPort returns the DiscoveryControllerPort field value
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) GetDiscoveryControllerPort() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DiscoveryControllerPort
}

// GetDiscoveryControllerPortOk returns a tuple with the DiscoveryControllerPort field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) GetDiscoveryControllerPortOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscoveryControllerPort, true
}

// SetDiscoveryControllerPort sets field value
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) SetDiscoveryControllerPort(v float32) {
	o.DiscoveryControllerPort = v
}

// GetInstanceId returns the InstanceId field value
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) GetInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) GetInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceId, true
}

// SetInstanceId sets field value
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) SetInstanceId(v string) {
	o.InstanceId = v
}

// GetNQN returns the NQN field value
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) GetNQN() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NQN
}

// GetNQNOk returns a tuple with the NQN field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) GetNQNOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NQN, true
}

// SetNQN sets field value
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) SetNQN(v string) {
	o.NQN = v
}

// GetUpTime returns the UpTime field value
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) GetUpTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpTime
}

// GetUpTimeOk returns a tuple with the UpTime field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) GetUpTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpTime, true
}

// SetUpTime sets field value
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) SetUpTime(v string) {
	o.UpTime = v
}

// GetVersion returns the Version field value
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) SetVersion(v string) {
	o.Version = v
}

// GetOdataId returns the OdataId field value
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataType returns the OdataType field value
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) SetOdataType(v string) {
	o.OdataType = v
}

// GetOdataContext returns the OdataContext field value
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) SetOdataContext(v string) {
	o.OdataContext = v
}

func (o GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["DiscoveryControllerPort"] = o.DiscoveryControllerPort
	toSerialize["InstanceId"] = o.InstanceId
	toSerialize["NQN"] = o.NQN
	toSerialize["UpTime"] = o.UpTime
	toSerialize["Version"] = o.Version
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.type"] = o.OdataType
	toSerialize["@odata.context"] = o.OdataContext
	return toSerialize, nil
}

func (o *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"DiscoveryControllerPort",
		"InstanceId",
		"NQN",
		"UpTime",
		"Version",
		"@odata.id",
		"@odata.type",
		"@odata.context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response := _GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response)

	if err != nil {
		return err
	}

	*o = GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response(varGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response)

	return err
}

type NullableGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response struct {
	value *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response
	isSet bool
}

func (v NullableGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) Get() *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response {
	return v.value
}

func (v *NullableGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) Set(val *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response(val *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) *NullableGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response {
	return &NullableGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response{value: val, isSet: true}
}

func (v NullableGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


