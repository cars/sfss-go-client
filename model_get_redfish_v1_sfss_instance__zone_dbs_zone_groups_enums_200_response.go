/*
RestServices

REST APIs used for managing CDC instances are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssrest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response{}

// GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response 
type GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response struct {
	// Zone group activation status; possible values include Activate and DeActivate 
	ActivateStatus []string `json:"ActivateStatus"`
	// Current status of the zone group; possible values include NotActive, Active, ReActivationNeeded,     ActivationInprogress, and DeActivationInprogress
	ActivationState []string `json:"ActivationState"`
	// Zone group type
	Type []string `json:"Type"`
}

type _GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response

// NewGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response instantiates a new GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response(activateStatus []string, activationState []string, type_ []string) *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response {
	this := GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response{}
	this.ActivateStatus = activateStatus
	this.ActivationState = activationState
	this.Type = type_
	return &this
}

// NewGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200ResponseWithDefaults instantiates a new GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200ResponseWithDefaults() *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response {
	this := GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response{}
	return &this
}

// GetActivateStatus returns the ActivateStatus field value
func (o *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) GetActivateStatus() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ActivateStatus
}

// GetActivateStatusOk returns a tuple with the ActivateStatus field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) GetActivateStatusOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivateStatus, true
}

// SetActivateStatus sets field value
func (o *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) SetActivateStatus(v []string) {
	o.ActivateStatus = v
}

// GetActivationState returns the ActivationState field value
func (o *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) GetActivationState() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ActivationState
}

// GetActivationStateOk returns a tuple with the ActivationState field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) GetActivationStateOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivationState, true
}

// SetActivationState sets field value
func (o *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) SetActivationState(v []string) {
	o.ActivationState = v
}

// GetType returns the Type field value
func (o *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) GetType() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) GetTypeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) SetType(v []string) {
	o.Type = v
}

func (o GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ActivateStatus"] = o.ActivateStatus
	toSerialize["ActivationState"] = o.ActivationState
	toSerialize["Type"] = o.Type
	return toSerialize, nil
}

func (o *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ActivateStatus",
		"ActivationState",
		"Type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response := _GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response)

	if err != nil {
		return err
	}

	*o = GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response(varGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response)

	return err
}

type NullableGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response struct {
	value *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response
	isSet bool
}

func (v NullableGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) Get() *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response {
	return v.value
}

func (v *NullableGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) Set(val *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response(val *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) *NullableGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response {
	return &NullableGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response{value: val, isSet: true}
}

func (v NullableGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


