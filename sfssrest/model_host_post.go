/*
RestServices

REST APIs used for managing CDC instances are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssrest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HostPOST type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostPOST{}

// HostPOST This model configures a host.
type HostPOST struct {
	NQN string `json:"NQN"`
	TransportAddress string `json:"TransportAddress"`
	TransportAddressFamily string `json:"TransportAddressFamily"`
	TransportType string `json:"TransportType"`
}

type _HostPOST HostPOST

// NewHostPOST instantiates a new HostPOST object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostPOST(nQN string, transportAddress string, transportAddressFamily string, transportType string) *HostPOST {
	this := HostPOST{}
	this.NQN = nQN
	this.TransportAddress = transportAddress
	this.TransportAddressFamily = transportAddressFamily
	this.TransportType = transportType
	return &this
}

// NewHostPOSTWithDefaults instantiates a new HostPOST object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostPOSTWithDefaults() *HostPOST {
	this := HostPOST{}
	return &this
}

// GetNQN returns the NQN field value
func (o *HostPOST) GetNQN() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NQN
}

// GetNQNOk returns a tuple with the NQN field value
// and a boolean to check if the value has been set.
func (o *HostPOST) GetNQNOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NQN, true
}

// SetNQN sets field value
func (o *HostPOST) SetNQN(v string) {
	o.NQN = v
}

// GetTransportAddress returns the TransportAddress field value
func (o *HostPOST) GetTransportAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransportAddress
}

// GetTransportAddressOk returns a tuple with the TransportAddress field value
// and a boolean to check if the value has been set.
func (o *HostPOST) GetTransportAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransportAddress, true
}

// SetTransportAddress sets field value
func (o *HostPOST) SetTransportAddress(v string) {
	o.TransportAddress = v
}

// GetTransportAddressFamily returns the TransportAddressFamily field value
func (o *HostPOST) GetTransportAddressFamily() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransportAddressFamily
}

// GetTransportAddressFamilyOk returns a tuple with the TransportAddressFamily field value
// and a boolean to check if the value has been set.
func (o *HostPOST) GetTransportAddressFamilyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransportAddressFamily, true
}

// SetTransportAddressFamily sets field value
func (o *HostPOST) SetTransportAddressFamily(v string) {
	o.TransportAddressFamily = v
}

// GetTransportType returns the TransportType field value
func (o *HostPOST) GetTransportType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransportType
}

// GetTransportTypeOk returns a tuple with the TransportType field value
// and a boolean to check if the value has been set.
func (o *HostPOST) GetTransportTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransportType, true
}

// SetTransportType sets field value
func (o *HostPOST) SetTransportType(v string) {
	o.TransportType = v
}

func (o HostPOST) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostPOST) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["NQN"] = o.NQN
	toSerialize["TransportAddress"] = o.TransportAddress
	toSerialize["TransportAddressFamily"] = o.TransportAddressFamily
	toSerialize["TransportType"] = o.TransportType
	return toSerialize, nil
}

func (o *HostPOST) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"NQN",
		"TransportAddress",
		"TransportAddressFamily",
		"TransportType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHostPOST := _HostPOST{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHostPOST)

	if err != nil {
		return err
	}

	*o = HostPOST(varHostPOST)

	return err
}

type NullableHostPOST struct {
	value *HostPOST
	isSet bool
}

func (v NullableHostPOST) Get() *HostPOST {
	return v.value
}

func (v *NullableHostPOST) Set(val *HostPOST) {
	v.value = val
	v.isSet = true
}

func (v NullableHostPOST) IsSet() bool {
	return v.isSet
}

func (v *NullableHostPOST) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostPOST(val *HostPOST) *NullableHostPOST {
	return &NullableHostPOST{value: val, isSet: true}
}

func (v NullableHostPOST) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostPOST) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


