/*
RestServices

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sfssrest

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_sfssrest_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService DeleteRedfishV1SFSSInstanceHostsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var id int32

		httpRes, err := apiClient.DefaultAPI.DeleteRedfishV1SFSSInstanceHostsId(context.Background(), instanceID, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteRedfishV1SFSSInstanceIDDDCs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.DeleteRedfishV1SFSSInstanceIDDDCs(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteRedfishV1SFSSInstanceIDDDCsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var id2 int32

		resp, httpRes, err := apiClient.DefaultAPI.DeleteRedfishV1SFSSInstanceIDDDCsId(context.Background(), instanceID, id2).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteRedfishV1SFSSInstanceSubsystemsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var id int32

		httpRes, err := apiClient.DefaultAPI.DeleteRedfishV1SFSSInstanceSubsystemsId(context.Background(), instanceID, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteRedfishV1SFSSInstanceZoneDBsConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.DeleteRedfishV1SFSSInstanceZoneDBsConfig(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAlias", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var zoneAliasId string
		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAlias(context.Background(), zoneAliasId, instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var zoneAliasId string
		var zoneAliasMemberId string

		resp, httpRes, err := apiClient.DefaultAPI.DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembers(context.Background(), instanceID, zoneAliasId, zoneAliasMemberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var iD string

		resp, httpRes, err := apiClient.DefaultAPI.DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroups(context.Background(), instanceID, iD).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var zoneGroupId string
		var zoneID string
		var zoneMemberID2 string

		resp, httpRes, err := apiClient.DefaultAPI.DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers(context.Background(), instanceID, zoneGroupId, zoneID, zoneMemberID2).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZones", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var zoneGrpID string
		var zoneID2 string

		resp, httpRes, err := apiClient.DefaultAPI.DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZones(context.Background(), instanceID, zoneGrpID, zoneID2).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetHttpsIPRedfishV1SFSSInstanceDDCs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetHttpsIPRedfishV1SFSSInstanceDDCs(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetHttpsIPRedfishV1SFSSInstanceHostsEnums", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetHttpsIPRedfishV1SFSSInstanceHostsEnums(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetHttpsIPRedfishV1SFSSInstanceHostsexpandHosts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetHttpsIPRedfishV1SFSSInstanceHostsexpandHosts(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMemberssourceconfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var zoneGroupId string
		var zoneID string
		var zoneMemberID string

		resp, httpRes, err := apiClient.DefaultAPI.GetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMemberssourceconfig(context.Background(), instanceID, zoneGroupId, zoneID, zoneMemberID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceCDCInstancesourceconfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceCDCInstancesourceconfig(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceDDCsEnums", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceDDCsEnums(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceDDCsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var id int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceDDCsId(context.Background(), instanceID, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceGlobalPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceGlobalPolicies(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceGlobalPoliciesEnums", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceGlobalPoliciesEnums(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceHosts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceHosts(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceHostsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var id int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceHostsId(context.Background(), instanceID, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceSubsystems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceSubsystems(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceSubsystemsEnums", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceSubsystemsEnums(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceSubsystemsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var id int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceSubsystemsId(context.Background(), instanceID, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceSubsystemsexpandSubsystems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceSubsystemsexpandSubsystems(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceZoneDBs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceZoneDBs(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceZoneDBsActive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceZoneDBsActive(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestsourceconfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestsourceconfig(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostsourceconfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var zoneAliasId string
		var zoneAliasMemberId string

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostsourceconfig(context.Background(), instanceID, zoneAliasId, zoneAliasMemberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var zoneAliasId string

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfig(context.Background(), instanceID, zoneAliasId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigexpandZoneAliasMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var config string
		var zonealiasmem string
		var instanceID int32
		var zoneAliasId string
		var zoneAliasMemberId string

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigexpandZoneAliasMembers(context.Background(), config, zonealiasmem, instanceID, zoneAliasId, zoneAliasMemberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAlias", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAlias(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8sourceconfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var expand string
		var instanceID int32
		var zoneGroupID string

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8sourceconfig(context.Background(), expand, instanceID, zoneGroupID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8Zonessourceconfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var zoneGrpID string
		var zoneID string

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8Zonessourceconfig(context.Background(), instanceID, zoneGrpID, zoneID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var zoneGroupId string
		var zoneID string
		var zoneMemberID string

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfig(context.Background(), instanceID, zoneGroupId, zoneID, zoneMemberID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigexpandZoneMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var config string
		var zonemem string
		var instanceID int32
		var zoneGroupId string
		var zoneID string

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigexpandZoneMembers(context.Background(), config, zonemem, instanceID, zoneGroupId, zoneID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupssourceconfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var iD string

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupssourceconfig(context.Background(), instanceID, iD).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceZoneDBsConfigsourceconfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceZoneDBsConfigsourceconfig(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnums", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnums(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnums", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.GetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnums(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PostRedfishV1SFSSInstanceDDCs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.PostRedfishV1SFSSInstanceDDCs(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PostRedfishV1SFSSInstanceGlobalPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		httpRes, err := apiClient.DefaultAPI.PostRedfishV1SFSSInstanceGlobalPolicies(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PostRedfishV1SFSSInstanceHosts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.PostRedfishV1SFSSInstanceHosts(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PostRedfishV1SFSSInstanceSubsystems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.PostRedfishV1SFSSInstanceSubsystems(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var zoneAliasId string

		resp, httpRes, err := apiClient.DefaultAPI.PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfig(context.Background(), instanceID, zoneAliasId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAlias", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAlias(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var iD string

		resp, httpRes, err := apiClient.DefaultAPI.PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroups(context.Background(), instanceID, iD).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var zoneGroupId string
		var zoneID string
		var zoneMemberID string

		resp, httpRes, err := apiClient.DefaultAPI.PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers(context.Background(), instanceID, zoneGroupId, zoneID, zoneMemberID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonessourceconfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var zoneGrpID string
		var zoneID string

		resp, httpRes, err := apiClient.DefaultAPI.PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonessourceconfig(context.Background(), instanceID, zoneGrpID, zoneID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PutRedfishV1SFSSInstanceIDDDCs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32

		resp, httpRes, err := apiClient.DefaultAPI.PutRedfishV1SFSSInstanceIDDDCs(context.Background(), instanceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PutRedfishV1SFSSInstanceIDDDCsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var id2 int32

		resp, httpRes, err := apiClient.DefaultAPI.PutRedfishV1SFSSInstanceIDDDCsId(context.Background(), instanceID, id2).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var zoneAliasId string
		var zoneAliasMemberId string

		resp, httpRes, err := apiClient.DefaultAPI.PutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfig(context.Background(), instanceID, zoneAliasId, zoneAliasMemberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var iD2 string

		resp, httpRes, err := apiClient.DefaultAPI.PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroups(context.Background(), instanceID, iD2).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceID int32
		var zoneGroupId string
		var zoneID string
		var zoneMemberID2 string

		httpRes, err := apiClient.DefaultAPI.PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers(context.Background(), instanceID, zoneGroupId, zoneID, zoneMemberID2).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
