/*
RestServices

REST APIs used for managing CDC instances are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssrest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetRedfishV1SFSSInstanceDDCsId200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRedfishV1SFSSInstanceDDCsId200Response{}

// GetRedfishV1SFSSInstanceDDCsId200Response 
type GetRedfishV1SFSSInstanceDDCsId200Response struct {
	// Unique Identity of the Entity - Fully Qualified Name (FQN) of the Direct Discovery Controller(DDC)
	Id string `json:"Id"`
	// IP address of the DDC
	TransportAddress string `json:"TransportAddress"`
	// IP address family; possible values include IPv4 and IPv6
	TransportAddressFamily string `json:"TransportAddressFamily"`
	// Port on which the DDC listens for CDC to connect to
	PortId float32 `json:"PortId"`
	// Supported transport types that can be used for communication with the DDC; possible value is TCP and RoCE
	TransportType string `json:"TransportType"`
	// Activation of DDC that initiates a pull registration from CDC
	Activate bool `json:"Activate"`
	// Configuration Type of DDC; possible values are Manual and KickStart
	ConfigType string `json:"ConfigType"`
	// Status of the TCP connection between the DDC and the CDC instance. Possible values include Online/In-Progess:Connecting/Offline
	ConnectionStatus string `json:"ConnectionStatus"`
	// Reason for the DDC being offline
	FailureReason string `json:"FailureReason"`
	OdataId string `json:"@odata.id"`
	OdataType string `json:"@odata.type"`
	OdataContext string `json:"@odata.context"`
}

type _GetRedfishV1SFSSInstanceDDCsId200Response GetRedfishV1SFSSInstanceDDCsId200Response

// NewGetRedfishV1SFSSInstanceDDCsId200Response instantiates a new GetRedfishV1SFSSInstanceDDCsId200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRedfishV1SFSSInstanceDDCsId200Response(id string, transportAddress string, transportAddressFamily string, portId float32, transportType string, activate bool, configType string, connectionStatus string, failureReason string, odataId string, odataType string, odataContext string) *GetRedfishV1SFSSInstanceDDCsId200Response {
	this := GetRedfishV1SFSSInstanceDDCsId200Response{}
	this.Id = id
	this.TransportAddress = transportAddress
	this.TransportAddressFamily = transportAddressFamily
	this.PortId = portId
	this.TransportType = transportType
	this.Activate = activate
	this.ConfigType = configType
	this.ConnectionStatus = connectionStatus
	this.FailureReason = failureReason
	this.OdataId = odataId
	this.OdataType = odataType
	this.OdataContext = odataContext
	return &this
}

// NewGetRedfishV1SFSSInstanceDDCsId200ResponseWithDefaults instantiates a new GetRedfishV1SFSSInstanceDDCsId200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRedfishV1SFSSInstanceDDCsId200ResponseWithDefaults() *GetRedfishV1SFSSInstanceDDCsId200Response {
	this := GetRedfishV1SFSSInstanceDDCsId200Response{}
	return &this
}

// GetId returns the Id field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) SetId(v string) {
	o.Id = v
}

// GetTransportAddress returns the TransportAddress field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetTransportAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransportAddress
}

// GetTransportAddressOk returns a tuple with the TransportAddress field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetTransportAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransportAddress, true
}

// SetTransportAddress sets field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) SetTransportAddress(v string) {
	o.TransportAddress = v
}

// GetTransportAddressFamily returns the TransportAddressFamily field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetTransportAddressFamily() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransportAddressFamily
}

// GetTransportAddressFamilyOk returns a tuple with the TransportAddressFamily field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetTransportAddressFamilyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransportAddressFamily, true
}

// SetTransportAddressFamily sets field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) SetTransportAddressFamily(v string) {
	o.TransportAddressFamily = v
}

// GetPortId returns the PortId field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetPortId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PortId
}

// GetPortIdOk returns a tuple with the PortId field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetPortIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PortId, true
}

// SetPortId sets field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) SetPortId(v float32) {
	o.PortId = v
}

// GetTransportType returns the TransportType field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetTransportType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransportType
}

// GetTransportTypeOk returns a tuple with the TransportType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetTransportTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransportType, true
}

// SetTransportType sets field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) SetTransportType(v string) {
	o.TransportType = v
}

// GetActivate returns the Activate field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetActivate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Activate
}

// GetActivateOk returns a tuple with the Activate field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetActivateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Activate, true
}

// SetActivate sets field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) SetActivate(v bool) {
	o.Activate = v
}

// GetConfigType returns the ConfigType field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetConfigType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigType
}

// GetConfigTypeOk returns a tuple with the ConfigType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetConfigTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfigType, true
}

// SetConfigType sets field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) SetConfigType(v string) {
	o.ConfigType = v
}

// GetConnectionStatus returns the ConnectionStatus field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetConnectionStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetConnectionStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionStatus, true
}

// SetConnectionStatus sets field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) SetConnectionStatus(v string) {
	o.ConnectionStatus = v
}

// GetFailureReason returns the FailureReason field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetFailureReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FailureReason
}

// GetFailureReasonOk returns a tuple with the FailureReason field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetFailureReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailureReason, true
}

// SetFailureReason sets field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) SetFailureReason(v string) {
	o.FailureReason = v
}

// GetOdataId returns the OdataId field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataType returns the OdataType field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) SetOdataType(v string) {
	o.OdataType = v
}

// GetOdataContext returns the OdataContext field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *GetRedfishV1SFSSInstanceDDCsId200Response) SetOdataContext(v string) {
	o.OdataContext = v
}

func (o GetRedfishV1SFSSInstanceDDCsId200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRedfishV1SFSSInstanceDDCsId200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Id"] = o.Id
	toSerialize["TransportAddress"] = o.TransportAddress
	toSerialize["TransportAddressFamily"] = o.TransportAddressFamily
	toSerialize["PortId"] = o.PortId
	toSerialize["TransportType"] = o.TransportType
	toSerialize["Activate"] = o.Activate
	toSerialize["ConfigType"] = o.ConfigType
	toSerialize["ConnectionStatus"] = o.ConnectionStatus
	toSerialize["FailureReason"] = o.FailureReason
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.type"] = o.OdataType
	toSerialize["@odata.context"] = o.OdataContext
	return toSerialize, nil
}

func (o *GetRedfishV1SFSSInstanceDDCsId200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Id",
		"TransportAddress",
		"TransportAddressFamily",
		"PortId",
		"TransportType",
		"Activate",
		"ConfigType",
		"ConnectionStatus",
		"FailureReason",
		"@odata.id",
		"@odata.type",
		"@odata.context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRedfishV1SFSSInstanceDDCsId200Response := _GetRedfishV1SFSSInstanceDDCsId200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRedfishV1SFSSInstanceDDCsId200Response)

	if err != nil {
		return err
	}

	*o = GetRedfishV1SFSSInstanceDDCsId200Response(varGetRedfishV1SFSSInstanceDDCsId200Response)

	return err
}

type NullableGetRedfishV1SFSSInstanceDDCsId200Response struct {
	value *GetRedfishV1SFSSInstanceDDCsId200Response
	isSet bool
}

func (v NullableGetRedfishV1SFSSInstanceDDCsId200Response) Get() *GetRedfishV1SFSSInstanceDDCsId200Response {
	return v.value
}

func (v *NullableGetRedfishV1SFSSInstanceDDCsId200Response) Set(val *GetRedfishV1SFSSInstanceDDCsId200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRedfishV1SFSSInstanceDDCsId200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRedfishV1SFSSInstanceDDCsId200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRedfishV1SFSSInstanceDDCsId200Response(val *GetRedfishV1SFSSInstanceDDCsId200Response) *NullableGetRedfishV1SFSSInstanceDDCsId200Response {
	return &NullableGetRedfishV1SFSSInstanceDDCsId200Response{value: val, isSet: true}
}

func (v NullableGetRedfishV1SFSSInstanceDDCsId200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRedfishV1SFSSInstanceDDCsId200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


