/*
RestServices

REST APIs used for managing CDC instances are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssrest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type ApiDeleteRedfishV1SFSSInstanceHostsIdRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	id int32
}

func (r ApiDeleteRedfishV1SFSSInstanceHostsIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRedfishV1SFSSInstanceHostsIdExecute(r)
}

/*
DeleteRedfishV1SFSSInstanceHostsId Delete host

This API removes a host from a CDC instance based on the specified CDC instance and host identifiers. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param id
 @return ApiDeleteRedfishV1SFSSInstanceHostsIdRequest
*/
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceHostsId(ctx context.Context, instanceID int32, id int32) ApiDeleteRedfishV1SFSSInstanceHostsIdRequest {
	return ApiDeleteRedfishV1SFSSInstanceHostsIdRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		id: id,
	}
}

// Execute executes the request
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceHostsIdExecute(r ApiDeleteRedfishV1SFSSInstanceHostsIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.DeleteRedfishV1SFSSInstanceHostsId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/Hosts({Id})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return nil, reportError("instanceID must be less than 32")
	}
	if r.id < 1 {
		return nil, reportError("id must be greater than 1")
	}
	if r.id > 32 {
		return nil, reportError("id must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteRedfishV1SFSSInstanceIDDDCsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
}

func (r ApiDeleteRedfishV1SFSSInstanceIDDDCsRequest) Execute() (*DeleteRedfishV1SFSSInstanceIDDDCs200Response, *http.Response, error) {
	return r.ApiService.DeleteRedfishV1SFSSInstanceIDDDCsExecute(r)
}

/*
DeleteRedfishV1SFSSInstanceIDDDCs Delete DDCs

This API removes the specified DDCs from the CDC instance mentioned in this request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiDeleteRedfishV1SFSSInstanceIDDDCsRequest
*/
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceIDDDCs(ctx context.Context, instanceID int32) ApiDeleteRedfishV1SFSSInstanceIDDDCsRequest {
	return ApiDeleteRedfishV1SFSSInstanceIDDDCsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return DeleteRedfishV1SFSSInstanceIDDDCs200Response
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceIDDDCsExecute(r ApiDeleteRedfishV1SFSSInstanceIDDDCsRequest) (*DeleteRedfishV1SFSSInstanceIDDDCs200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteRedfishV1SFSSInstanceIDDDCs200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.DeleteRedfishV1SFSSInstanceIDDDCs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/DDCs"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRedfishV1SFSSInstanceIDDDCsIdRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	id2 int32
	id *string
}

// The IP address of the specific DDC to be removed must be given.
func (r ApiDeleteRedfishV1SFSSInstanceIDDDCsIdRequest) Id(id string) ApiDeleteRedfishV1SFSSInstanceIDDDCsIdRequest {
	r.id = &id
	return r
}

func (r ApiDeleteRedfishV1SFSSInstanceIDDDCsIdRequest) Execute() (*PutRedfishV1SFSSInstanceIDDDCsId200Response, *http.Response, error) {
	return r.ApiService.DeleteRedfishV1SFSSInstanceIDDDCsIdExecute(r)
}

/*
DeleteRedfishV1SFSSInstanceIDDDCsId Delete DDC

This API removes the specified DDC from the CDC instance mentioned in this request. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param id2
 @return ApiDeleteRedfishV1SFSSInstanceIDDDCsIdRequest
*/
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceIDDDCsId(ctx context.Context, instanceID int32, id2 int32) ApiDeleteRedfishV1SFSSInstanceIDDDCsIdRequest {
	return ApiDeleteRedfishV1SFSSInstanceIDDDCsIdRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		id2: id2,
	}
}

// Execute executes the request
//  @return PutRedfishV1SFSSInstanceIDDDCsId200Response
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceIDDDCsIdExecute(r ApiDeleteRedfishV1SFSSInstanceIDDDCsIdRequest) (*PutRedfishV1SFSSInstanceIDDDCsId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PutRedfishV1SFSSInstanceIDDDCsId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.DeleteRedfishV1SFSSInstanceIDDDCsId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/DDCs({Id})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id2, "id2")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Id", r.id, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRedfishV1SFSSInstanceSubsystemsIdRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	id int32
}

func (r ApiDeleteRedfishV1SFSSInstanceSubsystemsIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRedfishV1SFSSInstanceSubsystemsIdExecute(r)
}

/*
DeleteRedfishV1SFSSInstanceSubsystemsId Delete subsystem

This API removes a subsystem from a CDC instance based on the specified CDC instance and subsystem identifiers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param id
 @return ApiDeleteRedfishV1SFSSInstanceSubsystemsIdRequest
*/
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceSubsystemsId(ctx context.Context, instanceID int32, id int32) ApiDeleteRedfishV1SFSSInstanceSubsystemsIdRequest {
	return ApiDeleteRedfishV1SFSSInstanceSubsystemsIdRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		id: id,
	}
}

// Execute executes the request
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceSubsystemsIdExecute(r ApiDeleteRedfishV1SFSSInstanceSubsystemsIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.DeleteRedfishV1SFSSInstanceSubsystemsId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/Subsystems({Id})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return nil, reportError("instanceID must be less than 32")
	}
	if r.id < 1 {
		return nil, reportError("id must be greater than 1")
	}
	if r.id > 32 {
		return nil, reportError("id must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
}

func (r ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigRequest) Execute() (*DeleteRedfishV1SFSSInstanceZoneDBsConfig200Response, *http.Response, error) {
	return r.ApiService.DeleteRedfishV1SFSSInstanceZoneDBsConfigExecute(r)
}

/*
DeleteRedfishV1SFSSInstanceZoneDBsConfig Delete zoning configuration

This API removes all the zoning configuration from the specified CDC instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigRequest
*/
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceZoneDBsConfig(ctx context.Context, instanceID int32) ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigRequest {
	return ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return DeleteRedfishV1SFSSInstanceZoneDBsConfig200Response
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceZoneDBsConfigExecute(r ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigRequest) (*DeleteRedfishV1SFSSInstanceZoneDBsConfig200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteRedfishV1SFSSInstanceZoneDBsConfig200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.DeleteRedfishV1SFSSInstanceZoneDBsConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	zoneAliasId string
	instanceID int32
}

func (r ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasRequest) Execute() (*DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAlias200Response, *http.Response, error) {
	return r.ApiService.DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasExecute(r)
}

/*
DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAlias Delete a zone alias

This API removes a zone alias from the specified CDC instance based on the zone alias identifier.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param zoneAliasId
 @param instanceID
 @return ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasRequest
*/
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAlias(ctx context.Context, zoneAliasId string, instanceID int32) ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasRequest {
	return ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasRequest{
		ApiService: a,
		ctx: ctx,
		zoneAliasId: zoneAliasId,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAlias200Response
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasExecute(r ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasRequest) (*DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAlias200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAlias200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAlias")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneAlias({ZoneAliasId})"
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneAliasId"+"}", url.PathEscape(parameterValueToString(r.zoneAliasId, "zoneAliasId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.zoneAliasId) < 1 {
		return localVarReturnValue, nil, reportError("zoneAliasId must have at least 1 elements")
	}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	zoneAliasId string
	zoneAliasMemberId string
}

func (r ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersRequest) Execute() (*PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfig200Response, *http.Response, error) {
	return r.ApiService.DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersExecute(r)
}

/*
DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembers Delete zone alias member

This API removes a zone alias member from the specified CDC instance based on the zone alias member identifier.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param zoneAliasId
 @param zoneAliasMemberId
 @return ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersRequest
*/
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembers(ctx context.Context, instanceID int32, zoneAliasId string, zoneAliasMemberId string) ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersRequest {
	return ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		zoneAliasId: zoneAliasId,
		zoneAliasMemberId: zoneAliasMemberId,
	}
}

// Execute executes the request
//  @return PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfig200Response
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersExecute(r ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersRequest) (*PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfig200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfig200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneAlias({ZoneAliasId})/ZoneAliasMembers({ZoneAliasMemberId})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneAliasId"+"}", url.PathEscape(parameterValueToString(r.zoneAliasId, "zoneAliasId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneAliasMemberId"+"}", url.PathEscape(parameterValueToString(r.zoneAliasMemberId, "zoneAliasMemberId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.zoneAliasId) < 1 {
		return localVarReturnValue, nil, reportError("zoneAliasId must have at least 1 elements")
	}
	if strlen(r.zoneAliasMemberId) < 1 {
		return localVarReturnValue, nil, reportError("zoneAliasMemberId must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	iD string
	zoneGroupID *string
}

// The Zone Group ID to be deleted should be passed to this API.
func (r ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest) ZoneGroupID(zoneGroupID string) ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest {
	r.zoneGroupID = &zoneGroupID
	return r
}

func (r ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest) Execute() (*PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroups200Response, *http.Response, error) {
	return r.ApiService.DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsExecute(r)
}

/*
DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroups Delete zone group

This API removes a zone group from a CDC instance based on the specified CDC instance and zone group identifiers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param iD
 @return ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest
*/
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroups(ctx context.Context, instanceID int32, iD string) ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest {
	return ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		iD: iD,
	}
}

// Execute executes the request
//  @return PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroups200Response
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsExecute(r ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest) (*PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroups200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroups200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneGroups({ID})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ID"+"}", url.PathEscape(parameterValueToString(r.iD, "iD")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.iD) < 1 {
		return localVarReturnValue, nil, reportError("iD must have at least 1 elements")
	}

	if r.zoneGroupID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "('ZoneGroupID')", r.zoneGroupID, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	zoneGroupId string
	zoneID string
	zoneMemberID2 string
	zoneMemberID *string
}

// The ZoneMember ID to be deleted.
func (r ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest) ZoneMemberID(zoneMemberID string) ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest {
	r.zoneMemberID = &zoneMemberID
	return r
}

func (r ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest) Execute() (*DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers200Response, *http.Response, error) {
	return r.ApiService.DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersExecute(r)
}

/*
DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers Delete a zone member

This API removes a zone member from the specified CDC instance, zone group, and zone based on the zone member identifier.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param zoneGroupId
 @param zoneID
 @param zoneMemberID2
 @return ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest
*/
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers(ctx context.Context, instanceID int32, zoneGroupId string, zoneID string, zoneMemberID2 string) ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest {
	return ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		zoneGroupId: zoneGroupId,
		zoneID: zoneID,
		zoneMemberID2: zoneMemberID2,
	}
}

// Execute executes the request
//  @return DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers200Response
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersExecute(r ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest) (*DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneGroups({ZoneGroupId})/Zones({ZoneID})/ZoneMembers({ZoneMemberID})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneGroupId"+"}", url.PathEscape(parameterValueToString(r.zoneGroupId, "zoneGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneID"+"}", url.PathEscape(parameterValueToString(r.zoneID, "zoneID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneMemberID"+"}", url.PathEscape(parameterValueToString(r.zoneMemberID2, "zoneMemberID2")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.zoneGroupId) < 1 {
		return localVarReturnValue, nil, reportError("zoneGroupId must have at least 1 elements")
	}
	if strlen(r.zoneID) < 1 {
		return localVarReturnValue, nil, reportError("zoneID must have at least 1 elements")
	}
	if strlen(r.zoneMemberID2) < 1 {
		return localVarReturnValue, nil, reportError("zoneMemberID2 must have at least 1 elements")
	}

	if r.zoneMemberID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "('ZoneMemberID')", r.zoneMemberID, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	zoneGrpID string
	zoneID2 string
	zoneID *string
}

// The Zone ID to be deleted should be passed.
func (r ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesRequest) ZoneID(zoneID string) ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesRequest {
	r.zoneID = &zoneID
	return r
}

func (r ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesRequest) Execute() (*DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZones200Response, *http.Response, error) {
	return r.ApiService.DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesExecute(r)
}

/*
DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZones Delete zone

This API removes a zone from the specified CDC instance and zone group based on the zone identifier.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param zoneGrpID
 @param zoneID2
 @return ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesRequest
*/
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZones(ctx context.Context, instanceID int32, zoneGrpID string, zoneID2 string) ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesRequest {
	return ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		zoneGrpID: zoneGrpID,
		zoneID2: zoneID2,
	}
}

// Execute executes the request
//  @return DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZones200Response
func (a *DefaultAPIService) DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesExecute(r ApiDeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesRequest) (*DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZones200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZones200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.DeleteRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZones")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneGroups({ZoneGrpID})/Zones({ZoneID})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneGrpID"+"}", url.PathEscape(parameterValueToString(r.zoneGrpID, "zoneGrpID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneID"+"}", url.PathEscape(parameterValueToString(r.zoneID2, "zoneID2")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.zoneGrpID) < 1 {
		return localVarReturnValue, nil, reportError("zoneGrpID must have at least 1 elements")
	}
	if strlen(r.zoneID2) < 1 {
		return localVarReturnValue, nil, reportError("zoneID2 must have at least 1 elements")
	}

	if r.zoneID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "('ZoneID')", r.zoneID, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHttpsIPRedfishV1SFSSInstanceDDCsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
}

func (r ApiGetHttpsIPRedfishV1SFSSInstanceDDCsRequest) Execute() (*GetHttpsIPRedfishV1SFSSInstanceDDCs200Response, *http.Response, error) {
	return r.ApiService.GetHttpsIPRedfishV1SFSSInstanceDDCsExecute(r)
}

/*
GetHttpsIPRedfishV1SFSSInstanceDDCs Get DDC

This API retrieves a list of direct discovery controllers (DDCs) configured in the specified CDC instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetHttpsIPRedfishV1SFSSInstanceDDCsRequest
*/
func (a *DefaultAPIService) GetHttpsIPRedfishV1SFSSInstanceDDCs(ctx context.Context, instanceID int32) ApiGetHttpsIPRedfishV1SFSSInstanceDDCsRequest {
	return ApiGetHttpsIPRedfishV1SFSSInstanceDDCsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetHttpsIPRedfishV1SFSSInstanceDDCs200Response
func (a *DefaultAPIService) GetHttpsIPRedfishV1SFSSInstanceDDCsExecute(r ApiGetHttpsIPRedfishV1SFSSInstanceDDCsRequest) (*GetHttpsIPRedfishV1SFSSInstanceDDCs200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetHttpsIPRedfishV1SFSSInstanceDDCs200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetHttpsIPRedfishV1SFSSInstanceDDCs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/DDCs"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHttpsIPRedfishV1SFSSInstanceHostsEnumsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
}

func (r ApiGetHttpsIPRedfishV1SFSSInstanceHostsEnumsRequest) Execute() (*GetHttpsIPRedfishV1SFSSInstanceHostsEnums200Response, *http.Response, error) {
	return r.ApiService.GetHttpsIPRedfishV1SFSSInstanceHostsEnumsExecute(r)
}

/*
GetHttpsIPRedfishV1SFSSInstanceHostsEnums Get host enums

This API retrieves a list of all supported enumerations for the host configuration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetHttpsIPRedfishV1SFSSInstanceHostsEnumsRequest
*/
func (a *DefaultAPIService) GetHttpsIPRedfishV1SFSSInstanceHostsEnums(ctx context.Context, instanceID int32) ApiGetHttpsIPRedfishV1SFSSInstanceHostsEnumsRequest {
	return ApiGetHttpsIPRedfishV1SFSSInstanceHostsEnumsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetHttpsIPRedfishV1SFSSInstanceHostsEnums200Response
func (a *DefaultAPIService) GetHttpsIPRedfishV1SFSSInstanceHostsEnumsExecute(r ApiGetHttpsIPRedfishV1SFSSInstanceHostsEnumsRequest) (*GetHttpsIPRedfishV1SFSSInstanceHostsEnums200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetHttpsIPRedfishV1SFSSInstanceHostsEnums200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetHttpsIPRedfishV1SFSSInstanceHostsEnums")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/Hosts/Enums"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHttpsIPRedfishV1SFSSInstanceHostsexpandHostsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	expand *string
	instanceID int32
	skip *int32
	filter *string
}

func (r ApiGetHttpsIPRedfishV1SFSSInstanceHostsexpandHostsRequest) Expand(expand string) ApiGetHttpsIPRedfishV1SFSSInstanceHostsexpandHostsRequest {
	r.expand = &expand
	return r
}

// Helps to skip records
func (r ApiGetHttpsIPRedfishV1SFSSInstanceHostsexpandHostsRequest) Skip(skip int32) ApiGetHttpsIPRedfishV1SFSSInstanceHostsexpandHostsRequest {
	r.skip = &skip
	return r
}

// Filter based on the  eq conditions: ex: TransportAddress eq 11.22.33.44 or TransportAddress eq 1.2.3.4
func (r ApiGetHttpsIPRedfishV1SFSSInstanceHostsexpandHostsRequest) Filter(filter string) ApiGetHttpsIPRedfishV1SFSSInstanceHostsexpandHostsRequest {
	r.filter = &filter
	return r
}

func (r ApiGetHttpsIPRedfishV1SFSSInstanceHostsexpandHostsRequest) Execute() (*GetHttpsIPRedfishV1SFSSInstanceHostsExpandHosts200Response, *http.Response, error) {
	return r.ApiService.GetHttpsIPRedfishV1SFSSInstanceHostsexpandHostsExecute(r)
}

/*
GetHttpsIPRedfishV1SFSSInstanceHostsexpandHosts Get detailed host information

This API retrieves detailed information about a list of hosts that are registered with the specified CDC instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetHttpsIPRedfishV1SFSSInstanceHostsexpandHostsRequest
*/
func (a *DefaultAPIService) GetHttpsIPRedfishV1SFSSInstanceHostsexpandHosts(ctx context.Context, instanceID int32) ApiGetHttpsIPRedfishV1SFSSInstanceHostsexpandHostsRequest {
	return ApiGetHttpsIPRedfishV1SFSSInstanceHostsexpandHostsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetHttpsIPRedfishV1SFSSInstanceHostsExpandHosts200Response
func (a *DefaultAPIService) GetHttpsIPRedfishV1SFSSInstanceHostsexpandHostsExecute(r ApiGetHttpsIPRedfishV1SFSSInstanceHostsexpandHostsRequest) (*GetHttpsIPRedfishV1SFSSInstanceHostsExpandHosts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetHttpsIPRedfishV1SFSSInstanceHostsExpandHosts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetHttpsIPRedfishV1SFSSInstanceHostsexpandHosts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/Hosts2"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.expand == nil {
		return localVarReturnValue, nil, reportError("expand is required and must be specified")
	}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$skip", r.skip, "form", "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$filter", r.filter, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "$expand", r.expand, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMemberssourceconfigRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	zoneGroupId string
	zoneID string
	zoneMemberID string
	sourceconfig *string
}

// This query param is mandatory. The request should looks like: /redfish/v1/SFSS/&lt;Instance#&gt;/ZoneDBs(&#39;config&#39;)/ZoneGroups(&#39;ZoneGroupId&#39;)/Zones(&#39;ZoneID&#39;)/ZoneMembers?$source&#x3D;config
func (r ApiGetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMemberssourceconfigRequest) Sourceconfig(sourceconfig string) ApiGetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMemberssourceconfigRequest {
	r.sourceconfig = &sourceconfig
	return r
}

func (r ApiGetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMemberssourceconfigRequest) Execute() (*GetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMembersSourceConfig200Response, *http.Response, error) {
	return r.ApiService.GetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMemberssourceconfigExecute(r)
}

/*
GetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMemberssourceconfig Get zone members

This API retrieves a list of zone members that are part of the specified CDC instance, zone group, and zone identifiers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param zoneGroupId
 @param zoneID
 @param zoneMemberID
 @return ApiGetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMemberssourceconfigRequest
*/
func (a *DefaultAPIService) GetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMemberssourceconfig(ctx context.Context, instanceID int32, zoneGroupId string, zoneID string, zoneMemberID string) ApiGetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMemberssourceconfigRequest {
	return ApiGetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMemberssourceconfigRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		zoneGroupId: zoneGroupId,
		zoneID: zoneID,
		zoneMemberID: zoneMemberID,
	}
}

// Execute executes the request
//  @return GetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMembersSourceConfig200Response
func (a *DefaultAPIService) GetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMemberssourceconfigExecute(r ApiGetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMemberssourceconfigRequest) (*GetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMembersSourceConfig200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMembersSourceConfig200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetHttpsIPRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZonesConfigZoneMemberssourceconfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneGroups({ZoneGroupId})/Zones({ZoneID})/ZoneMembers({ZoneMemberID})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneGroupId"+"}", url.PathEscape(parameterValueToString(r.zoneGroupId, "zoneGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneID"+"}", url.PathEscape(parameterValueToString(r.zoneID, "zoneID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneMemberID"+"}", url.PathEscape(parameterValueToString(r.zoneMemberID, "zoneMemberID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.zoneGroupId) < 1 {
		return localVarReturnValue, nil, reportError("zoneGroupId must have at least 1 elements")
	}
	if strlen(r.zoneID) < 1 {
		return localVarReturnValue, nil, reportError("zoneID must have at least 1 elements")
	}
	if strlen(r.zoneMemberID) < 1 {
		return localVarReturnValue, nil, reportError("zoneMemberID must have at least 1 elements")
	}

	if r.sourceconfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "?$source=config", r.sourceconfig, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceCDCInstancesourceconfigRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
}

func (r ApiGetRedfishV1SFSSInstanceCDCInstancesourceconfigRequest) Execute() (*GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceCDCInstancesourceconfigExecute(r)
}

/*
GetRedfishV1SFSSInstanceCDCInstancesourceconfig Get detailed CDC information

This API retrieves detailed information about the specified CDC instance from the configuration database.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetRedfishV1SFSSInstanceCDCInstancesourceconfigRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceCDCInstancesourceconfig(ctx context.Context, instanceID int32) ApiGetRedfishV1SFSSInstanceCDCInstancesourceconfigRequest {
	return ApiGetRedfishV1SFSSInstanceCDCInstancesourceconfigRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceCDCInstancesourceconfigExecute(r ApiGetRedfishV1SFSSInstanceCDCInstancesourceconfigRequest) (*GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceCDCInstanceSourceConfig200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceCDCInstancesourceconfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/CDCInstance?$source=config"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceDDCsEnumsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
}

func (r ApiGetRedfishV1SFSSInstanceDDCsEnumsRequest) Execute() (*GetRedfishV1SFSSInstanceDDCsEnums200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceDDCsEnumsExecute(r)
}

/*
GetRedfishV1SFSSInstanceDDCsEnums Get DDC enums

This API retrieves a list of supported enumerations for DDC configuration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetRedfishV1SFSSInstanceDDCsEnumsRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceDDCsEnums(ctx context.Context, instanceID int32) ApiGetRedfishV1SFSSInstanceDDCsEnumsRequest {
	return ApiGetRedfishV1SFSSInstanceDDCsEnumsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceDDCsEnums200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceDDCsEnumsExecute(r ApiGetRedfishV1SFSSInstanceDDCsEnumsRequest) (*GetRedfishV1SFSSInstanceDDCsEnums200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceDDCsEnums200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceDDCsEnums")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/DDCs/Enums"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceDDCsIdRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	id int32
}

func (r ApiGetRedfishV1SFSSInstanceDDCsIdRequest) Execute() (*GetRedfishV1SFSSInstanceDDCsId200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceDDCsIdExecute(r)
}

/*
GetRedfishV1SFSSInstanceDDCsId Get specific DDC

This API retrieves detailed information about a Direct Discovery Controller (DDC) registered with a CDC based on the specified CDC and DDC identifiers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param id
 @return ApiGetRedfishV1SFSSInstanceDDCsIdRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceDDCsId(ctx context.Context, instanceID int32, id int32) ApiGetRedfishV1SFSSInstanceDDCsIdRequest {
	return ApiGetRedfishV1SFSSInstanceDDCsIdRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		id: id,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceDDCsId200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceDDCsIdExecute(r ApiGetRedfishV1SFSSInstanceDDCsIdRequest) (*GetRedfishV1SFSSInstanceDDCsId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceDDCsId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceDDCsId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/DDCs({Id})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceGlobalPoliciesRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
}

func (r ApiGetRedfishV1SFSSInstanceGlobalPoliciesRequest) Execute() (*GetRedfishV1SFSSInstanceGlobalPolicies200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceGlobalPoliciesExecute(r)
}

/*
GetRedfishV1SFSSInstanceGlobalPolicies Get global policies

This API retrieves the global policies configured in the specified CDC instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetRedfishV1SFSSInstanceGlobalPoliciesRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceGlobalPolicies(ctx context.Context, instanceID int32) ApiGetRedfishV1SFSSInstanceGlobalPoliciesRequest {
	return ApiGetRedfishV1SFSSInstanceGlobalPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceGlobalPolicies200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceGlobalPoliciesExecute(r ApiGetRedfishV1SFSSInstanceGlobalPoliciesRequest) (*GetRedfishV1SFSSInstanceGlobalPolicies200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceGlobalPolicies200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceGlobalPolicies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/GlobalPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceGlobalPoliciesEnumsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
}

func (r ApiGetRedfishV1SFSSInstanceGlobalPoliciesEnumsRequest) Execute() (*GetRedfishV1SFSSInstanceGlobalPoliciesEnums200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceGlobalPoliciesEnumsExecute(r)
}

/*
GetRedfishV1SFSSInstanceGlobalPoliciesEnums Get global policy enums

This API retrieves a list of all supported enumerations for the global policy configuration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetRedfishV1SFSSInstanceGlobalPoliciesEnumsRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceGlobalPoliciesEnums(ctx context.Context, instanceID int32) ApiGetRedfishV1SFSSInstanceGlobalPoliciesEnumsRequest {
	return ApiGetRedfishV1SFSSInstanceGlobalPoliciesEnumsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceGlobalPoliciesEnums200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceGlobalPoliciesEnumsExecute(r ApiGetRedfishV1SFSSInstanceGlobalPoliciesEnumsRequest) (*GetRedfishV1SFSSInstanceGlobalPoliciesEnums200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceGlobalPoliciesEnums200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceGlobalPoliciesEnums")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/GlobalPolicies/Enums"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceHostsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	sourceconfig *string
}

// Optional query param to fetch from config DB
func (r ApiGetRedfishV1SFSSInstanceHostsRequest) Sourceconfig(sourceconfig string) ApiGetRedfishV1SFSSInstanceHostsRequest {
	r.sourceconfig = &sourceconfig
	return r
}

func (r ApiGetRedfishV1SFSSInstanceHostsRequest) Execute() (*GetRedfishV1SFSSInstanceHosts200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceHostsExecute(r)
}

/*
GetRedfishV1SFSSInstanceHosts Get all hosts

This API retrieves a list of hosts that are registered with the CDC instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetRedfishV1SFSSInstanceHostsRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceHosts(ctx context.Context, instanceID int32) ApiGetRedfishV1SFSSInstanceHostsRequest {
	return ApiGetRedfishV1SFSSInstanceHostsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceHosts200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceHostsExecute(r ApiGetRedfishV1SFSSInstanceHostsRequest) (*GetRedfishV1SFSSInstanceHosts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceHosts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceHosts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/Hosts"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	if r.sourceconfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "?$source=config", r.sourceconfig, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceHostsIdRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	id int32
}

func (r ApiGetRedfishV1SFSSInstanceHostsIdRequest) Execute() (*GetRedfishV1SFSSInstanceHostsId200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceHostsIdExecute(r)
}

/*
GetRedfishV1SFSSInstanceHostsId Get specific host

This API retrieves detailed information about a host from a CDC instance based on the specified CDC instance and host identifiers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param id
 @return ApiGetRedfishV1SFSSInstanceHostsIdRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceHostsId(ctx context.Context, instanceID int32, id int32) ApiGetRedfishV1SFSSInstanceHostsIdRequest {
	return ApiGetRedfishV1SFSSInstanceHostsIdRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		id: id,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceHostsId200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceHostsIdExecute(r ApiGetRedfishV1SFSSInstanceHostsIdRequest) (*GetRedfishV1SFSSInstanceHostsId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceHostsId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceHostsId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/Hosts({Id})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if r.id < 1 {
		return localVarReturnValue, nil, reportError("id must be greater than 1")
	}
	if r.id > 32 {
		return localVarReturnValue, nil, reportError("id must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceSubsystemsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	sourceconfig *string
}

// This is an optional param to fetch the details from config DB.
func (r ApiGetRedfishV1SFSSInstanceSubsystemsRequest) Sourceconfig(sourceconfig string) ApiGetRedfishV1SFSSInstanceSubsystemsRequest {
	r.sourceconfig = &sourceconfig
	return r
}

func (r ApiGetRedfishV1SFSSInstanceSubsystemsRequest) Execute() (*GetRedfishV1SFSSInstanceSubsystems200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceSubsystemsExecute(r)
}

/*
GetRedfishV1SFSSInstanceSubsystems Get all subsystems

This API retrieves a list of subsystems that are registered with the specified CDC instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetRedfishV1SFSSInstanceSubsystemsRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceSubsystems(ctx context.Context, instanceID int32) ApiGetRedfishV1SFSSInstanceSubsystemsRequest {
	return ApiGetRedfishV1SFSSInstanceSubsystemsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceSubsystems200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceSubsystemsExecute(r ApiGetRedfishV1SFSSInstanceSubsystemsRequest) (*GetRedfishV1SFSSInstanceSubsystems200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceSubsystems200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceSubsystems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/Subsystems"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	if r.sourceconfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "?$source=config", r.sourceconfig, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceSubsystemsEnumsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
}

func (r ApiGetRedfishV1SFSSInstanceSubsystemsEnumsRequest) Execute() (*GetRedfishV1SFSSInstanceSubsystemsEnums200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceSubsystemsEnumsExecute(r)
}

/*
GetRedfishV1SFSSInstanceSubsystemsEnums Get subsystem enums

This API retrieves a list of all supported enumerations for the subsystem configuration. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetRedfishV1SFSSInstanceSubsystemsEnumsRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceSubsystemsEnums(ctx context.Context, instanceID int32) ApiGetRedfishV1SFSSInstanceSubsystemsEnumsRequest {
	return ApiGetRedfishV1SFSSInstanceSubsystemsEnumsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceSubsystemsEnums200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceSubsystemsEnumsExecute(r ApiGetRedfishV1SFSSInstanceSubsystemsEnumsRequest) (*GetRedfishV1SFSSInstanceSubsystemsEnums200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceSubsystemsEnums200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceSubsystemsEnums")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/Subsystems/Enums"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceSubsystemsIdRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	id int32
}

func (r ApiGetRedfishV1SFSSInstanceSubsystemsIdRequest) Execute() (*GetRedfishV1SFSSInstanceSubsystemsId200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceSubsystemsIdExecute(r)
}

/*
GetRedfishV1SFSSInstanceSubsystemsId Get specific subsystem

This API retrieves detailed information about a subsystem based on the specified subsystem identifier.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param id
 @return ApiGetRedfishV1SFSSInstanceSubsystemsIdRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceSubsystemsId(ctx context.Context, instanceID int32, id int32) ApiGetRedfishV1SFSSInstanceSubsystemsIdRequest {
	return ApiGetRedfishV1SFSSInstanceSubsystemsIdRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		id: id,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceSubsystemsId200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceSubsystemsIdExecute(r ApiGetRedfishV1SFSSInstanceSubsystemsIdRequest) (*GetRedfishV1SFSSInstanceSubsystemsId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceSubsystemsId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceSubsystemsId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/Subsystems({Id})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if r.id < 1 {
		return localVarReturnValue, nil, reportError("id must be greater than 1")
	}
	if r.id > 32 {
		return localVarReturnValue, nil, reportError("id must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceSubsystemsexpandSubsystemsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	filterTransportAddressEq1111OrTransportAddressEq3333 *string
}

// Optional query param to filer based on the eq condition.
func (r ApiGetRedfishV1SFSSInstanceSubsystemsexpandSubsystemsRequest) FilterTransportAddressEq1111OrTransportAddressEq3333(filterTransportAddressEq1111OrTransportAddressEq3333 string) ApiGetRedfishV1SFSSInstanceSubsystemsexpandSubsystemsRequest {
	r.filterTransportAddressEq1111OrTransportAddressEq3333 = &filterTransportAddressEq1111OrTransportAddressEq3333
	return r
}

func (r ApiGetRedfishV1SFSSInstanceSubsystemsexpandSubsystemsRequest) Execute() (*GetRedfishV1SFSSInstanceSubsystemsExpandSubsystems200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceSubsystemsexpandSubsystemsExecute(r)
}

/*
GetRedfishV1SFSSInstanceSubsystemsexpandSubsystems Get detailed subsystem information

This API retrieves detailed information about a list of subsystems that are registered with the specified CDC instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetRedfishV1SFSSInstanceSubsystemsexpandSubsystemsRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceSubsystemsexpandSubsystems(ctx context.Context, instanceID int32) ApiGetRedfishV1SFSSInstanceSubsystemsexpandSubsystemsRequest {
	return ApiGetRedfishV1SFSSInstanceSubsystemsexpandSubsystemsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceSubsystemsExpandSubsystems200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceSubsystemsexpandSubsystemsExecute(r ApiGetRedfishV1SFSSInstanceSubsystemsexpandSubsystemsRequest) (*GetRedfishV1SFSSInstanceSubsystemsExpandSubsystems200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceSubsystemsExpandSubsystems200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceSubsystemsexpandSubsystems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/Subsystems?$expand=Subsystems"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	if r.filterTransportAddressEq1111OrTransportAddressEq3333 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "&$filter=TransportAddress eq 1.1.1.1 or TransportAddress eq 3.3.3.3", r.filterTransportAddressEq1111OrTransportAddressEq3333, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceZoneDBsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	sourceconfig *string
}

// To fetch from configuration database
func (r ApiGetRedfishV1SFSSInstanceZoneDBsRequest) Sourceconfig(sourceconfig string) ApiGetRedfishV1SFSSInstanceZoneDBsRequest {
	r.sourceconfig = &sourceconfig
	return r
}

func (r ApiGetRedfishV1SFSSInstanceZoneDBsRequest) Execute() (*GetRedfishV1SFSSInstanceZoneDBs200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceZoneDBsExecute(r)
}

/*
GetRedfishV1SFSSInstanceZoneDBs Get zone database

This API retrieves zone database information from a CDC based on the specified CDC instance identifier.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetRedfishV1SFSSInstanceZoneDBsRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBs(ctx context.Context, instanceID int32) ApiGetRedfishV1SFSSInstanceZoneDBsRequest {
	return ApiGetRedfishV1SFSSInstanceZoneDBsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceZoneDBs200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsExecute(r ApiGetRedfishV1SFSSInstanceZoneDBsRequest) (*GetRedfishV1SFSSInstanceZoneDBs200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceZoneDBs200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceZoneDBs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	if r.sourceconfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "?$source=config", r.sourceconfig, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceZoneDBsActiveRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
}

func (r ApiGetRedfishV1SFSSInstanceZoneDBsActiveRequest) Execute() (*GetRedfishV1SFSSInstanceZoneDBsActive200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceZoneDBsActiveExecute(r)
}

/*
GetRedfishV1SFSSInstanceZoneDBsActive Get active database

This API retrieves zone group information from the active database of the specified CDC instance. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetRedfishV1SFSSInstanceZoneDBsActiveRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsActive(ctx context.Context, instanceID int32) ApiGetRedfishV1SFSSInstanceZoneDBsActiveRequest {
	return ApiGetRedfishV1SFSSInstanceZoneDBsActiveRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceZoneDBsActive200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsActiveExecute(r ApiGetRedfishV1SFSSInstanceZoneDBsActiveRequest) (*GetRedfishV1SFSSInstanceZoneDBsActive200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceZoneDBsActive200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceZoneDBsActive")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('active')"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestsourceconfigRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
}

func (r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestsourceconfigRequest) Execute() (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestSourceConfig200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestsourceconfigExecute(r)
}

/*
GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestsourceconfig Get a zone alias

This API retrieves detailed information about a zone alias from the specified CDC instance based on the zone alias identifier.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestsourceconfigRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestsourceconfig(ctx context.Context, instanceID int32) ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestsourceconfigRequest {
	return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestsourceconfigRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestSourceConfig200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestsourceconfigExecute(r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestsourceconfigRequest) (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestSourceConfig200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestSourceConfig200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasTestsourceconfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneAlias?$source=config&$expand=ZoneAlias"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostsourceconfigRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	zoneAliasId string
	zoneAliasMemberId string
}

func (r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostsourceconfigRequest) Execute() (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostSourceConfig200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostsourceconfigExecute(r)
}

/*
GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostsourceconfig Get zone alias member

This API retrieves detailed information about a zone alias member from the specified CDC instance based on the zone alias member identifier. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param zoneAliasId
 @param zoneAliasMemberId
 @return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostsourceconfigRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostsourceconfig(ctx context.Context, instanceID int32, zoneAliasId string, zoneAliasMemberId string) ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostsourceconfigRequest {
	return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostsourceconfigRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		zoneAliasId: zoneAliasId,
		zoneAliasMemberId: zoneAliasMemberId,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostSourceConfig200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostsourceconfigExecute(r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostsourceconfigRequest) (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostSourceConfig200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostSourceConfig200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersConfigDhanaSampleAliasNqn201408OrgNvmexpressUuidHostsourceconfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneAlias({ZoneAliasId})/ZoneAliasMembers({ZoneAliasMemberId})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneAliasId"+"}", url.PathEscape(parameterValueToString(r.zoneAliasId, "zoneAliasId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneAliasMemberId"+"}", url.PathEscape(parameterValueToString(r.zoneAliasMemberId, "zoneAliasMemberId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.zoneAliasId) < 1 {
		return localVarReturnValue, nil, reportError("zoneAliasId must have at least 1 elements")
	}
	if strlen(r.zoneAliasMemberId) < 1 {
		return localVarReturnValue, nil, reportError("zoneAliasMemberId must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	zoneAliasId string
	sourceconfig *string
}

// This query parameter should be passed to fetch details. The sample query looks like: http://IPAddress//redfish/v1/SFSS/&lt;Instance#&gt;/ZoneDBs(&#39;config&#39;)/ZoneAlias(&#39;config:DhanaSampleAlias&#39;)/ZoneAliasMembers?$source&#x3D;config
func (r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest) Sourceconfig(sourceconfig string) ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest {
	r.sourceconfig = &sourceconfig
	return r
}

func (r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest) Execute() (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfig200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigExecute(r)
}

/*
GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfig Get zone alias member

This API retrieves a list of zone alias members that belong to the specified CDC instance and zone alias.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param zoneAliasId
 @return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfig(ctx context.Context, instanceID int32, zoneAliasId string) ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest {
	return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		zoneAliasId: zoneAliasId,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfig200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigExecute(r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest) (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfig200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfig200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneAlias({ZoneAliasId)/ZoneAliasMembers"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneAliasId"+"}", url.PathEscape(parameterValueToString(r.zoneAliasId, "zoneAliasId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.zoneAliasId) < 1 {
		return localVarReturnValue, nil, reportError("zoneAliasId must have at least 1 elements")
	}

	if r.sourceconfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "?$source=config", r.sourceconfig, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigexpandZoneAliasMembersRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	config string
	zonealiasmem string
	instanceID int32
	zoneAliasId string
	zoneAliasMemberId string
}

func (r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigexpandZoneAliasMembersRequest) Execute() (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigExpandZoneAliasMembers200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigexpandZoneAliasMembersExecute(r)
}

/*
GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigexpandZoneAliasMembers Get zone alias members

This API retrieves a list of all zone alias members from the specified CDC instance and zone alias.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param config ?$source=config
 @param zonealiasmem &$expand=ZoneAliasMembers
 @param instanceID
 @param zoneAliasId
 @param zoneAliasMemberId
 @return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigexpandZoneAliasMembersRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigexpandZoneAliasMembers(ctx context.Context, config string, zonealiasmem string, instanceID int32, zoneAliasId string, zoneAliasMemberId string) ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigexpandZoneAliasMembersRequest {
	return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigexpandZoneAliasMembersRequest{
		ApiService: a,
		ctx: ctx,
		config: config,
		zonealiasmem: zonealiasmem,
		instanceID: instanceID,
		zoneAliasId: zoneAliasId,
		zoneAliasMemberId: zoneAliasMemberId,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigExpandZoneAliasMembers200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigexpandZoneAliasMembersExecute(r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigexpandZoneAliasMembersRequest) (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigExpandZoneAliasMembers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigExpandZoneAliasMembers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigexpandZoneAliasMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneAlias({ZoneAliasId})/ZoneAliasMembers2({ZoneAliasMemberId})"
	localVarPath = strings.Replace(localVarPath, "{"+"config"+"}", url.PathEscape(parameterValueToString(r.config, "config")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"zonealiasmem"+"}", url.PathEscape(parameterValueToString(r.zonealiasmem, "zonealiasmem")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneAliasId"+"}", url.PathEscape(parameterValueToString(r.zoneAliasId, "zoneAliasId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneAliasMemberId"+"}", url.PathEscape(parameterValueToString(r.zoneAliasMemberId, "zoneAliasMemberId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.zoneAliasId) < 1 {
		return localVarReturnValue, nil, reportError("zoneAliasId must have at least 1 elements")
	}
	if strlen(r.zoneAliasMemberId) < 1 {
		return localVarReturnValue, nil, reportError("zoneAliasMemberId must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	sourceconfigexpandZoneAlias *string
}

// The query parameters should be passed. The URL should looks like http://IPAdress/redfish/v1/SFSS/&lt;Instance#&gt;/ZoneDBs(&#39;config&#39;)/ZoneAlias?$source&#x3D;config&amp;$expand&#x3D;ZoneAlias
func (r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasRequest) SourceconfigexpandZoneAlias(sourceconfigexpandZoneAlias string) ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasRequest {
	r.sourceconfigexpandZoneAlias = &sourceconfigexpandZoneAlias
	return r
}

func (r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasRequest) Execute() (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasSourceConfigExpandZoneAlias200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasExecute(r)
}

/*
GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAlias Get zone alias

This API retrieves a list of zone aliases configured in the specified CDC instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAlias(ctx context.Context, instanceID int32) ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasRequest {
	return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasSourceConfigExpandZoneAlias200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasExecute(r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasRequest) (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasSourceConfigExpandZoneAlias200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliasSourceConfigExpandZoneAlias200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAlias")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneAlias"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	if r.sourceconfigexpandZoneAlias != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "?$source=config&$expand=ZoneAlias", r.sourceconfigexpandZoneAlias, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8sourceconfigRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	expand string
	instanceID int32
	zoneGroupID string
}

func (r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8sourceconfigRequest) Execute() (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8SourceConfig200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8sourceconfigExecute(r)
}

/*
GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8sourceconfig Get specific zone group

This API retrieves detailed information about a zone group based on the zone group identifier.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param expand ?$source=config
 @param instanceID
 @param zoneGroupID
 @return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8sourceconfigRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8sourceconfig(ctx context.Context, expand string, instanceID int32, zoneGroupID string) ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8sourceconfigRequest {
	return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8sourceconfigRequest{
		ApiService: a,
		ctx: ctx,
		expand: expand,
		instanceID: instanceID,
		zoneGroupID: zoneGroupID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8SourceConfig200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8sourceconfigExecute(r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8sourceconfigRequest) (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8SourceConfig200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8SourceConfig200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGroup1Nqn198811ComDellSFSS120210706164404e8sourceconfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneGroups({ZoneGroupID})"
	localVarPath = strings.Replace(localVarPath, "{"+"expand"+"}", url.PathEscape(parameterValueToString(r.expand, "expand")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneGroupID"+"}", url.PathEscape(parameterValueToString(r.zoneGroupID, "zoneGroupID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.zoneGroupID) < 1 {
		return localVarReturnValue, nil, reportError("zoneGroupID must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8ZonessourceconfigRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	zoneGrpID string
	zoneID string
	sourceconfig *string
}

// The API should looks like: /redfish/v1/SFSS/&lt;Instance#&gt;/ZoneDBs(&#39;config&#39;)/ZoneGroups(&#39;ZoneGrpID&#39;)/Zones?$source&#x3D;config
func (r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8ZonessourceconfigRequest) Sourceconfig(sourceconfig string) ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8ZonessourceconfigRequest {
	r.sourceconfig = &sourceconfig
	return r
}

func (r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8ZonessourceconfigRequest) Execute() (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8ZonesSourceConfig200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8ZonessourceconfigExecute(r)
}

/*
GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8Zonessourceconfig Get all zones

This API retrieves a list of all the zones that belong to the specified CDC instance based on the zone group and zone identifiers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param zoneGrpID
 @param zoneID
 @return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8ZonessourceconfigRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8Zonessourceconfig(ctx context.Context, instanceID int32, zoneGrpID string, zoneID string) ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8ZonessourceconfigRequest {
	return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8ZonessourceconfigRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		zoneGrpID: zoneGrpID,
		zoneID: zoneID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8ZonesSourceConfig200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8ZonessourceconfigExecute(r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8ZonessourceconfigRequest) (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8ZonesSourceConfig200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8ZonesSourceConfig200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsConfigZoneGrpDhana1111Nqn198811ComDellSFSS120210706164404e8Zonessourceconfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneGroups({ZoneGrpID})/Zones({ZoneID})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneGrpID"+"}", url.PathEscape(parameterValueToString(r.zoneGrpID, "zoneGrpID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneID"+"}", url.PathEscape(parameterValueToString(r.zoneID, "zoneID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.zoneGrpID) < 1 {
		return localVarReturnValue, nil, reportError("zoneGrpID must have at least 1 elements")
	}
	if strlen(r.zoneID) < 1 {
		return localVarReturnValue, nil, reportError("zoneID must have at least 1 elements")
	}

	if r.sourceconfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "?$source=config", r.sourceconfig, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	zoneGroupId string
	zoneID string
	zoneMemberID string
}

func (r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigRequest) Execute() (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDSourceConfig200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigExecute(r)
}

/*
GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfig Get a zone member

This API retrieves detailed information about a zone member that belong to the specified CDC instance, zone group, and zone.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param zoneGroupId
 @param zoneID
 @param zoneMemberID
 @return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfig(ctx context.Context, instanceID int32, zoneGroupId string, zoneID string, zoneMemberID string) ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigRequest {
	return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		zoneGroupId: zoneGroupId,
		zoneID: zoneID,
		zoneMemberID: zoneMemberID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDSourceConfig200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigExecute(r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigRequest) (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDSourceConfig200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDSourceConfig200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/<Instance#>/ZoneDBs('config')/ZoneGroups('ZoneGroupId')/Zones('ZoneID')/ZoneMembers('ZoneMemberID')"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneGroupId"+"}", url.PathEscape(parameterValueToString(r.zoneGroupId, "zoneGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneID"+"}", url.PathEscape(parameterValueToString(r.zoneID, "zoneID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneMemberID"+"}", url.PathEscape(parameterValueToString(r.zoneMemberID, "zoneMemberID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.zoneGroupId) < 1 {
		return localVarReturnValue, nil, reportError("zoneGroupId must have at least 1 elements")
	}
	if strlen(r.zoneID) < 1 {
		return localVarReturnValue, nil, reportError("zoneID must have at least 1 elements")
	}
	if strlen(r.zoneMemberID) < 1 {
		return localVarReturnValue, nil, reportError("zoneMemberID must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigexpandZoneMembersRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	config string
	zonemem string
	instanceID int32
	zoneGroupId string
	zoneID string
}

func (r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigexpandZoneMembersRequest) Execute() (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDSourceConfigExpandZoneMembers200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigexpandZoneMembersExecute(r)
}

/*
GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigexpandZoneMembers Get zone members (detailed)

This API retrieves detailed information about all zone members that belong to the specified CDC instance, zone group, and zone.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param config ?$source=config
 @param zonemem &$expand=ZoneMembers
 @param instanceID
 @param zoneGroupId
 @param zoneID
 @return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigexpandZoneMembersRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigexpandZoneMembers(ctx context.Context, config string, zonemem string, instanceID int32, zoneGroupId string, zoneID string) ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigexpandZoneMembersRequest {
	return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigexpandZoneMembersRequest{
		ApiService: a,
		ctx: ctx,
		config: config,
		zonemem: zonemem,
		instanceID: instanceID,
		zoneGroupId: zoneGroupId,
		zoneID: zoneID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDSourceConfigExpandZoneMembers200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigexpandZoneMembersExecute(r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigexpandZoneMembersRequest) (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDSourceConfigExpandZoneMembers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDSourceConfigExpandZoneMembers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersZoneMemberIDsourceconfigexpandZoneMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneGroups('ZoneGroupId')/Zones('ZoneID')/ZoneMembers{config}{zonemem}"
	localVarPath = strings.Replace(localVarPath, "{"+"config"+"}", url.PathEscape(parameterValueToString(r.config, "config")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"zonemem"+"}", url.PathEscape(parameterValueToString(r.zonemem, "zonemem")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneGroupId"+"}", url.PathEscape(parameterValueToString(r.zoneGroupId, "zoneGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneID"+"}", url.PathEscape(parameterValueToString(r.zoneID, "zoneID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.zoneGroupId) < 1 {
		return localVarReturnValue, nil, reportError("zoneGroupId must have at least 1 elements")
	}
	if strlen(r.zoneID) < 1 {
		return localVarReturnValue, nil, reportError("zoneID must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupssourceconfigRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	iD string
	sourceconfig *string
}

// This parameter should be passed to fetch the Zone Groups
func (r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupssourceconfigRequest) Sourceconfig(sourceconfig string) ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupssourceconfigRequest {
	r.sourceconfig = &sourceconfig
	return r
}

func (r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupssourceconfigRequest) Execute() (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsSourceConfig200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupssourceconfigExecute(r)
}

/*
GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupssourceconfig Get specific zone group

This API retrieves zone group information from the config database based on the specified CDC instance and zone group identifiers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param iD
 @return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupssourceconfigRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupssourceconfig(ctx context.Context, instanceID int32, iD string) ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupssourceconfigRequest {
	return ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupssourceconfigRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		iD: iD,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsSourceConfig200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupssourceconfigExecute(r ApiGetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupssourceconfigRequest) (*GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsSourceConfig200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsSourceConfig200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceZoneDBsConfigZoneGroupssourceconfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneGroups({ID})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ID"+"}", url.PathEscape(parameterValueToString(r.iD, "iD")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.iD) < 1 {
		return localVarReturnValue, nil, reportError("iD must have at least 1 elements")
	}

	if r.sourceconfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "?$source=config", r.sourceconfig, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceZoneDBsConfigsourceconfigRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	sourceconfig *string
}

// This param is required to fetch the ZoneDB. The URL should looks like: /redfish/v1/SFSS/&lt;Instance#&gt;/ZoneDBs(&#39;config&#39;)?$source&#x3D;config
func (r ApiGetRedfishV1SFSSInstanceZoneDBsConfigsourceconfigRequest) Sourceconfig(sourceconfig string) ApiGetRedfishV1SFSSInstanceZoneDBsConfigsourceconfigRequest {
	r.sourceconfig = &sourceconfig
	return r
}

func (r ApiGetRedfishV1SFSSInstanceZoneDBsConfigsourceconfigRequest) Execute() (*GetRedfishV1SFSSInstanceZoneDBsConfigSourceConfig200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceZoneDBsConfigsourceconfigExecute(r)
}

/*
GetRedfishV1SFSSInstanceZoneDBsConfigsourceconfig Get config database

This API retrieves zone group information from the specified CDC instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetRedfishV1SFSSInstanceZoneDBsConfigsourceconfigRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigsourceconfig(ctx context.Context, instanceID int32) ApiGetRedfishV1SFSSInstanceZoneDBsConfigsourceconfigRequest {
	return ApiGetRedfishV1SFSSInstanceZoneDBsConfigsourceconfigRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceZoneDBsConfigSourceConfig200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsConfigsourceconfigExecute(r ApiGetRedfishV1SFSSInstanceZoneDBsConfigsourceconfigRequest) (*GetRedfishV1SFSSInstanceZoneDBsConfigSourceConfig200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceZoneDBsConfigSourceConfig200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceZoneDBsConfigsourceconfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	if r.sourceconfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "?$source=config", r.sourceconfig, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnumsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
}

func (r ApiGetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnumsRequest) Execute() (*GetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnums200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnumsExecute(r)
}

/*
GetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnums Get zone alias member enums

This API retrieves a list of all supported enumerations for the zone alias member configuration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnumsRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnums(ctx context.Context, instanceID int32) ApiGetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnumsRequest {
	return ApiGetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnumsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnums200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnumsExecute(r ApiGetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnumsRequest) (*GetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnums200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnums200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceZoneDBsZoneAliasZoneAliasMembersEnums")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs/ZoneAlias/ZoneAliasMembers/Enums"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnumsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
}

func (r ApiGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnumsRequest) Execute() (*GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnumsExecute(r)
}

/*
GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums Get zone group enums

This API retrieves a list of supported enumerations for the zone group configuration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnumsRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums(ctx context.Context, instanceID int32) ApiGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnumsRequest {
	return ApiGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnumsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnumsExecute(r ApiGetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnumsRequest) (*GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceZoneDBsZoneGroupsEnums")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs/ZoneGroups/Enums"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnumsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
}

func (r ApiGetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnumsRequest) Execute() (*GetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnums200Response, *http.Response, error) {
	return r.ApiService.GetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnumsExecute(r)
}

/*
GetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnums Get zone member enums

This API retrieves a list of supported enumerations for zone member configuration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiGetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnumsRequest
*/
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnums(ctx context.Context, instanceID int32) ApiGetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnumsRequest {
	return ApiGetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnumsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return GetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnums200Response
func (a *DefaultAPIService) GetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnumsExecute(r ApiGetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnumsRequest) (*GetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnums200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnums200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.GetRedfishV1SFSSInstanceZoneDBsZoneGroupsZonesZoneMembersEnums")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs/ZoneGroups/Zones/ZoneMembers/Enums"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostRedfishV1SFSSInstanceDDCsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	postRedfishV1SFSSInstanceDDCsRequest *PostRedfishV1SFSSInstanceDDCsRequest
}

func (r ApiPostRedfishV1SFSSInstanceDDCsRequest) PostRedfishV1SFSSInstanceDDCsRequest(postRedfishV1SFSSInstanceDDCsRequest PostRedfishV1SFSSInstanceDDCsRequest) ApiPostRedfishV1SFSSInstanceDDCsRequest {
	r.postRedfishV1SFSSInstanceDDCsRequest = &postRedfishV1SFSSInstanceDDCsRequest
	return r
}

func (r ApiPostRedfishV1SFSSInstanceDDCsRequest) Execute() (*PostRedfishV1SFSSInstanceDDCs200Response, *http.Response, error) {
	return r.ApiService.PostRedfishV1SFSSInstanceDDCsExecute(r)
}

/*
PostRedfishV1SFSSInstanceDDCs Add DDC

This API adds direct discovery controllers (DDCs) in the specified CDC instance. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiPostRedfishV1SFSSInstanceDDCsRequest
*/
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceDDCs(ctx context.Context, instanceID int32) ApiPostRedfishV1SFSSInstanceDDCsRequest {
	return ApiPostRedfishV1SFSSInstanceDDCsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return PostRedfishV1SFSSInstanceDDCs200Response
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceDDCsExecute(r ApiPostRedfishV1SFSSInstanceDDCsRequest) (*PostRedfishV1SFSSInstanceDDCs200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostRedfishV1SFSSInstanceDDCs200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PostRedfishV1SFSSInstanceDDCs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/DDCs"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postRedfishV1SFSSInstanceDDCsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostRedfishV1SFSSInstanceGlobalPoliciesRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	postRedfishV1SFSSInstanceGlobalPoliciesRequest *PostRedfishV1SFSSInstanceGlobalPoliciesRequest
}

func (r ApiPostRedfishV1SFSSInstanceGlobalPoliciesRequest) PostRedfishV1SFSSInstanceGlobalPoliciesRequest(postRedfishV1SFSSInstanceGlobalPoliciesRequest PostRedfishV1SFSSInstanceGlobalPoliciesRequest) ApiPostRedfishV1SFSSInstanceGlobalPoliciesRequest {
	r.postRedfishV1SFSSInstanceGlobalPoliciesRequest = &postRedfishV1SFSSInstanceGlobalPoliciesRequest
	return r
}

func (r ApiPostRedfishV1SFSSInstanceGlobalPoliciesRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostRedfishV1SFSSInstanceGlobalPoliciesExecute(r)
}

/*
PostRedfishV1SFSSInstanceGlobalPolicies Configure global policies

This API creates or updates the global policies in the specified CDC instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiPostRedfishV1SFSSInstanceGlobalPoliciesRequest
*/
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceGlobalPolicies(ctx context.Context, instanceID int32) ApiPostRedfishV1SFSSInstanceGlobalPoliciesRequest {
	return ApiPostRedfishV1SFSSInstanceGlobalPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceGlobalPoliciesExecute(r ApiPostRedfishV1SFSSInstanceGlobalPoliciesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PostRedfishV1SFSSInstanceGlobalPolicies")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/GlobalPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postRedfishV1SFSSInstanceGlobalPoliciesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostRedfishV1SFSSInstanceHostsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	postRedfishV1SFSSInstanceHostsRequest *PostRedfishV1SFSSInstanceHostsRequest
}

func (r ApiPostRedfishV1SFSSInstanceHostsRequest) PostRedfishV1SFSSInstanceHostsRequest(postRedfishV1SFSSInstanceHostsRequest PostRedfishV1SFSSInstanceHostsRequest) ApiPostRedfishV1SFSSInstanceHostsRequest {
	r.postRedfishV1SFSSInstanceHostsRequest = &postRedfishV1SFSSInstanceHostsRequest
	return r
}

func (r ApiPostRedfishV1SFSSInstanceHostsRequest) Execute() (*PostRedfishV1SFSSInstanceHosts200Response, *http.Response, error) {
	return r.ApiService.PostRedfishV1SFSSInstanceHostsExecute(r)
}

/*
PostRedfishV1SFSSInstanceHosts Add host

This API allows you to manually create a host entry in the specified CDC instance for troubleshooting purposes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiPostRedfishV1SFSSInstanceHostsRequest
*/
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceHosts(ctx context.Context, instanceID int32) ApiPostRedfishV1SFSSInstanceHostsRequest {
	return ApiPostRedfishV1SFSSInstanceHostsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return PostRedfishV1SFSSInstanceHosts200Response
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceHostsExecute(r ApiPostRedfishV1SFSSInstanceHostsRequest) (*PostRedfishV1SFSSInstanceHosts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostRedfishV1SFSSInstanceHosts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PostRedfishV1SFSSInstanceHosts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/Hosts"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postRedfishV1SFSSInstanceHostsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostRedfishV1SFSSInstanceSubsystemsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	sourceconfig *string
	postRedfishV1SFSSInstanceSubsystemsRequest *PostRedfishV1SFSSInstanceSubsystemsRequest
}

// This is an optional param to fetch the details from config DB.
func (r ApiPostRedfishV1SFSSInstanceSubsystemsRequest) Sourceconfig(sourceconfig string) ApiPostRedfishV1SFSSInstanceSubsystemsRequest {
	r.sourceconfig = &sourceconfig
	return r
}

func (r ApiPostRedfishV1SFSSInstanceSubsystemsRequest) PostRedfishV1SFSSInstanceSubsystemsRequest(postRedfishV1SFSSInstanceSubsystemsRequest PostRedfishV1SFSSInstanceSubsystemsRequest) ApiPostRedfishV1SFSSInstanceSubsystemsRequest {
	r.postRedfishV1SFSSInstanceSubsystemsRequest = &postRedfishV1SFSSInstanceSubsystemsRequest
	return r
}

func (r ApiPostRedfishV1SFSSInstanceSubsystemsRequest) Execute() (*PostRedfishV1SFSSInstanceSubsystems200Response, *http.Response, error) {
	return r.ApiService.PostRedfishV1SFSSInstanceSubsystemsExecute(r)
}

/*
PostRedfishV1SFSSInstanceSubsystems Add subsystem

This API allows you to manually create a subsystem entry in the specified CDC instance for troubleshooting purposes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiPostRedfishV1SFSSInstanceSubsystemsRequest
*/
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceSubsystems(ctx context.Context, instanceID int32) ApiPostRedfishV1SFSSInstanceSubsystemsRequest {
	return ApiPostRedfishV1SFSSInstanceSubsystemsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return PostRedfishV1SFSSInstanceSubsystems200Response
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceSubsystemsExecute(r ApiPostRedfishV1SFSSInstanceSubsystemsRequest) (*PostRedfishV1SFSSInstanceSubsystems200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostRedfishV1SFSSInstanceSubsystems200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PostRedfishV1SFSSInstanceSubsystems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/Subsystems"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	if r.sourceconfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "?$source=config", r.sourceconfig, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postRedfishV1SFSSInstanceSubsystemsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	zoneAliasId string
	postRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigRequest *PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigRequest
}

func (r ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest) PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigRequest(postRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigRequest PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigRequest) ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest {
	r.postRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigRequest = &postRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigRequest
	return r
}

func (r ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest) Execute() (*PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfig200Response, *http.Response, error) {
	return r.ApiService.PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigExecute(r)
}

/*
PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfig Add zone alias member

This API creates a zone alias member in the specified CDC instance and zone alias.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param zoneAliasId
 @return ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest
*/
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfig(ctx context.Context, instanceID int32, zoneAliasId string) ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest {
	return ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		zoneAliasId: zoneAliasId,
	}
}

// Execute executes the request
//  @return PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfig200Response
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigExecute(r ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest) (*PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfig200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfig200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneAlias({ZoneAliasId)/ZoneAliasMembers"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneAliasId"+"}", url.PathEscape(parameterValueToString(r.zoneAliasId, "zoneAliasId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.zoneAliasId) < 1 {
		return localVarReturnValue, nil, reportError("zoneAliasId must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	postRedfishV1SFSSInstanceZoneDBsConfigZoneAliasSourceConfigExpandZoneAliasRequest *PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasSourceConfigExpandZoneAliasRequest
}

func (r ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasRequest) PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasSourceConfigExpandZoneAliasRequest(postRedfishV1SFSSInstanceZoneDBsConfigZoneAliasSourceConfigExpandZoneAliasRequest PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasSourceConfigExpandZoneAliasRequest) ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasRequest {
	r.postRedfishV1SFSSInstanceZoneDBsConfigZoneAliasSourceConfigExpandZoneAliasRequest = &postRedfishV1SFSSInstanceZoneDBsConfigZoneAliasSourceConfigExpandZoneAliasRequest
	return r
}

func (r ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasRequest) Execute() (*PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasSourceConfigExpandZoneAlias200Response, *http.Response, error) {
	return r.ApiService.PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasExecute(r)
}

/*
PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAlias Add a zone alias

This API creates a zone alias in the specified CDC instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasRequest
*/
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAlias(ctx context.Context, instanceID int32) ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasRequest {
	return ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasSourceConfigExpandZoneAlias200Response
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasExecute(r ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAliasRequest) (*PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasSourceConfigExpandZoneAlias200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliasSourceConfigExpandZoneAlias200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PostRedfishV1SFSSInstanceZoneDBsConfigZoneAliassourceconfigexpandZoneAlias")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneAlias"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postRedfishV1SFSSInstanceZoneDBsConfigZoneAliasSourceConfigExpandZoneAliasRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	iD string
	postRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest *PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest
}

func (r ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest) PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest(postRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest) ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest {
	r.postRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest = &postRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest
	return r
}

func (r ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest) Execute() (*PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroups200Response, *http.Response, error) {
	return r.ApiService.PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsExecute(r)
}

/*
PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroups Add zone group

This API creates a zone group in the config database of the specified CDC instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param iD
 @return ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest
*/
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroups(ctx context.Context, instanceID int32, iD string) ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest {
	return ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		iD: iD,
	}
}

// Execute executes the request
//  @return PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroups200Response
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsExecute(r ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest) (*PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroups200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroups200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneGroups({ID})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ID"+"}", url.PathEscape(parameterValueToString(r.iD, "iD")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.iD) < 1 {
		return localVarReturnValue, nil, reportError("iD must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	zoneGroupId string
	zoneID string
	zoneMemberID string
	postRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest *PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest
}

func (r ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest) PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest(postRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest) ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest {
	r.postRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest = &postRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest
	return r
}

func (r ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest) Execute() (*PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers200Response, *http.Response, error) {
	return r.ApiService.PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersExecute(r)
}

/*
PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers Add zone member

This API creates a zone member in the specified CDC instance, zone group, and zone.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param zoneGroupId
 @param zoneID
 @param zoneMemberID
 @return ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest
*/
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers(ctx context.Context, instanceID int32, zoneGroupId string, zoneID string, zoneMemberID string) ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest {
	return ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		zoneGroupId: zoneGroupId,
		zoneID: zoneID,
		zoneMemberID: zoneMemberID,
	}
}

// Execute executes the request
//  @return PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers200Response
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersExecute(r ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest) (*PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneGroups({ZoneGroupId})/Zones({ZoneID})/ZoneMembers({ZoneMemberID})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneGroupId"+"}", url.PathEscape(parameterValueToString(r.zoneGroupId, "zoneGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneID"+"}", url.PathEscape(parameterValueToString(r.zoneID, "zoneID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneMemberID"+"}", url.PathEscape(parameterValueToString(r.zoneMemberID, "zoneMemberID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.zoneGroupId) < 1 {
		return localVarReturnValue, nil, reportError("zoneGroupId must have at least 1 elements")
	}
	if strlen(r.zoneID) < 1 {
		return localVarReturnValue, nil, reportError("zoneID must have at least 1 elements")
	}
	if strlen(r.zoneMemberID) < 1 {
		return localVarReturnValue, nil, reportError("zoneMemberID must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonessourceconfigRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	zoneGrpID string
	zoneID string
	postRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesSourceConfigRequest *PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesSourceConfigRequest
}

func (r ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonessourceconfigRequest) PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesSourceConfigRequest(postRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesSourceConfigRequest PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesSourceConfigRequest) ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonessourceconfigRequest {
	r.postRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesSourceConfigRequest = &postRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesSourceConfigRequest
	return r
}

func (r ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonessourceconfigRequest) Execute() (*PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesSourceConfig200Response, *http.Response, error) {
	return r.ApiService.PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonessourceconfigExecute(r)
}

/*
PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonessourceconfig Add zone

This API creates a zone within the specified CDC instance and zone group.   

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param zoneGrpID
 @param zoneID
 @return ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonessourceconfigRequest
*/
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonessourceconfig(ctx context.Context, instanceID int32, zoneGrpID string, zoneID string) ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonessourceconfigRequest {
	return ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonessourceconfigRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		zoneGrpID: zoneGrpID,
		zoneID: zoneID,
	}
}

// Execute executes the request
//  @return PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesSourceConfig200Response
func (a *DefaultAPIService) PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonessourceconfigExecute(r ApiPostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonessourceconfigRequest) (*PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesSourceConfig200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesSourceConfig200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PostRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonessourceconfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneGroups({ZoneGrpID})/Zones({ZoneID})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneGrpID"+"}", url.PathEscape(parameterValueToString(r.zoneGrpID, "zoneGrpID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneID"+"}", url.PathEscape(parameterValueToString(r.zoneID, "zoneID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.zoneGrpID) < 1 {
		return localVarReturnValue, nil, reportError("zoneGrpID must have at least 1 elements")
	}
	if strlen(r.zoneID) < 1 {
		return localVarReturnValue, nil, reportError("zoneID must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGrpIDZonesSourceConfigRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutRedfishV1SFSSInstanceIDDDCsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	putRedfishV1SFSSInstanceIDDDCsRequest *PutRedfishV1SFSSInstanceIDDDCsRequest
}

func (r ApiPutRedfishV1SFSSInstanceIDDDCsRequest) PutRedfishV1SFSSInstanceIDDDCsRequest(putRedfishV1SFSSInstanceIDDDCsRequest PutRedfishV1SFSSInstanceIDDDCsRequest) ApiPutRedfishV1SFSSInstanceIDDDCsRequest {
	r.putRedfishV1SFSSInstanceIDDDCsRequest = &putRedfishV1SFSSInstanceIDDDCsRequest
	return r
}

func (r ApiPutRedfishV1SFSSInstanceIDDDCsRequest) Execute() (*PutRedfishV1SFSSInstanceIDDDCs200Response, *http.Response, error) {
	return r.ApiService.PutRedfishV1SFSSInstanceIDDDCsExecute(r)
}

/*
PutRedfishV1SFSSInstanceIDDDCs Update DDC

This API updates information about multiple DDCs in the specified CDC instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @return ApiPutRedfishV1SFSSInstanceIDDDCsRequest
*/
func (a *DefaultAPIService) PutRedfishV1SFSSInstanceIDDDCs(ctx context.Context, instanceID int32) ApiPutRedfishV1SFSSInstanceIDDDCsRequest {
	return ApiPutRedfishV1SFSSInstanceIDDDCsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return PutRedfishV1SFSSInstanceIDDDCs200Response
func (a *DefaultAPIService) PutRedfishV1SFSSInstanceIDDDCsExecute(r ApiPutRedfishV1SFSSInstanceIDDDCsRequest) (*PutRedfishV1SFSSInstanceIDDDCs200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PutRedfishV1SFSSInstanceIDDDCs200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PutRedfishV1SFSSInstanceIDDDCs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/DDCs"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.putRedfishV1SFSSInstanceIDDDCsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutRedfishV1SFSSInstanceIDDDCsIdRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	id2 int32
	id *string
	putRedfishV1SFSSInstanceIDDDCsIdRequest *PutRedfishV1SFSSInstanceIDDDCsIdRequest
}

// The DDC ID to be updated should be given.
func (r ApiPutRedfishV1SFSSInstanceIDDDCsIdRequest) Id(id string) ApiPutRedfishV1SFSSInstanceIDDDCsIdRequest {
	r.id = &id
	return r
}

// 
func (r ApiPutRedfishV1SFSSInstanceIDDDCsIdRequest) PutRedfishV1SFSSInstanceIDDDCsIdRequest(putRedfishV1SFSSInstanceIDDDCsIdRequest PutRedfishV1SFSSInstanceIDDDCsIdRequest) ApiPutRedfishV1SFSSInstanceIDDDCsIdRequest {
	r.putRedfishV1SFSSInstanceIDDDCsIdRequest = &putRedfishV1SFSSInstanceIDDDCsIdRequest
	return r
}

func (r ApiPutRedfishV1SFSSInstanceIDDDCsIdRequest) Execute() (*PutRedfishV1SFSSInstanceIDDDCsId200Response, *http.Response, error) {
	return r.ApiService.PutRedfishV1SFSSInstanceIDDDCsIdExecute(r)
}

/*
PutRedfishV1SFSSInstanceIDDDCsId Update DDC

This API updates the direct discovery controller (DDC) information in the specified CDC instance based on the DDC identifier.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param id2
 @return ApiPutRedfishV1SFSSInstanceIDDDCsIdRequest
*/
func (a *DefaultAPIService) PutRedfishV1SFSSInstanceIDDDCsId(ctx context.Context, instanceID int32, id2 int32) ApiPutRedfishV1SFSSInstanceIDDDCsIdRequest {
	return ApiPutRedfishV1SFSSInstanceIDDDCsIdRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		id2: id2,
	}
}

// Execute executes the request
//  @return PutRedfishV1SFSSInstanceIDDDCsId200Response
func (a *DefaultAPIService) PutRedfishV1SFSSInstanceIDDDCsIdExecute(r ApiPutRedfishV1SFSSInstanceIDDDCsIdRequest) (*PutRedfishV1SFSSInstanceIDDDCsId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PutRedfishV1SFSSInstanceIDDDCsId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PutRedfishV1SFSSInstanceIDDDCsId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/DDCs({Id})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id2, "id2")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Id", r.id, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.putRedfishV1SFSSInstanceIDDDCsIdRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	zoneAliasId string
	zoneAliasMemberId string
	putRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigRequest *PutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigRequest
}

func (r ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest) PutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigRequest(putRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigRequest PutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigRequest) ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest {
	r.putRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigRequest = &putRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigRequest
	return r
}

func (r ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest) Execute() (*PutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfig200Response, *http.Response, error) {
	return r.ApiService.PutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigExecute(r)
}

/*
PutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfig Update zone alias member

This API updates zone alias member information in the specified CDC instance based on the zone alias member identifier. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param zoneAliasId
 @param zoneAliasMemberId
 @return ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest
*/
func (a *DefaultAPIService) PutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfig(ctx context.Context, instanceID int32, zoneAliasId string, zoneAliasMemberId string) ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest {
	return ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		zoneAliasId: zoneAliasId,
		zoneAliasMemberId: zoneAliasMemberId,
	}
}

// Execute executes the request
//  @return PutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfig200Response
func (a *DefaultAPIService) PutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigExecute(r ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfigRequest) (*PutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfig200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfig200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PutRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMemberssourceconfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneAlias({ZoneAliasId})/ZoneAliasMembers({ZoneAliasMemberId})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneAliasId"+"}", url.PathEscape(parameterValueToString(r.zoneAliasId, "zoneAliasId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneAliasMemberId"+"}", url.PathEscape(parameterValueToString(r.zoneAliasMemberId, "zoneAliasMemberId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.zoneAliasId) < 1 {
		return localVarReturnValue, nil, reportError("zoneAliasId must have at least 1 elements")
	}
	if strlen(r.zoneAliasMemberId) < 1 {
		return localVarReturnValue, nil, reportError("zoneAliasMemberId must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.putRedfishV1SFSSInstanceZoneDBsConfigZoneAliasConfigDhanaSampleAliasZoneAliasMembersSourceConfigRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	iD2 string
	iD *string
	putRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest *PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest
}

// The ID of Zonegroup should be passed for PUT.
func (r ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest) ID(iD string) ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest {
	r.iD = &iD
	return r
}

// The URL should looks like: http://IPAddress//redfish/v1/SFSS/&lt;Instance#&gt;/ZoneDBs(&#39;config&#39;)/ZoneGroups(&#39;ID&#39;)
func (r ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest) PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest(putRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest) ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest {
	r.putRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest = &putRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest
	return r
}

func (r ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest) Execute() (*PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroups200Response, *http.Response, error) {
	return r.ApiService.PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsExecute(r)
}

/*
PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroups Activate (or deactivate) zone group

This API activates or deactivates a zone group in the specified CDC instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param iD2
 @return ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest
*/
func (a *DefaultAPIService) PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroups(ctx context.Context, instanceID int32, iD2 string) ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest {
	return ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		iD2: iD2,
	}
}

// Execute executes the request
//  @return PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroups200Response
func (a *DefaultAPIService) PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsExecute(r ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest) (*PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroups200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroups200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneGroups({ID})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ID"+"}", url.PathEscape(parameterValueToString(r.iD2, "iD2")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return localVarReturnValue, nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.iD2) < 1 {
		return localVarReturnValue, nil, reportError("iD2 must have at least 1 elements")
	}

	if r.iD != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "('ID')", r.iD, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.putRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	instanceID int32
	zoneGroupId string
	zoneID string
	zoneMemberID2 string
	zoneMemberID *string
	putRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest *PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest
}

// The Zone Member ID to be updated.
func (r ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest) ZoneMemberID(zoneMemberID string) ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest {
	r.zoneMemberID = &zoneMemberID
	return r
}

func (r ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest) PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest(putRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest) ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest {
	r.putRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest = &putRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest
	return r
}

func (r ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersExecute(r)
}

/*
PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers Update a zone member

This API updates the zone member information based on the specified CDC instance, zone group, zone, and zone member identifiers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceID
 @param zoneGroupId
 @param zoneID
 @param zoneMemberID2
 @return ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest
*/
func (a *DefaultAPIService) PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers(ctx context.Context, instanceID int32, zoneGroupId string, zoneID string, zoneMemberID2 string) ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest {
	return ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest{
		ApiService: a,
		ctx: ctx,
		instanceID: instanceID,
		zoneGroupId: zoneGroupId,
		zoneID: zoneID,
		zoneMemberID2: zoneMemberID2,
	}
}

// Execute executes the request
func (a *DefaultAPIService) PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersExecute(r ApiPutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PutRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembers")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/redfish/v1/SFSS/{InstanceID}/ZoneDBs('config')/ZoneGroups({ZoneGroupId})/Zones({ZoneID})/ZoneMembers({ZoneMemberID})"
	localVarPath = strings.Replace(localVarPath, "{"+"InstanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneGroupId"+"}", url.PathEscape(parameterValueToString(r.zoneGroupId, "zoneGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneID"+"}", url.PathEscape(parameterValueToString(r.zoneID, "zoneID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ZoneMemberID"+"}", url.PathEscape(parameterValueToString(r.zoneMemberID2, "zoneMemberID2")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceID < 1 {
		return nil, reportError("instanceID must be greater than 1")
	}
	if r.instanceID > 32 {
		return nil, reportError("instanceID must be less than 32")
	}
	if strlen(r.zoneGroupId) < 1 {
		return nil, reportError("zoneGroupId must have at least 1 elements")
	}
	if strlen(r.zoneID) < 1 {
		return nil, reportError("zoneID must have at least 1 elements")
	}
	if strlen(r.zoneMemberID2) < 1 {
		return nil, reportError("zoneMemberID2 must have at least 1 elements")
	}

	if r.zoneMemberID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "('ZoneMemberID')", r.zoneMemberID, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.putRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRedfishV1SFSSInstanceZoneDBsConfigZoneGroupsZoneGroupIdZonesZoneIDZoneMembersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
