/*
RestServices

REST APIs used for managing CDC instances are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssrest

import (
	"encoding/json"
)

// checks if the PutRedfishV1SFSSInstanceIDDDCsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutRedfishV1SFSSInstanceIDDDCsRequest{}

// PutRedfishV1SFSSInstanceIDDDCsRequest struct for PutRedfishV1SFSSInstanceIDDDCsRequest
type PutRedfishV1SFSSInstanceIDDDCsRequest struct {
	DDCs []PutRedfishV1SFSSInstanceIDDDCsRequestDDCsInner `json:"DDCs,omitempty"`
}

// NewPutRedfishV1SFSSInstanceIDDDCsRequest instantiates a new PutRedfishV1SFSSInstanceIDDDCsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutRedfishV1SFSSInstanceIDDDCsRequest() *PutRedfishV1SFSSInstanceIDDDCsRequest {
	this := PutRedfishV1SFSSInstanceIDDDCsRequest{}
	return &this
}

// NewPutRedfishV1SFSSInstanceIDDDCsRequestWithDefaults instantiates a new PutRedfishV1SFSSInstanceIDDDCsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutRedfishV1SFSSInstanceIDDDCsRequestWithDefaults() *PutRedfishV1SFSSInstanceIDDDCsRequest {
	this := PutRedfishV1SFSSInstanceIDDDCsRequest{}
	return &this
}

// GetDDCs returns the DDCs field value if set, zero value otherwise.
func (o *PutRedfishV1SFSSInstanceIDDDCsRequest) GetDDCs() []PutRedfishV1SFSSInstanceIDDDCsRequestDDCsInner {
	if o == nil || IsNil(o.DDCs) {
		var ret []PutRedfishV1SFSSInstanceIDDDCsRequestDDCsInner
		return ret
	}
	return o.DDCs
}

// GetDDCsOk returns a tuple with the DDCs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSInstanceIDDDCsRequest) GetDDCsOk() ([]PutRedfishV1SFSSInstanceIDDDCsRequestDDCsInner, bool) {
	if o == nil || IsNil(o.DDCs) {
		return nil, false
	}
	return o.DDCs, true
}

// HasDDCs returns a boolean if a field has been set.
func (o *PutRedfishV1SFSSInstanceIDDDCsRequest) HasDDCs() bool {
	if o != nil && !IsNil(o.DDCs) {
		return true
	}

	return false
}

// SetDDCs gets a reference to the given []PutRedfishV1SFSSInstanceIDDDCsRequestDDCsInner and assigns it to the DDCs field.
func (o *PutRedfishV1SFSSInstanceIDDDCsRequest) SetDDCs(v []PutRedfishV1SFSSInstanceIDDDCsRequestDDCsInner) {
	o.DDCs = v
}

func (o PutRedfishV1SFSSInstanceIDDDCsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutRedfishV1SFSSInstanceIDDDCsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DDCs) {
		toSerialize["DDCs"] = o.DDCs
	}
	return toSerialize, nil
}

type NullablePutRedfishV1SFSSInstanceIDDDCsRequest struct {
	value *PutRedfishV1SFSSInstanceIDDDCsRequest
	isSet bool
}

func (v NullablePutRedfishV1SFSSInstanceIDDDCsRequest) Get() *PutRedfishV1SFSSInstanceIDDDCsRequest {
	return v.value
}

func (v *NullablePutRedfishV1SFSSInstanceIDDDCsRequest) Set(val *PutRedfishV1SFSSInstanceIDDDCsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutRedfishV1SFSSInstanceIDDDCsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutRedfishV1SFSSInstanceIDDDCsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutRedfishV1SFSSInstanceIDDDCsRequest(val *PutRedfishV1SFSSInstanceIDDDCsRequest) *NullablePutRedfishV1SFSSInstanceIDDDCsRequest {
	return &NullablePutRedfishV1SFSSInstanceIDDDCsRequest{value: val, isSet: true}
}

func (v NullablePutRedfishV1SFSSInstanceIDDDCsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutRedfishV1SFSSInstanceIDDDCsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


