/*
RestServices

REST APIs used for managing CDC instances are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssrest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ZoneGroupPOST type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneGroupPOST{}

// ZoneGroupPOST This model configures a zone group.
type ZoneGroupPOST struct {
	ZoneDBType string `json:"ZoneDBType"`
	ZoneGroupName string `json:"ZoneGroupName"`
}

type _ZoneGroupPOST ZoneGroupPOST

// NewZoneGroupPOST instantiates a new ZoneGroupPOST object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneGroupPOST(zoneDBType string, zoneGroupName string) *ZoneGroupPOST {
	this := ZoneGroupPOST{}
	this.ZoneDBType = zoneDBType
	this.ZoneGroupName = zoneGroupName
	return &this
}

// NewZoneGroupPOSTWithDefaults instantiates a new ZoneGroupPOST object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneGroupPOSTWithDefaults() *ZoneGroupPOST {
	this := ZoneGroupPOST{}
	return &this
}

// GetZoneDBType returns the ZoneDBType field value
func (o *ZoneGroupPOST) GetZoneDBType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneDBType
}

// GetZoneDBTypeOk returns a tuple with the ZoneDBType field value
// and a boolean to check if the value has been set.
func (o *ZoneGroupPOST) GetZoneDBTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneDBType, true
}

// SetZoneDBType sets field value
func (o *ZoneGroupPOST) SetZoneDBType(v string) {
	o.ZoneDBType = v
}

// GetZoneGroupName returns the ZoneGroupName field value
func (o *ZoneGroupPOST) GetZoneGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneGroupName
}

// GetZoneGroupNameOk returns a tuple with the ZoneGroupName field value
// and a boolean to check if the value has been set.
func (o *ZoneGroupPOST) GetZoneGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneGroupName, true
}

// SetZoneGroupName sets field value
func (o *ZoneGroupPOST) SetZoneGroupName(v string) {
	o.ZoneGroupName = v
}

func (o ZoneGroupPOST) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneGroupPOST) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ZoneDBType"] = o.ZoneDBType
	toSerialize["ZoneGroupName"] = o.ZoneGroupName
	return toSerialize, nil
}

func (o *ZoneGroupPOST) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ZoneDBType",
		"ZoneGroupName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varZoneGroupPOST := _ZoneGroupPOST{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varZoneGroupPOST)

	if err != nil {
		return err
	}

	*o = ZoneGroupPOST(varZoneGroupPOST)

	return err
}

type NullableZoneGroupPOST struct {
	value *ZoneGroupPOST
	isSet bool
}

func (v NullableZoneGroupPOST) Get() *ZoneGroupPOST {
	return v.value
}

func (v *NullableZoneGroupPOST) Set(val *ZoneGroupPOST) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneGroupPOST) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneGroupPOST) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneGroupPOST(val *ZoneGroupPOST) *NullableZoneGroupPOST {
	return &NullableZoneGroupPOST{value: val, isSet: true}
}

func (v NullableZoneGroupPOST) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneGroupPOST) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


