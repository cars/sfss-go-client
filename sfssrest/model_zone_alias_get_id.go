/*
RestServices

REST APIs used for managing CDC instances are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssrest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ZoneAliasGETID type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneAliasGETID{}

// ZoneAliasGETID This model lists the zone alias information based on the specified zone alias ID.
type ZoneAliasGETID struct {
	// Unique zone alias identifier 
	ZoneAliasId string `json:"ZoneAliasId"`
	// Friendly name for the zone alias
	ZoneAliasName string `json:"ZoneAliasName"`
	// Number of zone members that are part of the zone alias
	NumberZoneMembers string `json:"NumberZoneMembers"`
	OdataId string `json:"@odata.id"`
	OdataType string `json:"@odata.type"`
	OdataContext string `json:"@odata.context"`
}

type _ZoneAliasGETID ZoneAliasGETID

// NewZoneAliasGETID instantiates a new ZoneAliasGETID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneAliasGETID(zoneAliasId string, zoneAliasName string, numberZoneMembers string, odataId string, odataType string, odataContext string) *ZoneAliasGETID {
	this := ZoneAliasGETID{}
	this.ZoneAliasId = zoneAliasId
	this.ZoneAliasName = zoneAliasName
	this.NumberZoneMembers = numberZoneMembers
	this.OdataId = odataId
	this.OdataType = odataType
	this.OdataContext = odataContext
	return &this
}

// NewZoneAliasGETIDWithDefaults instantiates a new ZoneAliasGETID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneAliasGETIDWithDefaults() *ZoneAliasGETID {
	this := ZoneAliasGETID{}
	return &this
}

// GetZoneAliasId returns the ZoneAliasId field value
func (o *ZoneAliasGETID) GetZoneAliasId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneAliasId
}

// GetZoneAliasIdOk returns a tuple with the ZoneAliasId field value
// and a boolean to check if the value has been set.
func (o *ZoneAliasGETID) GetZoneAliasIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneAliasId, true
}

// SetZoneAliasId sets field value
func (o *ZoneAliasGETID) SetZoneAliasId(v string) {
	o.ZoneAliasId = v
}

// GetZoneAliasName returns the ZoneAliasName field value
func (o *ZoneAliasGETID) GetZoneAliasName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneAliasName
}

// GetZoneAliasNameOk returns a tuple with the ZoneAliasName field value
// and a boolean to check if the value has been set.
func (o *ZoneAliasGETID) GetZoneAliasNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneAliasName, true
}

// SetZoneAliasName sets field value
func (o *ZoneAliasGETID) SetZoneAliasName(v string) {
	o.ZoneAliasName = v
}

// GetNumberZoneMembers returns the NumberZoneMembers field value
func (o *ZoneAliasGETID) GetNumberZoneMembers() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NumberZoneMembers
}

// GetNumberZoneMembersOk returns a tuple with the NumberZoneMembers field value
// and a boolean to check if the value has been set.
func (o *ZoneAliasGETID) GetNumberZoneMembersOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberZoneMembers, true
}

// SetNumberZoneMembers sets field value
func (o *ZoneAliasGETID) SetNumberZoneMembers(v string) {
	o.NumberZoneMembers = v
}

// GetOdataId returns the OdataId field value
func (o *ZoneAliasGETID) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *ZoneAliasGETID) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *ZoneAliasGETID) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataType returns the OdataType field value
func (o *ZoneAliasGETID) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *ZoneAliasGETID) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *ZoneAliasGETID) SetOdataType(v string) {
	o.OdataType = v
}

// GetOdataContext returns the OdataContext field value
func (o *ZoneAliasGETID) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *ZoneAliasGETID) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *ZoneAliasGETID) SetOdataContext(v string) {
	o.OdataContext = v
}

func (o ZoneAliasGETID) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneAliasGETID) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ZoneAliasId"] = o.ZoneAliasId
	toSerialize["ZoneAliasName"] = o.ZoneAliasName
	toSerialize["NumberZoneMembers"] = o.NumberZoneMembers
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.type"] = o.OdataType
	toSerialize["@odata.context"] = o.OdataContext
	return toSerialize, nil
}

func (o *ZoneAliasGETID) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ZoneAliasId",
		"ZoneAliasName",
		"NumberZoneMembers",
		"@odata.id",
		"@odata.type",
		"@odata.context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varZoneAliasGETID := _ZoneAliasGETID{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varZoneAliasGETID)

	if err != nil {
		return err
	}

	*o = ZoneAliasGETID(varZoneAliasGETID)

	return err
}

type NullableZoneAliasGETID struct {
	value *ZoneAliasGETID
	isSet bool
}

func (v NullableZoneAliasGETID) Get() *ZoneAliasGETID {
	return v.value
}

func (v *NullableZoneAliasGETID) Set(val *ZoneAliasGETID) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneAliasGETID) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneAliasGETID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneAliasGETID(val *ZoneAliasGETID) *NullableZoneAliasGETID {
	return &NullableZoneAliasGETID{value: val, isSet: true}
}

func (v NullableZoneAliasGETID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneAliasGETID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


