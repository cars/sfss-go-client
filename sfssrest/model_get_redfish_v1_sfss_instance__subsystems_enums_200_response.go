/*
RestServices

REST APIs used for managing CDC instances are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssrest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetRedfishV1SFSSInstanceSubsystemsEnums200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRedfishV1SFSSInstanceSubsystemsEnums200Response{}

// GetRedfishV1SFSSInstanceSubsystemsEnums200Response 
type GetRedfishV1SFSSInstanceSubsystemsEnums200Response struct {
	// IP address family; possible values include IPv4 and IPv6
	TransportAddressFamily []string `json:"TransportAddressFamily"`
	// Entity Key Type; possible values are Unknown, Port, and TRADDR
	EKType []string `json:"EKType"`
	// Connection Failure Reason - Possible Values are NONE, Peer Closure,Dial Failure, KATO
	FailureReason []string `json:"FailureReason"`
	// Type of endpoint registration; possible values include Implicit, Explicit, Pull, and Manual
	RegistrationType []string `json:"RegistrationType"`
	// Status of the TCP connection between the subsystem and the CDC instance; possible values include Online and Offline
	ConnectionStatus []string `json:"ConnectionStatus"`
	// Possible values include Reserved, Discovery Service, and NVM Subsystem
	SubType []string `json:"SubType"`
	// Transport Request Type (TREQ); possible values include Secure channel not specified, Secure channel required, and Secure channel not required
	TREQ []string `json:"TREQ"`
	// Supported transport types that can be used for communication with the controller; possible values are TCP, RoCE, FC
	TransportType []string `json:"TransportType"`
	// NVMe Transport Service Address SubType
	TSAS []string `json:"TSAS"`
}

type _GetRedfishV1SFSSInstanceSubsystemsEnums200Response GetRedfishV1SFSSInstanceSubsystemsEnums200Response

// NewGetRedfishV1SFSSInstanceSubsystemsEnums200Response instantiates a new GetRedfishV1SFSSInstanceSubsystemsEnums200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRedfishV1SFSSInstanceSubsystemsEnums200Response(transportAddressFamily []string, eKType []string, failureReason []string, registrationType []string, connectionStatus []string, subType []string, tREQ []string, transportType []string, tSAS []string) *GetRedfishV1SFSSInstanceSubsystemsEnums200Response {
	this := GetRedfishV1SFSSInstanceSubsystemsEnums200Response{}
	this.TransportAddressFamily = transportAddressFamily
	this.EKType = eKType
	this.FailureReason = failureReason
	this.RegistrationType = registrationType
	this.ConnectionStatus = connectionStatus
	this.SubType = subType
	this.TREQ = tREQ
	this.TransportType = transportType
	this.TSAS = tSAS
	return &this
}

// NewGetRedfishV1SFSSInstanceSubsystemsEnums200ResponseWithDefaults instantiates a new GetRedfishV1SFSSInstanceSubsystemsEnums200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRedfishV1SFSSInstanceSubsystemsEnums200ResponseWithDefaults() *GetRedfishV1SFSSInstanceSubsystemsEnums200Response {
	this := GetRedfishV1SFSSInstanceSubsystemsEnums200Response{}
	return &this
}

// GetTransportAddressFamily returns the TransportAddressFamily field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetTransportAddressFamily() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TransportAddressFamily
}

// GetTransportAddressFamilyOk returns a tuple with the TransportAddressFamily field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetTransportAddressFamilyOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransportAddressFamily, true
}

// SetTransportAddressFamily sets field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) SetTransportAddressFamily(v []string) {
	o.TransportAddressFamily = v
}

// GetEKType returns the EKType field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetEKType() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EKType
}

// GetEKTypeOk returns a tuple with the EKType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetEKTypeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EKType, true
}

// SetEKType sets field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) SetEKType(v []string) {
	o.EKType = v
}

// GetFailureReason returns the FailureReason field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetFailureReason() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FailureReason
}

// GetFailureReasonOk returns a tuple with the FailureReason field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetFailureReasonOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailureReason, true
}

// SetFailureReason sets field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) SetFailureReason(v []string) {
	o.FailureReason = v
}

// GetRegistrationType returns the RegistrationType field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetRegistrationType() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RegistrationType
}

// GetRegistrationTypeOk returns a tuple with the RegistrationType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetRegistrationTypeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegistrationType, true
}

// SetRegistrationType sets field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) SetRegistrationType(v []string) {
	o.RegistrationType = v
}

// GetConnectionStatus returns the ConnectionStatus field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetConnectionStatus() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetConnectionStatusOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionStatus, true
}

// SetConnectionStatus sets field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) SetConnectionStatus(v []string) {
	o.ConnectionStatus = v
}

// GetSubType returns the SubType field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetSubType() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetSubTypeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubType, true
}

// SetSubType sets field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) SetSubType(v []string) {
	o.SubType = v
}

// GetTREQ returns the TREQ field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetTREQ() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TREQ
}

// GetTREQOk returns a tuple with the TREQ field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetTREQOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TREQ, true
}

// SetTREQ sets field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) SetTREQ(v []string) {
	o.TREQ = v
}

// GetTransportType returns the TransportType field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetTransportType() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TransportType
}

// GetTransportTypeOk returns a tuple with the TransportType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetTransportTypeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransportType, true
}

// SetTransportType sets field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) SetTransportType(v []string) {
	o.TransportType = v
}

// GetTSAS returns the TSAS field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetTSAS() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TSAS
}

// GetTSASOk returns a tuple with the TSAS field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) GetTSASOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TSAS, true
}

// SetTSAS sets field value
func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) SetTSAS(v []string) {
	o.TSAS = v
}

func (o GetRedfishV1SFSSInstanceSubsystemsEnums200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRedfishV1SFSSInstanceSubsystemsEnums200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["TransportAddressFamily"] = o.TransportAddressFamily
	toSerialize["EKType"] = o.EKType
	toSerialize["FailureReason"] = o.FailureReason
	toSerialize["RegistrationType"] = o.RegistrationType
	toSerialize["ConnectionStatus"] = o.ConnectionStatus
	toSerialize["SubType"] = o.SubType
	toSerialize["TREQ"] = o.TREQ
	toSerialize["TransportType"] = o.TransportType
	toSerialize["TSAS"] = o.TSAS
	return toSerialize, nil
}

func (o *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"TransportAddressFamily",
		"EKType",
		"FailureReason",
		"RegistrationType",
		"ConnectionStatus",
		"SubType",
		"TREQ",
		"TransportType",
		"TSAS",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRedfishV1SFSSInstanceSubsystemsEnums200Response := _GetRedfishV1SFSSInstanceSubsystemsEnums200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRedfishV1SFSSInstanceSubsystemsEnums200Response)

	if err != nil {
		return err
	}

	*o = GetRedfishV1SFSSInstanceSubsystemsEnums200Response(varGetRedfishV1SFSSInstanceSubsystemsEnums200Response)

	return err
}

type NullableGetRedfishV1SFSSInstanceSubsystemsEnums200Response struct {
	value *GetRedfishV1SFSSInstanceSubsystemsEnums200Response
	isSet bool
}

func (v NullableGetRedfishV1SFSSInstanceSubsystemsEnums200Response) Get() *GetRedfishV1SFSSInstanceSubsystemsEnums200Response {
	return v.value
}

func (v *NullableGetRedfishV1SFSSInstanceSubsystemsEnums200Response) Set(val *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRedfishV1SFSSInstanceSubsystemsEnums200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRedfishV1SFSSInstanceSubsystemsEnums200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRedfishV1SFSSInstanceSubsystemsEnums200Response(val *GetRedfishV1SFSSInstanceSubsystemsEnums200Response) *NullableGetRedfishV1SFSSInstanceSubsystemsEnums200Response {
	return &NullableGetRedfishV1SFSSInstanceSubsystemsEnums200Response{value: val, isSet: true}
}

func (v NullableGetRedfishV1SFSSInstanceSubsystemsEnums200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRedfishV1SFSSInstanceSubsystemsEnums200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


