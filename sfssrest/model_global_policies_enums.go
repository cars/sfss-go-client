/*
RestServices

REST APIs used for managing CDC instances are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssrest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GlobalPoliciesENUMS type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalPoliciesENUMS{}

// GlobalPoliciesENUMS This model lists the supported enumerations for the global policy configuration.
type GlobalPoliciesENUMS struct {
	// Global zoning policy that allows all hosts to communicate with all subsystems; disabled by default
	ZoningPolicy []map[string]interface{} `json:"ZoningPolicy"`
	// Timeout value to remove endpoints (hosts or subsystems) that have lost connection with the CDC 
	NameServerEntityPurgeTOV []map[string]interface{} `json:"NameServerEntityPurgeTOV"`
}

type _GlobalPoliciesENUMS GlobalPoliciesENUMS

// NewGlobalPoliciesENUMS instantiates a new GlobalPoliciesENUMS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalPoliciesENUMS(zoningPolicy []map[string]interface{}, nameServerEntityPurgeTOV []map[string]interface{}) *GlobalPoliciesENUMS {
	this := GlobalPoliciesENUMS{}
	this.ZoningPolicy = zoningPolicy
	this.NameServerEntityPurgeTOV = nameServerEntityPurgeTOV
	return &this
}

// NewGlobalPoliciesENUMSWithDefaults instantiates a new GlobalPoliciesENUMS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalPoliciesENUMSWithDefaults() *GlobalPoliciesENUMS {
	this := GlobalPoliciesENUMS{}
	return &this
}

// GetZoningPolicy returns the ZoningPolicy field value
func (o *GlobalPoliciesENUMS) GetZoningPolicy() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.ZoningPolicy
}

// GetZoningPolicyOk returns a tuple with the ZoningPolicy field value
// and a boolean to check if the value has been set.
func (o *GlobalPoliciesENUMS) GetZoningPolicyOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZoningPolicy, true
}

// SetZoningPolicy sets field value
func (o *GlobalPoliciesENUMS) SetZoningPolicy(v []map[string]interface{}) {
	o.ZoningPolicy = v
}

// GetNameServerEntityPurgeTOV returns the NameServerEntityPurgeTOV field value
func (o *GlobalPoliciesENUMS) GetNameServerEntityPurgeTOV() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.NameServerEntityPurgeTOV
}

// GetNameServerEntityPurgeTOVOk returns a tuple with the NameServerEntityPurgeTOV field value
// and a boolean to check if the value has been set.
func (o *GlobalPoliciesENUMS) GetNameServerEntityPurgeTOVOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.NameServerEntityPurgeTOV, true
}

// SetNameServerEntityPurgeTOV sets field value
func (o *GlobalPoliciesENUMS) SetNameServerEntityPurgeTOV(v []map[string]interface{}) {
	o.NameServerEntityPurgeTOV = v
}

func (o GlobalPoliciesENUMS) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalPoliciesENUMS) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ZoningPolicy"] = o.ZoningPolicy
	toSerialize["NameServerEntityPurgeTOV"] = o.NameServerEntityPurgeTOV
	return toSerialize, nil
}

func (o *GlobalPoliciesENUMS) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ZoningPolicy",
		"NameServerEntityPurgeTOV",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGlobalPoliciesENUMS := _GlobalPoliciesENUMS{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGlobalPoliciesENUMS)

	if err != nil {
		return err
	}

	*o = GlobalPoliciesENUMS(varGlobalPoliciesENUMS)

	return err
}

type NullableGlobalPoliciesENUMS struct {
	value *GlobalPoliciesENUMS
	isSet bool
}

func (v NullableGlobalPoliciesENUMS) Get() *GlobalPoliciesENUMS {
	return v.value
}

func (v *NullableGlobalPoliciesENUMS) Set(val *GlobalPoliciesENUMS) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalPoliciesENUMS) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalPoliciesENUMS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalPoliciesENUMS(val *GlobalPoliciesENUMS) *NullableGlobalPoliciesENUMS {
	return &NullableGlobalPoliciesENUMS{value: val, isSet: true}
}

func (v NullableGlobalPoliciesENUMS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalPoliciesENUMS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


