/*
RestServices

REST APIs used for managing CDC instances are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssrest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ZoneConfigDBGET type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneConfigDBGET{}

// ZoneConfigDBGET This model lists the zones present in the zoning configuration database.
type ZoneConfigDBGET struct {
	NumberZoneGroups float32 `json:"NumberZoneGroups"`
	// Set of zone groups
	ZoneGroups []map[string]interface{} `json:"ZoneGroups"`
	OdataId string `json:"@odata.id"`
	OdataType string `json:"@odata.type"`
	OdataContext string `json:"@odata.context"`
}

type _ZoneConfigDBGET ZoneConfigDBGET

// NewZoneConfigDBGET instantiates a new ZoneConfigDBGET object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneConfigDBGET(numberZoneGroups float32, zoneGroups []map[string]interface{}, odataId string, odataType string, odataContext string) *ZoneConfigDBGET {
	this := ZoneConfigDBGET{}
	this.NumberZoneGroups = numberZoneGroups
	this.ZoneGroups = zoneGroups
	this.OdataId = odataId
	this.OdataType = odataType
	this.OdataContext = odataContext
	return &this
}

// NewZoneConfigDBGETWithDefaults instantiates a new ZoneConfigDBGET object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneConfigDBGETWithDefaults() *ZoneConfigDBGET {
	this := ZoneConfigDBGET{}
	return &this
}

// GetNumberZoneGroups returns the NumberZoneGroups field value
func (o *ZoneConfigDBGET) GetNumberZoneGroups() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NumberZoneGroups
}

// GetNumberZoneGroupsOk returns a tuple with the NumberZoneGroups field value
// and a boolean to check if the value has been set.
func (o *ZoneConfigDBGET) GetNumberZoneGroupsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberZoneGroups, true
}

// SetNumberZoneGroups sets field value
func (o *ZoneConfigDBGET) SetNumberZoneGroups(v float32) {
	o.NumberZoneGroups = v
}

// GetZoneGroups returns the ZoneGroups field value
func (o *ZoneConfigDBGET) GetZoneGroups() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.ZoneGroups
}

// GetZoneGroupsOk returns a tuple with the ZoneGroups field value
// and a boolean to check if the value has been set.
func (o *ZoneConfigDBGET) GetZoneGroupsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZoneGroups, true
}

// SetZoneGroups sets field value
func (o *ZoneConfigDBGET) SetZoneGroups(v []map[string]interface{}) {
	o.ZoneGroups = v
}

// GetOdataId returns the OdataId field value
func (o *ZoneConfigDBGET) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *ZoneConfigDBGET) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *ZoneConfigDBGET) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataType returns the OdataType field value
func (o *ZoneConfigDBGET) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *ZoneConfigDBGET) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *ZoneConfigDBGET) SetOdataType(v string) {
	o.OdataType = v
}

// GetOdataContext returns the OdataContext field value
func (o *ZoneConfigDBGET) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *ZoneConfigDBGET) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *ZoneConfigDBGET) SetOdataContext(v string) {
	o.OdataContext = v
}

func (o ZoneConfigDBGET) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneConfigDBGET) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["NumberZoneGroups"] = o.NumberZoneGroups
	toSerialize["ZoneGroups"] = o.ZoneGroups
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.type"] = o.OdataType
	toSerialize["@odata.context"] = o.OdataContext
	return toSerialize, nil
}

func (o *ZoneConfigDBGET) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"NumberZoneGroups",
		"ZoneGroups",
		"@odata.id",
		"@odata.type",
		"@odata.context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varZoneConfigDBGET := _ZoneConfigDBGET{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varZoneConfigDBGET)

	if err != nil {
		return err
	}

	*o = ZoneConfigDBGET(varZoneConfigDBGET)

	return err
}

type NullableZoneConfigDBGET struct {
	value *ZoneConfigDBGET
	isSet bool
}

func (v NullableZoneConfigDBGET) Get() *ZoneConfigDBGET {
	return v.value
}

func (v *NullableZoneConfigDBGET) Set(val *ZoneConfigDBGET) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneConfigDBGET) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneConfigDBGET) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneConfigDBGET(val *ZoneConfigDBGET) *NullableZoneConfigDBGET {
	return &NullableZoneConfigDBGET{value: val, isSet: true}
}

func (v NullableZoneConfigDBGET) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneConfigDBGET) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


