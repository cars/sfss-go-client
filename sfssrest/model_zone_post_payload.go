/*
RestServices

REST APIs used for managing CDC instances are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssrest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ZonePOSTPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZonePOSTPayload{}

// ZonePOSTPayload This model configures a zone.
type ZonePOSTPayload struct {
	ZoneName string `json:"ZoneName"`
}

type _ZonePOSTPayload ZonePOSTPayload

// NewZonePOSTPayload instantiates a new ZonePOSTPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZonePOSTPayload(zoneName string) *ZonePOSTPayload {
	this := ZonePOSTPayload{}
	this.ZoneName = zoneName
	return &this
}

// NewZonePOSTPayloadWithDefaults instantiates a new ZonePOSTPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZonePOSTPayloadWithDefaults() *ZonePOSTPayload {
	this := ZonePOSTPayload{}
	return &this
}

// GetZoneName returns the ZoneName field value
func (o *ZonePOSTPayload) GetZoneName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneName
}

// GetZoneNameOk returns a tuple with the ZoneName field value
// and a boolean to check if the value has been set.
func (o *ZonePOSTPayload) GetZoneNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneName, true
}

// SetZoneName sets field value
func (o *ZonePOSTPayload) SetZoneName(v string) {
	o.ZoneName = v
}

func (o ZonePOSTPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZonePOSTPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ZoneName"] = o.ZoneName
	return toSerialize, nil
}

func (o *ZonePOSTPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ZoneName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varZonePOSTPayload := _ZonePOSTPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varZonePOSTPayload)

	if err != nil {
		return err
	}

	*o = ZonePOSTPayload(varZonePOSTPayload)

	return err
}

type NullableZonePOSTPayload struct {
	value *ZonePOSTPayload
	isSet bool
}

func (v NullableZonePOSTPayload) Get() *ZonePOSTPayload {
	return v.value
}

func (v *NullableZonePOSTPayload) Set(val *ZonePOSTPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableZonePOSTPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableZonePOSTPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZonePOSTPayload(val *ZonePOSTPayload) *NullableZonePOSTPayload {
	return &NullableZonePOSTPayload{value: val, isSet: true}
}

func (v NullableZonePOSTPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZonePOSTPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


