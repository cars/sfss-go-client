/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GetRedfishV1SFSSAppGlobalSettings200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRedfishV1SFSSAppGlobalSettings200Response{}

// GetRedfishV1SFSSAppGlobalSettings200Response
type GetRedfishV1SFSSAppGlobalSettings200Response struct {
	// Hostname of the SFSS VM
	HostName string `json:"HostName"`
	// Reserved IPv4 subnet prefix for internal VM networking use; the default value is 172.18.x.x
	ReservedIPV4SubnetPrefix string `json:"ReservedIPV4SubnetPrefix"`
	// Reserved IPv6 subnet prefix for internal VM networking use; the default value is fd01::x
	ReservedIPV6SubnetPrefix string `json:"ReservedIPV6SubnetPrefix"`
	// Maximum transmission unit; range is from 1250 to 9000; default value is 1500
	StorageInterfaceMTU float32 `json:"StorageInterfaceMTU"`
	OdataId             string  `json:"@odata.id"`
	OdataType           string  `json:"@odata.type"`
	OdataContext        string  `json:"@odata.context"`
}

type _GetRedfishV1SFSSAppGlobalSettings200Response GetRedfishV1SFSSAppGlobalSettings200Response

// NewGetRedfishV1SFSSAppGlobalSettings200Response instantiates a new GetRedfishV1SFSSAppGlobalSettings200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRedfishV1SFSSAppGlobalSettings200Response(hostName string, reservedIPV4SubnetPrefix string, reservedIPV6SubnetPrefix string, storageInterfaceMTU float32, odataId string, odataType string, odataContext string) *GetRedfishV1SFSSAppGlobalSettings200Response {
	this := GetRedfishV1SFSSAppGlobalSettings200Response{}
	this.HostName = hostName
	this.ReservedIPV4SubnetPrefix = reservedIPV4SubnetPrefix
	this.ReservedIPV6SubnetPrefix = reservedIPV6SubnetPrefix
	this.StorageInterfaceMTU = storageInterfaceMTU
	this.OdataId = odataId
	this.OdataType = odataType
	this.OdataContext = odataContext
	return &this
}

// NewGetRedfishV1SFSSAppGlobalSettings200ResponseWithDefaults instantiates a new GetRedfishV1SFSSAppGlobalSettings200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRedfishV1SFSSAppGlobalSettings200ResponseWithDefaults() *GetRedfishV1SFSSAppGlobalSettings200Response {
	this := GetRedfishV1SFSSAppGlobalSettings200Response{}
	return &this
}

// GetHostName returns the HostName field value
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) GetHostName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) GetHostNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostName, true
}

// SetHostName sets field value
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) SetHostName(v string) {
	o.HostName = v
}

// GetReservedIPV4SubnetPrefix returns the ReservedIPV4SubnetPrefix field value
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) GetReservedIPV4SubnetPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReservedIPV4SubnetPrefix
}

// GetReservedIPV4SubnetPrefixOk returns a tuple with the ReservedIPV4SubnetPrefix field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) GetReservedIPV4SubnetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReservedIPV4SubnetPrefix, true
}

// SetReservedIPV4SubnetPrefix sets field value
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) SetReservedIPV4SubnetPrefix(v string) {
	o.ReservedIPV4SubnetPrefix = v
}

// GetReservedIPV6SubnetPrefix returns the ReservedIPV6SubnetPrefix field value
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) GetReservedIPV6SubnetPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReservedIPV6SubnetPrefix
}

// GetReservedIPV6SubnetPrefixOk returns a tuple with the ReservedIPV6SubnetPrefix field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) GetReservedIPV6SubnetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReservedIPV6SubnetPrefix, true
}

// SetReservedIPV6SubnetPrefix sets field value
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) SetReservedIPV6SubnetPrefix(v string) {
	o.ReservedIPV6SubnetPrefix = v
}

// GetStorageInterfaceMTU returns the StorageInterfaceMTU field value
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) GetStorageInterfaceMTU() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.StorageInterfaceMTU
}

// GetStorageInterfaceMTUOk returns a tuple with the StorageInterfaceMTU field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) GetStorageInterfaceMTUOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageInterfaceMTU, true
}

// SetStorageInterfaceMTU sets field value
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) SetStorageInterfaceMTU(v float32) {
	o.StorageInterfaceMTU = v
}

// GetOdataId returns the OdataId field value
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataType returns the OdataType field value
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) SetOdataType(v string) {
	o.OdataType = v
}

// GetOdataContext returns the OdataContext field value
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *GetRedfishV1SFSSAppGlobalSettings200Response) SetOdataContext(v string) {
	o.OdataContext = v
}

func (o GetRedfishV1SFSSAppGlobalSettings200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRedfishV1SFSSAppGlobalSettings200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["HostName"] = o.HostName
	toSerialize["ReservedIPV4SubnetPrefix"] = o.ReservedIPV4SubnetPrefix
	toSerialize["ReservedIPV6SubnetPrefix"] = o.ReservedIPV6SubnetPrefix
	toSerialize["StorageInterfaceMTU"] = o.StorageInterfaceMTU
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.type"] = o.OdataType
	toSerialize["@odata.context"] = o.OdataContext
	return toSerialize, nil
}

func (o *GetRedfishV1SFSSAppGlobalSettings200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"HostName",
		"ReservedIPV4SubnetPrefix",
		"ReservedIPV6SubnetPrefix",
		"StorageInterfaceMTU",
		"@odata.id",
		"@odata.type",
		"@odata.context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRedfishV1SFSSAppGlobalSettings200Response := _GetRedfishV1SFSSAppGlobalSettings200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRedfishV1SFSSAppGlobalSettings200Response)

	if err != nil {
		return err
	}

	*o = GetRedfishV1SFSSAppGlobalSettings200Response(varGetRedfishV1SFSSAppGlobalSettings200Response)

	return err
}

type NullableGetRedfishV1SFSSAppGlobalSettings200Response struct {
	value *GetRedfishV1SFSSAppGlobalSettings200Response
	isSet bool
}

func (v NullableGetRedfishV1SFSSAppGlobalSettings200Response) Get() *GetRedfishV1SFSSAppGlobalSettings200Response {
	return v.value
}

func (v *NullableGetRedfishV1SFSSAppGlobalSettings200Response) Set(val *GetRedfishV1SFSSAppGlobalSettings200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRedfishV1SFSSAppGlobalSettings200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRedfishV1SFSSAppGlobalSettings200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRedfishV1SFSSAppGlobalSettings200Response(val *GetRedfishV1SFSSAppGlobalSettings200Response) *NullableGetRedfishV1SFSSAppGlobalSettings200Response {
	return &NullableGetRedfishV1SFSSAppGlobalSettings200Response{value: val, isSet: true}
}

func (v NullableGetRedfishV1SFSSAppGlobalSettings200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRedfishV1SFSSAppGlobalSettings200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
