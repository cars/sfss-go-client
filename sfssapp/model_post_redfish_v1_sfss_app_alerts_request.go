/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PostRedfishV1SFSSAppAlertsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostRedfishV1SFSSAppAlertsRequest{}

// PostRedfishV1SFSSAppAlertsRequest
type PostRedfishV1SFSSAppAlertsRequest struct {
	// Protocol supported for alerts; possible value is redfish
	Protocol     string   `json:"Protocol"`
	Context      string   `json:"Context"`
	EventTypes   []string `json:"EventTypes"`
	CdcInstances []string `json:"CdcInstances"`
	HttpHeaders  []string `json:"HttpHeaders"`
	Destination  string   `json:"Destination"`
}

type _PostRedfishV1SFSSAppAlertsRequest PostRedfishV1SFSSAppAlertsRequest

// NewPostRedfishV1SFSSAppAlertsRequest instantiates a new PostRedfishV1SFSSAppAlertsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostRedfishV1SFSSAppAlertsRequest(protocol string, context string, eventTypes []string, cdcInstances []string, httpHeaders []string, destination string) *PostRedfishV1SFSSAppAlertsRequest {
	this := PostRedfishV1SFSSAppAlertsRequest{}
	this.Protocol = protocol
	this.Context = context
	this.EventTypes = eventTypes
	this.CdcInstances = cdcInstances
	this.HttpHeaders = httpHeaders
	this.Destination = destination
	return &this
}

// NewPostRedfishV1SFSSAppAlertsRequestWithDefaults instantiates a new PostRedfishV1SFSSAppAlertsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostRedfishV1SFSSAppAlertsRequestWithDefaults() *PostRedfishV1SFSSAppAlertsRequest {
	this := PostRedfishV1SFSSAppAlertsRequest{}
	return &this
}

// GetProtocol returns the Protocol field value
func (o *PostRedfishV1SFSSAppAlertsRequest) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *PostRedfishV1SFSSAppAlertsRequest) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *PostRedfishV1SFSSAppAlertsRequest) SetProtocol(v string) {
	o.Protocol = v
}

// GetContext returns the Context field value
func (o *PostRedfishV1SFSSAppAlertsRequest) GetContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *PostRedfishV1SFSSAppAlertsRequest) GetContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *PostRedfishV1SFSSAppAlertsRequest) SetContext(v string) {
	o.Context = v
}

// GetEventTypes returns the EventTypes field value
func (o *PostRedfishV1SFSSAppAlertsRequest) GetEventTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value
// and a boolean to check if the value has been set.
func (o *PostRedfishV1SFSSAppAlertsRequest) GetEventTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTypes, true
}

// SetEventTypes sets field value
func (o *PostRedfishV1SFSSAppAlertsRequest) SetEventTypes(v []string) {
	o.EventTypes = v
}

// GetCdcInstances returns the CdcInstances field value
func (o *PostRedfishV1SFSSAppAlertsRequest) GetCdcInstances() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CdcInstances
}

// GetCdcInstancesOk returns a tuple with the CdcInstances field value
// and a boolean to check if the value has been set.
func (o *PostRedfishV1SFSSAppAlertsRequest) GetCdcInstancesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CdcInstances, true
}

// SetCdcInstances sets field value
func (o *PostRedfishV1SFSSAppAlertsRequest) SetCdcInstances(v []string) {
	o.CdcInstances = v
}

// GetHttpHeaders returns the HttpHeaders field value
func (o *PostRedfishV1SFSSAppAlertsRequest) GetHttpHeaders() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.HttpHeaders
}

// GetHttpHeadersOk returns a tuple with the HttpHeaders field value
// and a boolean to check if the value has been set.
func (o *PostRedfishV1SFSSAppAlertsRequest) GetHttpHeadersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HttpHeaders, true
}

// SetHttpHeaders sets field value
func (o *PostRedfishV1SFSSAppAlertsRequest) SetHttpHeaders(v []string) {
	o.HttpHeaders = v
}

// GetDestination returns the Destination field value
func (o *PostRedfishV1SFSSAppAlertsRequest) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *PostRedfishV1SFSSAppAlertsRequest) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *PostRedfishV1SFSSAppAlertsRequest) SetDestination(v string) {
	o.Destination = v
}

func (o PostRedfishV1SFSSAppAlertsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostRedfishV1SFSSAppAlertsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Protocol"] = o.Protocol
	toSerialize["Context"] = o.Context
	toSerialize["EventTypes"] = o.EventTypes
	toSerialize["CdcInstances"] = o.CdcInstances
	toSerialize["HttpHeaders"] = o.HttpHeaders
	toSerialize["Destination"] = o.Destination
	return toSerialize, nil
}

func (o *PostRedfishV1SFSSAppAlertsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Protocol",
		"Context",
		"EventTypes",
		"CdcInstances",
		"HttpHeaders",
		"Destination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostRedfishV1SFSSAppAlertsRequest := _PostRedfishV1SFSSAppAlertsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostRedfishV1SFSSAppAlertsRequest)

	if err != nil {
		return err
	}

	*o = PostRedfishV1SFSSAppAlertsRequest(varPostRedfishV1SFSSAppAlertsRequest)

	return err
}

type NullablePostRedfishV1SFSSAppAlertsRequest struct {
	value *PostRedfishV1SFSSAppAlertsRequest
	isSet bool
}

func (v NullablePostRedfishV1SFSSAppAlertsRequest) Get() *PostRedfishV1SFSSAppAlertsRequest {
	return v.value
}

func (v *NullablePostRedfishV1SFSSAppAlertsRequest) Set(val *PostRedfishV1SFSSAppAlertsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostRedfishV1SFSSAppAlertsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostRedfishV1SFSSAppAlertsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostRedfishV1SFSSAppAlertsRequest(val *PostRedfishV1SFSSAppAlertsRequest) *NullablePostRedfishV1SFSSAppAlertsRequest {
	return &NullablePostRedfishV1SFSSAppAlertsRequest{value: val, isSet: true}
}

func (v NullablePostRedfishV1SFSSAppAlertsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostRedfishV1SFSSAppAlertsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
