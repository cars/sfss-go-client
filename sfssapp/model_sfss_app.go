/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"encoding/json"
)

// checks if the SFSSApp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SFSSApp{}

// SFSSApp This model lists the SFSS application details.
type SFSSApp struct {
	// Deployment model
	DeploymentModel *string `json:"DeploymentModel,omitempty"`
	// Version of the SFSS application
	Version *string `json:"Version,omitempty"`
	OdataId *string `json:"@odata.id,omitempty"`
	OdataType *string `json:"@odata.type,omitempty"`
	OdataContext *string `json:"@odata.context,omitempty"`
}

// NewSFSSApp instantiates a new SFSSApp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSFSSApp() *SFSSApp {
	this := SFSSApp{}
	return &this
}

// NewSFSSAppWithDefaults instantiates a new SFSSApp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSFSSAppWithDefaults() *SFSSApp {
	this := SFSSApp{}
	return &this
}

// GetDeploymentModel returns the DeploymentModel field value if set, zero value otherwise.
func (o *SFSSApp) GetDeploymentModel() string {
	if o == nil || IsNil(o.DeploymentModel) {
		var ret string
		return ret
	}
	return *o.DeploymentModel
}

// GetDeploymentModelOk returns a tuple with the DeploymentModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SFSSApp) GetDeploymentModelOk() (*string, bool) {
	if o == nil || IsNil(o.DeploymentModel) {
		return nil, false
	}
	return o.DeploymentModel, true
}

// HasDeploymentModel returns a boolean if a field has been set.
func (o *SFSSApp) HasDeploymentModel() bool {
	if o != nil && !IsNil(o.DeploymentModel) {
		return true
	}

	return false
}

// SetDeploymentModel gets a reference to the given string and assigns it to the DeploymentModel field.
func (o *SFSSApp) SetDeploymentModel(v string) {
	o.DeploymentModel = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SFSSApp) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SFSSApp) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SFSSApp) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *SFSSApp) SetVersion(v string) {
	o.Version = &v
}

// GetOdataId returns the OdataId field value if set, zero value otherwise.
func (o *SFSSApp) GetOdataId() string {
	if o == nil || IsNil(o.OdataId) {
		var ret string
		return ret
	}
	return *o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SFSSApp) GetOdataIdOk() (*string, bool) {
	if o == nil || IsNil(o.OdataId) {
		return nil, false
	}
	return o.OdataId, true
}

// HasOdataId returns a boolean if a field has been set.
func (o *SFSSApp) HasOdataId() bool {
	if o != nil && !IsNil(o.OdataId) {
		return true
	}

	return false
}

// SetOdataId gets a reference to the given string and assigns it to the OdataId field.
func (o *SFSSApp) SetOdataId(v string) {
	o.OdataId = &v
}

// GetOdataType returns the OdataType field value if set, zero value otherwise.
func (o *SFSSApp) GetOdataType() string {
	if o == nil || IsNil(o.OdataType) {
		var ret string
		return ret
	}
	return *o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SFSSApp) GetOdataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OdataType) {
		return nil, false
	}
	return o.OdataType, true
}

// HasOdataType returns a boolean if a field has been set.
func (o *SFSSApp) HasOdataType() bool {
	if o != nil && !IsNil(o.OdataType) {
		return true
	}

	return false
}

// SetOdataType gets a reference to the given string and assigns it to the OdataType field.
func (o *SFSSApp) SetOdataType(v string) {
	o.OdataType = &v
}

// GetOdataContext returns the OdataContext field value if set, zero value otherwise.
func (o *SFSSApp) GetOdataContext() string {
	if o == nil || IsNil(o.OdataContext) {
		var ret string
		return ret
	}
	return *o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SFSSApp) GetOdataContextOk() (*string, bool) {
	if o == nil || IsNil(o.OdataContext) {
		return nil, false
	}
	return o.OdataContext, true
}

// HasOdataContext returns a boolean if a field has been set.
func (o *SFSSApp) HasOdataContext() bool {
	if o != nil && !IsNil(o.OdataContext) {
		return true
	}

	return false
}

// SetOdataContext gets a reference to the given string and assigns it to the OdataContext field.
func (o *SFSSApp) SetOdataContext(v string) {
	o.OdataContext = &v
}

func (o SFSSApp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SFSSApp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeploymentModel) {
		toSerialize["DeploymentModel"] = o.DeploymentModel
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if !IsNil(o.OdataId) {
		toSerialize["@odata.id"] = o.OdataId
	}
	if !IsNil(o.OdataType) {
		toSerialize["@odata.type"] = o.OdataType
	}
	if !IsNil(o.OdataContext) {
		toSerialize["@odata.context"] = o.OdataContext
	}
	return toSerialize, nil
}

type NullableSFSSApp struct {
	value *SFSSApp
	isSet bool
}

func (v NullableSFSSApp) Get() *SFSSApp {
	return v.value
}

func (v *NullableSFSSApp) Set(val *SFSSApp) {
	v.value = val
	v.isSet = true
}

func (v NullableSFSSApp) IsSet() bool {
	return v.isSet
}

func (v *NullableSFSSApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSFSSApp(val *SFSSApp) *NullableSFSSApp {
	return &NullableSFSSApp{value: val, isSet: true}
}

func (v NullableSFSSApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSFSSApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


