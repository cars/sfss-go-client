/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetRedfishV1SFSSAppImages200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRedfishV1SFSSAppImages200Response{}

// GetRedfishV1SFSSAppImages200Response 
type GetRedfishV1SFSSAppImages200Response struct {
	// A set of SFSS images
	SFSSImages []GetRedfishV1SFSSAppBackups200ResponseBackupsInner `json:"SFSSImages"`
	// Number of SFSS images
	SFSSImagesodataCount float32 `json:"SFSSImages@odata.count"`
	OdataId string `json:"@odata.id"`
	OdataContext string `json:"@odata.context"`
	OdataType string `json:"@odata.type"`
}

type _GetRedfishV1SFSSAppImages200Response GetRedfishV1SFSSAppImages200Response

// NewGetRedfishV1SFSSAppImages200Response instantiates a new GetRedfishV1SFSSAppImages200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRedfishV1SFSSAppImages200Response(sFSSImages []GetRedfishV1SFSSAppBackups200ResponseBackupsInner, sFSSImagesodataCount float32, odataId string, odataContext string, odataType string) *GetRedfishV1SFSSAppImages200Response {
	this := GetRedfishV1SFSSAppImages200Response{}
	this.SFSSImages = sFSSImages
	this.SFSSImagesodataCount = sFSSImagesodataCount
	this.OdataId = odataId
	this.OdataContext = odataContext
	this.OdataType = odataType
	return &this
}

// NewGetRedfishV1SFSSAppImages200ResponseWithDefaults instantiates a new GetRedfishV1SFSSAppImages200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRedfishV1SFSSAppImages200ResponseWithDefaults() *GetRedfishV1SFSSAppImages200Response {
	this := GetRedfishV1SFSSAppImages200Response{}
	return &this
}

// GetSFSSImages returns the SFSSImages field value
func (o *GetRedfishV1SFSSAppImages200Response) GetSFSSImages() []GetRedfishV1SFSSAppBackups200ResponseBackupsInner {
	if o == nil {
		var ret []GetRedfishV1SFSSAppBackups200ResponseBackupsInner
		return ret
	}

	return o.SFSSImages
}

// GetSFSSImagesOk returns a tuple with the SFSSImages field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppImages200Response) GetSFSSImagesOk() ([]GetRedfishV1SFSSAppBackups200ResponseBackupsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.SFSSImages, true
}

// SetSFSSImages sets field value
func (o *GetRedfishV1SFSSAppImages200Response) SetSFSSImages(v []GetRedfishV1SFSSAppBackups200ResponseBackupsInner) {
	o.SFSSImages = v
}

// GetSFSSImagesodataCount returns the SFSSImagesodataCount field value
func (o *GetRedfishV1SFSSAppImages200Response) GetSFSSImagesodataCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SFSSImagesodataCount
}

// GetSFSSImagesodataCountOk returns a tuple with the SFSSImagesodataCount field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppImages200Response) GetSFSSImagesodataCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SFSSImagesodataCount, true
}

// SetSFSSImagesodataCount sets field value
func (o *GetRedfishV1SFSSAppImages200Response) SetSFSSImagesodataCount(v float32) {
	o.SFSSImagesodataCount = v
}

// GetOdataId returns the OdataId field value
func (o *GetRedfishV1SFSSAppImages200Response) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppImages200Response) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *GetRedfishV1SFSSAppImages200Response) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataContext returns the OdataContext field value
func (o *GetRedfishV1SFSSAppImages200Response) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppImages200Response) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *GetRedfishV1SFSSAppImages200Response) SetOdataContext(v string) {
	o.OdataContext = v
}

// GetOdataType returns the OdataType field value
func (o *GetRedfishV1SFSSAppImages200Response) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppImages200Response) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *GetRedfishV1SFSSAppImages200Response) SetOdataType(v string) {
	o.OdataType = v
}

func (o GetRedfishV1SFSSAppImages200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRedfishV1SFSSAppImages200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["SFSSImages"] = o.SFSSImages
	toSerialize["SFSSImages@odata.count"] = o.SFSSImagesodataCount
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.context"] = o.OdataContext
	toSerialize["@odata.type"] = o.OdataType
	return toSerialize, nil
}

func (o *GetRedfishV1SFSSAppImages200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"SFSSImages",
		"SFSSImages@odata.count",
		"@odata.id",
		"@odata.context",
		"@odata.type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRedfishV1SFSSAppImages200Response := _GetRedfishV1SFSSAppImages200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRedfishV1SFSSAppImages200Response)

	if err != nil {
		return err
	}

	*o = GetRedfishV1SFSSAppImages200Response(varGetRedfishV1SFSSAppImages200Response)

	return err
}

type NullableGetRedfishV1SFSSAppImages200Response struct {
	value *GetRedfishV1SFSSAppImages200Response
	isSet bool
}

func (v NullableGetRedfishV1SFSSAppImages200Response) Get() *GetRedfishV1SFSSAppImages200Response {
	return v.value
}

func (v *NullableGetRedfishV1SFSSAppImages200Response) Set(val *GetRedfishV1SFSSAppImages200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRedfishV1SFSSAppImages200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRedfishV1SFSSAppImages200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRedfishV1SFSSAppImages200Response(val *GetRedfishV1SFSSAppImages200Response) *NullableGetRedfishV1SFSSAppImages200Response {
	return &NullableGetRedfishV1SFSSAppImages200Response{value: val, isSet: true}
}

func (v NullableGetRedfishV1SFSSAppImages200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRedfishV1SFSSAppImages200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


