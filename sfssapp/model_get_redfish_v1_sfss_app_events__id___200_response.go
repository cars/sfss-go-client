/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GetRedfishV1SFSSAppEventsID200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRedfishV1SFSSAppEventsID200Response{}

// GetRedfishV1SFSSAppEventsID200Response
type GetRedfishV1SFSSAppEventsID200Response struct {
	// Required arguments for the specified event
	Args []string `json:"Args"`
	// CDC instance identifier
	CDCInstance string `json:"CDCInstance"`
	// Enhanced Event Message Initiative (EEMI) Message Code
	EEMI string `json:"EEMI"`
	// Hostname of the SFSS VM
	HostName string `json:"HostName"`
	// Message summary
	Message           string   `json:"Message"`
	OriginOfCondition []string `json:"OriginOfCondition"`
	// Severity of the system message; possible values include Critical, Warning, and Informational
	Severity string `json:"Severity"`
	// SFSS service that is responsible for handling the event
	Source string `json:"Source"`
	// The module within the SFSS service that is responsible for handling the event
	SourceSubType string `json:"SourceSubType"`
	// Date and time at which the event occurred; date in dd/mm/yyyy format and time in hh:mm:ss format
	TimeStamp    string `json:"timeStamp"`
	OdataId      string `json:"@odata.id"`
	OdataType    string `json:"@odata.type"`
	OdataContext string `json:"@odata.context"`
}

type _GetRedfishV1SFSSAppEventsID200Response GetRedfishV1SFSSAppEventsID200Response

// NewGetRedfishV1SFSSAppEventsID200Response instantiates a new GetRedfishV1SFSSAppEventsID200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRedfishV1SFSSAppEventsID200Response(args []string, cDCInstance string, eEMI string, hostName string, message string, originOfCondition []string, severity string, source string, sourceSubType string, timeStamp string, odataId string, odataType string, odataContext string) *GetRedfishV1SFSSAppEventsID200Response {
	this := GetRedfishV1SFSSAppEventsID200Response{}
	this.Args = args
	this.CDCInstance = cDCInstance
	this.EEMI = eEMI
	this.HostName = hostName
	this.Message = message
	this.OriginOfCondition = originOfCondition
	this.Severity = severity
	this.Source = source
	this.SourceSubType = sourceSubType
	this.TimeStamp = timeStamp
	this.OdataId = odataId
	this.OdataType = odataType
	this.OdataContext = odataContext
	return &this
}

// NewGetRedfishV1SFSSAppEventsID200ResponseWithDefaults instantiates a new GetRedfishV1SFSSAppEventsID200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRedfishV1SFSSAppEventsID200ResponseWithDefaults() *GetRedfishV1SFSSAppEventsID200Response {
	this := GetRedfishV1SFSSAppEventsID200Response{}
	return &this
}

// GetArgs returns the Args field value
func (o *GetRedfishV1SFSSAppEventsID200Response) GetArgs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Args
}

// GetArgsOk returns a tuple with the Args field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppEventsID200Response) GetArgsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Args, true
}

// SetArgs sets field value
func (o *GetRedfishV1SFSSAppEventsID200Response) SetArgs(v []string) {
	o.Args = v
}

// GetCDCInstance returns the CDCInstance field value
func (o *GetRedfishV1SFSSAppEventsID200Response) GetCDCInstance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CDCInstance
}

// GetCDCInstanceOk returns a tuple with the CDCInstance field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppEventsID200Response) GetCDCInstanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CDCInstance, true
}

// SetCDCInstance sets field value
func (o *GetRedfishV1SFSSAppEventsID200Response) SetCDCInstance(v string) {
	o.CDCInstance = v
}

// GetEEMI returns the EEMI field value
func (o *GetRedfishV1SFSSAppEventsID200Response) GetEEMI() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EEMI
}

// GetEEMIOk returns a tuple with the EEMI field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppEventsID200Response) GetEEMIOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EEMI, true
}

// SetEEMI sets field value
func (o *GetRedfishV1SFSSAppEventsID200Response) SetEEMI(v string) {
	o.EEMI = v
}

// GetHostName returns the HostName field value
func (o *GetRedfishV1SFSSAppEventsID200Response) GetHostName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppEventsID200Response) GetHostNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostName, true
}

// SetHostName sets field value
func (o *GetRedfishV1SFSSAppEventsID200Response) SetHostName(v string) {
	o.HostName = v
}

// GetMessage returns the Message field value
func (o *GetRedfishV1SFSSAppEventsID200Response) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppEventsID200Response) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *GetRedfishV1SFSSAppEventsID200Response) SetMessage(v string) {
	o.Message = v
}

// GetOriginOfCondition returns the OriginOfCondition field value
func (o *GetRedfishV1SFSSAppEventsID200Response) GetOriginOfCondition() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OriginOfCondition
}

// GetOriginOfConditionOk returns a tuple with the OriginOfCondition field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppEventsID200Response) GetOriginOfConditionOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginOfCondition, true
}

// SetOriginOfCondition sets field value
func (o *GetRedfishV1SFSSAppEventsID200Response) SetOriginOfCondition(v []string) {
	o.OriginOfCondition = v
}

// GetSeverity returns the Severity field value
func (o *GetRedfishV1SFSSAppEventsID200Response) GetSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppEventsID200Response) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *GetRedfishV1SFSSAppEventsID200Response) SetSeverity(v string) {
	o.Severity = v
}

// GetSource returns the Source field value
func (o *GetRedfishV1SFSSAppEventsID200Response) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppEventsID200Response) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *GetRedfishV1SFSSAppEventsID200Response) SetSource(v string) {
	o.Source = v
}

// GetSourceSubType returns the SourceSubType field value
func (o *GetRedfishV1SFSSAppEventsID200Response) GetSourceSubType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceSubType
}

// GetSourceSubTypeOk returns a tuple with the SourceSubType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppEventsID200Response) GetSourceSubTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceSubType, true
}

// SetSourceSubType sets field value
func (o *GetRedfishV1SFSSAppEventsID200Response) SetSourceSubType(v string) {
	o.SourceSubType = v
}

// GetTimeStamp returns the TimeStamp field value
func (o *GetRedfishV1SFSSAppEventsID200Response) GetTimeStamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppEventsID200Response) GetTimeStampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeStamp, true
}

// SetTimeStamp sets field value
func (o *GetRedfishV1SFSSAppEventsID200Response) SetTimeStamp(v string) {
	o.TimeStamp = v
}

// GetOdataId returns the OdataId field value
func (o *GetRedfishV1SFSSAppEventsID200Response) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppEventsID200Response) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *GetRedfishV1SFSSAppEventsID200Response) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataType returns the OdataType field value
func (o *GetRedfishV1SFSSAppEventsID200Response) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppEventsID200Response) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *GetRedfishV1SFSSAppEventsID200Response) SetOdataType(v string) {
	o.OdataType = v
}

// GetOdataContext returns the OdataContext field value
func (o *GetRedfishV1SFSSAppEventsID200Response) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppEventsID200Response) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *GetRedfishV1SFSSAppEventsID200Response) SetOdataContext(v string) {
	o.OdataContext = v
}

func (o GetRedfishV1SFSSAppEventsID200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRedfishV1SFSSAppEventsID200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Args"] = o.Args
	toSerialize["CDCInstance"] = o.CDCInstance
	toSerialize["EEMI"] = o.EEMI
	toSerialize["HostName"] = o.HostName
	toSerialize["Message"] = o.Message
	toSerialize["OriginOfCondition"] = o.OriginOfCondition
	toSerialize["Severity"] = o.Severity
	toSerialize["Source"] = o.Source
	toSerialize["SourceSubType"] = o.SourceSubType
	toSerialize["timeStamp"] = o.TimeStamp
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.type"] = o.OdataType
	toSerialize["@odata.context"] = o.OdataContext
	return toSerialize, nil
}

func (o *GetRedfishV1SFSSAppEventsID200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Args",
		"CDCInstance",
		"EEMI",
		"HostName",
		"Message",
		"OriginOfCondition",
		"Severity",
		"Source",
		"SourceSubType",
		"timeStamp",
		"@odata.id",
		"@odata.type",
		"@odata.context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRedfishV1SFSSAppEventsID200Response := _GetRedfishV1SFSSAppEventsID200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRedfishV1SFSSAppEventsID200Response)

	if err != nil {
		return err
	}

	*o = GetRedfishV1SFSSAppEventsID200Response(varGetRedfishV1SFSSAppEventsID200Response)

	return err
}

type NullableGetRedfishV1SFSSAppEventsID200Response struct {
	value *GetRedfishV1SFSSAppEventsID200Response
	isSet bool
}

func (v NullableGetRedfishV1SFSSAppEventsID200Response) Get() *GetRedfishV1SFSSAppEventsID200Response {
	return v.value
}

func (v *NullableGetRedfishV1SFSSAppEventsID200Response) Set(val *GetRedfishV1SFSSAppEventsID200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRedfishV1SFSSAppEventsID200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRedfishV1SFSSAppEventsID200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRedfishV1SFSSAppEventsID200Response(val *GetRedfishV1SFSSAppEventsID200Response) *NullableGetRedfishV1SFSSAppEventsID200Response {
	return &NullableGetRedfishV1SFSSAppEventsID200Response{value: val, isSet: true}
}

func (v NullableGetRedfishV1SFSSAppEventsID200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRedfishV1SFSSAppEventsID200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
