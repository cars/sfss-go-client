/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PostRedfishV1SFSSAppSFSSImagesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostRedfishV1SFSSAppSFSSImagesRequest{}

// PostRedfishV1SFSSAppSFSSImagesRequest
type PostRedfishV1SFSSAppSFSSImagesRequest struct {
	// Username to access the remote server
	ImageServerUserName string `json:"ImageServerUserName"`
	// Password to access the image in the remote server
	ImageServerPassword string `json:"ImageServerPassword"`
	// Location of the SFSS image in the remote server; SFSS supports only IPv4 communication with remote servers
	ImageServerLocation string `json:"ImageServerLocation"`
	// Transport type used to copy the image from the remote server; possible values include SCP, SFTP, HTTP, and HTTPS
	TransportType string `json:"TransportType"`
}

type _PostRedfishV1SFSSAppSFSSImagesRequest PostRedfishV1SFSSAppSFSSImagesRequest

// NewPostRedfishV1SFSSAppSFSSImagesRequest instantiates a new PostRedfishV1SFSSAppSFSSImagesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostRedfishV1SFSSAppSFSSImagesRequest(imageServerUserName string, imageServerPassword string, imageServerLocation string, transportType string) *PostRedfishV1SFSSAppSFSSImagesRequest {
	this := PostRedfishV1SFSSAppSFSSImagesRequest{}
	this.ImageServerUserName = imageServerUserName
	this.ImageServerPassword = imageServerPassword
	this.ImageServerLocation = imageServerLocation
	this.TransportType = transportType
	return &this
}

// NewPostRedfishV1SFSSAppSFSSImagesRequestWithDefaults instantiates a new PostRedfishV1SFSSAppSFSSImagesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostRedfishV1SFSSAppSFSSImagesRequestWithDefaults() *PostRedfishV1SFSSAppSFSSImagesRequest {
	this := PostRedfishV1SFSSAppSFSSImagesRequest{}
	return &this
}

// GetImageServerUserName returns the ImageServerUserName field value
func (o *PostRedfishV1SFSSAppSFSSImagesRequest) GetImageServerUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageServerUserName
}

// GetImageServerUserNameOk returns a tuple with the ImageServerUserName field value
// and a boolean to check if the value has been set.
func (o *PostRedfishV1SFSSAppSFSSImagesRequest) GetImageServerUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageServerUserName, true
}

// SetImageServerUserName sets field value
func (o *PostRedfishV1SFSSAppSFSSImagesRequest) SetImageServerUserName(v string) {
	o.ImageServerUserName = v
}

// GetImageServerPassword returns the ImageServerPassword field value
func (o *PostRedfishV1SFSSAppSFSSImagesRequest) GetImageServerPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageServerPassword
}

// GetImageServerPasswordOk returns a tuple with the ImageServerPassword field value
// and a boolean to check if the value has been set.
func (o *PostRedfishV1SFSSAppSFSSImagesRequest) GetImageServerPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageServerPassword, true
}

// SetImageServerPassword sets field value
func (o *PostRedfishV1SFSSAppSFSSImagesRequest) SetImageServerPassword(v string) {
	o.ImageServerPassword = v
}

// GetImageServerLocation returns the ImageServerLocation field value
func (o *PostRedfishV1SFSSAppSFSSImagesRequest) GetImageServerLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageServerLocation
}

// GetImageServerLocationOk returns a tuple with the ImageServerLocation field value
// and a boolean to check if the value has been set.
func (o *PostRedfishV1SFSSAppSFSSImagesRequest) GetImageServerLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageServerLocation, true
}

// SetImageServerLocation sets field value
func (o *PostRedfishV1SFSSAppSFSSImagesRequest) SetImageServerLocation(v string) {
	o.ImageServerLocation = v
}

// GetTransportType returns the TransportType field value
func (o *PostRedfishV1SFSSAppSFSSImagesRequest) GetTransportType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransportType
}

// GetTransportTypeOk returns a tuple with the TransportType field value
// and a boolean to check if the value has been set.
func (o *PostRedfishV1SFSSAppSFSSImagesRequest) GetTransportTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransportType, true
}

// SetTransportType sets field value
func (o *PostRedfishV1SFSSAppSFSSImagesRequest) SetTransportType(v string) {
	o.TransportType = v
}

func (o PostRedfishV1SFSSAppSFSSImagesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostRedfishV1SFSSAppSFSSImagesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ImageServerUserName"] = o.ImageServerUserName
	toSerialize["ImageServerPassword"] = o.ImageServerPassword
	toSerialize["ImageServerLocation"] = o.ImageServerLocation
	toSerialize["TransportType"] = o.TransportType
	return toSerialize, nil
}

func (o *PostRedfishV1SFSSAppSFSSImagesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ImageServerUserName",
		"ImageServerPassword",
		"ImageServerLocation",
		"TransportType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostRedfishV1SFSSAppSFSSImagesRequest := _PostRedfishV1SFSSAppSFSSImagesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostRedfishV1SFSSAppSFSSImagesRequest)

	if err != nil {
		return err
	}

	*o = PostRedfishV1SFSSAppSFSSImagesRequest(varPostRedfishV1SFSSAppSFSSImagesRequest)

	return err
}

type NullablePostRedfishV1SFSSAppSFSSImagesRequest struct {
	value *PostRedfishV1SFSSAppSFSSImagesRequest
	isSet bool
}

func (v NullablePostRedfishV1SFSSAppSFSSImagesRequest) Get() *PostRedfishV1SFSSAppSFSSImagesRequest {
	return v.value
}

func (v *NullablePostRedfishV1SFSSAppSFSSImagesRequest) Set(val *PostRedfishV1SFSSAppSFSSImagesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostRedfishV1SFSSAppSFSSImagesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostRedfishV1SFSSAppSFSSImagesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostRedfishV1SFSSAppSFSSImagesRequest(val *PostRedfishV1SFSSAppSFSSImagesRequest) *NullablePostRedfishV1SFSSAppSFSSImagesRequest {
	return &NullablePostRedfishV1SFSSAppSFSSImagesRequest{value: val, isSet: true}
}

func (v NullablePostRedfishV1SFSSAppSFSSImagesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostRedfishV1SFSSAppSFSSImagesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
