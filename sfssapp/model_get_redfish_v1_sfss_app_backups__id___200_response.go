/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetRedfishV1SFSSAppBackupsID200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRedfishV1SFSSAppBackupsID200Response{}

// GetRedfishV1SFSSAppBackupsID200Response 
type GetRedfishV1SFSSAppBackupsID200Response struct {
	// Backup identifier
	ID string `json:"ID"`
	// Remote server location where the backup file is copied to; only IPv4 communication is supported
	ImageServerLocation string `json:"ImageServerLocation"`
	// Detailed status message of the backup operation
	StatusMessage string `json:"StatusMessage"`
	// Password to access the remote server
	ImageServerPassword string `json:"ImageServerPassword"`
	// Status of the backup; possible values include Success, Failure, NotStarted, InProgress
	Status string `json:"Status"`
	// Date and time at which the backup was taken; date in mm/dd/yyyy format and time in hh:mm:ss format
	TimeStamp string `json:"TimeStamp"`
	// Transport type used to copy the backup file to the remote server; possible values include SCP, HTTP, HTTPS, and SFTP
	TransportType string `json:"TransportType"`
	// Username to access the remote server
	ImageServerUserName string `json:"ImageServerUserName"`
	OdataId string `json:"@odata.id"`
	OdataType string `json:"@odata.type"`
	OdataContext string `json:"@odata.context"`
}

type _GetRedfishV1SFSSAppBackupsID200Response GetRedfishV1SFSSAppBackupsID200Response

// NewGetRedfishV1SFSSAppBackupsID200Response instantiates a new GetRedfishV1SFSSAppBackupsID200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRedfishV1SFSSAppBackupsID200Response(iD string, imageServerLocation string, statusMessage string, imageServerPassword string, status string, timeStamp string, transportType string, imageServerUserName string, odataId string, odataType string, odataContext string) *GetRedfishV1SFSSAppBackupsID200Response {
	this := GetRedfishV1SFSSAppBackupsID200Response{}
	this.ID = iD
	this.ImageServerLocation = imageServerLocation
	this.StatusMessage = statusMessage
	this.ImageServerPassword = imageServerPassword
	this.Status = status
	this.TimeStamp = timeStamp
	this.TransportType = transportType
	this.ImageServerUserName = imageServerUserName
	this.OdataId = odataId
	this.OdataType = odataType
	this.OdataContext = odataContext
	return &this
}

// NewGetRedfishV1SFSSAppBackupsID200ResponseWithDefaults instantiates a new GetRedfishV1SFSSAppBackupsID200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRedfishV1SFSSAppBackupsID200ResponseWithDefaults() *GetRedfishV1SFSSAppBackupsID200Response {
	this := GetRedfishV1SFSSAppBackupsID200Response{}
	return &this
}

// GetID returns the ID field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ID
}

// GetIDOk returns a tuple with the ID field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ID, true
}

// SetID sets field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) SetID(v string) {
	o.ID = v
}

// GetImageServerLocation returns the ImageServerLocation field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetImageServerLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageServerLocation
}

// GetImageServerLocationOk returns a tuple with the ImageServerLocation field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetImageServerLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageServerLocation, true
}

// SetImageServerLocation sets field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) SetImageServerLocation(v string) {
	o.ImageServerLocation = v
}

// GetStatusMessage returns the StatusMessage field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetStatusMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusMessage
}

// GetStatusMessageOk returns a tuple with the StatusMessage field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetStatusMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusMessage, true
}

// SetStatusMessage sets field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) SetStatusMessage(v string) {
	o.StatusMessage = v
}

// GetImageServerPassword returns the ImageServerPassword field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetImageServerPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageServerPassword
}

// GetImageServerPasswordOk returns a tuple with the ImageServerPassword field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetImageServerPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageServerPassword, true
}

// SetImageServerPassword sets field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) SetImageServerPassword(v string) {
	o.ImageServerPassword = v
}

// GetStatus returns the Status field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) SetStatus(v string) {
	o.Status = v
}

// GetTimeStamp returns the TimeStamp field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetTimeStamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetTimeStampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeStamp, true
}

// SetTimeStamp sets field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) SetTimeStamp(v string) {
	o.TimeStamp = v
}

// GetTransportType returns the TransportType field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetTransportType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransportType
}

// GetTransportTypeOk returns a tuple with the TransportType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetTransportTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransportType, true
}

// SetTransportType sets field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) SetTransportType(v string) {
	o.TransportType = v
}

// GetImageServerUserName returns the ImageServerUserName field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetImageServerUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageServerUserName
}

// GetImageServerUserNameOk returns a tuple with the ImageServerUserName field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetImageServerUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageServerUserName, true
}

// SetImageServerUserName sets field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) SetImageServerUserName(v string) {
	o.ImageServerUserName = v
}

// GetOdataId returns the OdataId field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataType returns the OdataType field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) SetOdataType(v string) {
	o.OdataType = v
}

// GetOdataContext returns the OdataContext field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppBackupsID200Response) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *GetRedfishV1SFSSAppBackupsID200Response) SetOdataContext(v string) {
	o.OdataContext = v
}

func (o GetRedfishV1SFSSAppBackupsID200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRedfishV1SFSSAppBackupsID200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ID"] = o.ID
	toSerialize["ImageServerLocation"] = o.ImageServerLocation
	toSerialize["StatusMessage"] = o.StatusMessage
	toSerialize["ImageServerPassword"] = o.ImageServerPassword
	toSerialize["Status"] = o.Status
	toSerialize["TimeStamp"] = o.TimeStamp
	toSerialize["TransportType"] = o.TransportType
	toSerialize["ImageServerUserName"] = o.ImageServerUserName
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.type"] = o.OdataType
	toSerialize["@odata.context"] = o.OdataContext
	return toSerialize, nil
}

func (o *GetRedfishV1SFSSAppBackupsID200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ID",
		"ImageServerLocation",
		"StatusMessage",
		"ImageServerPassword",
		"Status",
		"TimeStamp",
		"TransportType",
		"ImageServerUserName",
		"@odata.id",
		"@odata.type",
		"@odata.context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRedfishV1SFSSAppBackupsID200Response := _GetRedfishV1SFSSAppBackupsID200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRedfishV1SFSSAppBackupsID200Response)

	if err != nil {
		return err
	}

	*o = GetRedfishV1SFSSAppBackupsID200Response(varGetRedfishV1SFSSAppBackupsID200Response)

	return err
}

type NullableGetRedfishV1SFSSAppBackupsID200Response struct {
	value *GetRedfishV1SFSSAppBackupsID200Response
	isSet bool
}

func (v NullableGetRedfishV1SFSSAppBackupsID200Response) Get() *GetRedfishV1SFSSAppBackupsID200Response {
	return v.value
}

func (v *NullableGetRedfishV1SFSSAppBackupsID200Response) Set(val *GetRedfishV1SFSSAppBackupsID200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRedfishV1SFSSAppBackupsID200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRedfishV1SFSSAppBackupsID200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRedfishV1SFSSAppBackupsID200Response(val *GetRedfishV1SFSSAppBackupsID200Response) *NullableGetRedfishV1SFSSAppBackupsID200Response {
	return &NullableGetRedfishV1SFSSAppBackupsID200Response{value: val, isSet: true}
}

func (v NullableGetRedfishV1SFSSAppBackupsID200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRedfishV1SFSSAppBackupsID200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


