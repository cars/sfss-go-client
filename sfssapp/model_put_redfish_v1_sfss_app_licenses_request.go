/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PUTRedfishV1SFSSAppLicensesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PUTRedfishV1SFSSAppLicensesRequest{}

// PUTRedfishV1SFSSAppLicensesRequest
type PUTRedfishV1SFSSAppLicensesRequest struct {
	// License identifier
	Identifier string `json:"Identifier"`
	// End User License Agreement
	EULA string `json:"EULA"`
}

type _PUTRedfishV1SFSSAppLicensesRequest PUTRedfishV1SFSSAppLicensesRequest

// NewPUTRedfishV1SFSSAppLicensesRequest instantiates a new PUTRedfishV1SFSSAppLicensesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPUTRedfishV1SFSSAppLicensesRequest(identifier string, eULA string) *PUTRedfishV1SFSSAppLicensesRequest {
	this := PUTRedfishV1SFSSAppLicensesRequest{}
	this.Identifier = identifier
	this.EULA = eULA
	return &this
}

// NewPUTRedfishV1SFSSAppLicensesRequestWithDefaults instantiates a new PUTRedfishV1SFSSAppLicensesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPUTRedfishV1SFSSAppLicensesRequestWithDefaults() *PUTRedfishV1SFSSAppLicensesRequest {
	this := PUTRedfishV1SFSSAppLicensesRequest{}
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *PUTRedfishV1SFSSAppLicensesRequest) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *PUTRedfishV1SFSSAppLicensesRequest) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *PUTRedfishV1SFSSAppLicensesRequest) SetIdentifier(v string) {
	o.Identifier = v
}

// GetEULA returns the EULA field value
func (o *PUTRedfishV1SFSSAppLicensesRequest) GetEULA() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EULA
}

// GetEULAOk returns a tuple with the EULA field value
// and a boolean to check if the value has been set.
func (o *PUTRedfishV1SFSSAppLicensesRequest) GetEULAOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EULA, true
}

// SetEULA sets field value
func (o *PUTRedfishV1SFSSAppLicensesRequest) SetEULA(v string) {
	o.EULA = v
}

func (o PUTRedfishV1SFSSAppLicensesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PUTRedfishV1SFSSAppLicensesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Identifier"] = o.Identifier
	toSerialize["EULA"] = o.EULA
	return toSerialize, nil
}

func (o *PUTRedfishV1SFSSAppLicensesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Identifier",
		"EULA",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPUTRedfishV1SFSSAppLicensesRequest := _PUTRedfishV1SFSSAppLicensesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPUTRedfishV1SFSSAppLicensesRequest)

	if err != nil {
		return err
	}

	*o = PUTRedfishV1SFSSAppLicensesRequest(varPUTRedfishV1SFSSAppLicensesRequest)

	return err
}

type NullablePUTRedfishV1SFSSAppLicensesRequest struct {
	value *PUTRedfishV1SFSSAppLicensesRequest
	isSet bool
}

func (v NullablePUTRedfishV1SFSSAppLicensesRequest) Get() *PUTRedfishV1SFSSAppLicensesRequest {
	return v.value
}

func (v *NullablePUTRedfishV1SFSSAppLicensesRequest) Set(val *PUTRedfishV1SFSSAppLicensesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePUTRedfishV1SFSSAppLicensesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePUTRedfishV1SFSSAppLicensesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePUTRedfishV1SFSSAppLicensesRequest(val *PUTRedfishV1SFSSAppLicensesRequest) *NullablePUTRedfishV1SFSSAppLicensesRequest {
	return &NullablePUTRedfishV1SFSSAppLicensesRequest{value: val, isSet: true}
}

func (v NullablePUTRedfishV1SFSSAppLicensesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePUTRedfishV1SFSSAppLicensesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
