/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CDCInstanceManagerPOST type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDCInstanceManagerPOST{}

// CDCInstanceManagerPOST This model configures a CDC instance.
type CDCInstanceManagerPOST struct {
	// CDC instance identifier
	InstanceIdentifier string `json:"InstanceIdentifier"`
	// Interface that is assigned to the CDC instance
	Interfaces []interface{} `json:"Interfaces"`
	// Administrative state of the CDC instance
	CDCAdminState *string `json:"CDCAdminState,omitempty"`
	// Administrative state of the discovery service
	DiscoverySvcAdminState *string `json:"DiscoverySvcAdminState,omitempty"`
}

type _CDCInstanceManagerPOST CDCInstanceManagerPOST

// NewCDCInstanceManagerPOST instantiates a new CDCInstanceManagerPOST object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDCInstanceManagerPOST(instanceIdentifier string, interfaces []interface{}) *CDCInstanceManagerPOST {
	this := CDCInstanceManagerPOST{}
	this.InstanceIdentifier = instanceIdentifier
	this.Interfaces = interfaces
	return &this
}

// NewCDCInstanceManagerPOSTWithDefaults instantiates a new CDCInstanceManagerPOST object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDCInstanceManagerPOSTWithDefaults() *CDCInstanceManagerPOST {
	this := CDCInstanceManagerPOST{}
	return &this
}

// GetInstanceIdentifier returns the InstanceIdentifier field value
func (o *CDCInstanceManagerPOST) GetInstanceIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceIdentifier
}

// GetInstanceIdentifierOk returns a tuple with the InstanceIdentifier field value
// and a boolean to check if the value has been set.
func (o *CDCInstanceManagerPOST) GetInstanceIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceIdentifier, true
}

// SetInstanceIdentifier sets field value
func (o *CDCInstanceManagerPOST) SetInstanceIdentifier(v string) {
	o.InstanceIdentifier = v
}

// GetInterfaces returns the Interfaces field value
func (o *CDCInstanceManagerPOST) GetInterfaces() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value
// and a boolean to check if the value has been set.
func (o *CDCInstanceManagerPOST) GetInterfacesOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Interfaces, true
}

// SetInterfaces sets field value
func (o *CDCInstanceManagerPOST) SetInterfaces(v []interface{}) {
	o.Interfaces = v
}

// GetCDCAdminState returns the CDCAdminState field value if set, zero value otherwise.
func (o *CDCInstanceManagerPOST) GetCDCAdminState() string {
	if o == nil || IsNil(o.CDCAdminState) {
		var ret string
		return ret
	}
	return *o.CDCAdminState
}

// GetCDCAdminStateOk returns a tuple with the CDCAdminState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDCInstanceManagerPOST) GetCDCAdminStateOk() (*string, bool) {
	if o == nil || IsNil(o.CDCAdminState) {
		return nil, false
	}
	return o.CDCAdminState, true
}

// HasCDCAdminState returns a boolean if a field has been set.
func (o *CDCInstanceManagerPOST) HasCDCAdminState() bool {
	if o != nil && !IsNil(o.CDCAdminState) {
		return true
	}

	return false
}

// SetCDCAdminState gets a reference to the given string and assigns it to the CDCAdminState field.
func (o *CDCInstanceManagerPOST) SetCDCAdminState(v string) {
	o.CDCAdminState = &v
}

// GetDiscoverySvcAdminState returns the DiscoverySvcAdminState field value if set, zero value otherwise.
func (o *CDCInstanceManagerPOST) GetDiscoverySvcAdminState() string {
	if o == nil || IsNil(o.DiscoverySvcAdminState) {
		var ret string
		return ret
	}
	return *o.DiscoverySvcAdminState
}

// GetDiscoverySvcAdminStateOk returns a tuple with the DiscoverySvcAdminState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDCInstanceManagerPOST) GetDiscoverySvcAdminStateOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoverySvcAdminState) {
		return nil, false
	}
	return o.DiscoverySvcAdminState, true
}

// HasDiscoverySvcAdminState returns a boolean if a field has been set.
func (o *CDCInstanceManagerPOST) HasDiscoverySvcAdminState() bool {
	if o != nil && !IsNil(o.DiscoverySvcAdminState) {
		return true
	}

	return false
}

// SetDiscoverySvcAdminState gets a reference to the given string and assigns it to the DiscoverySvcAdminState field.
func (o *CDCInstanceManagerPOST) SetDiscoverySvcAdminState(v string) {
	o.DiscoverySvcAdminState = &v
}

func (o CDCInstanceManagerPOST) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDCInstanceManagerPOST) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["InstanceIdentifier"] = o.InstanceIdentifier
	toSerialize["Interfaces"] = o.Interfaces
	if !IsNil(o.CDCAdminState) {
		toSerialize["CDCAdminState"] = o.CDCAdminState
	}
	if !IsNil(o.DiscoverySvcAdminState) {
		toSerialize["DiscoverySvcAdminState"] = o.DiscoverySvcAdminState
	}
	return toSerialize, nil
}

func (o *CDCInstanceManagerPOST) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"InstanceIdentifier",
		"Interfaces",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCDCInstanceManagerPOST := _CDCInstanceManagerPOST{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCDCInstanceManagerPOST)

	if err != nil {
		return err
	}

	*o = CDCInstanceManagerPOST(varCDCInstanceManagerPOST)

	return err
}

type NullableCDCInstanceManagerPOST struct {
	value *CDCInstanceManagerPOST
	isSet bool
}

func (v NullableCDCInstanceManagerPOST) Get() *CDCInstanceManagerPOST {
	return v.value
}

func (v *NullableCDCInstanceManagerPOST) Set(val *CDCInstanceManagerPOST) {
	v.value = val
	v.isSet = true
}

func (v NullableCDCInstanceManagerPOST) IsSet() bool {
	return v.isSet
}

func (v *NullableCDCInstanceManagerPOST) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDCInstanceManagerPOST(val *CDCInstanceManagerPOST) *NullableCDCInstanceManagerPOST {
	return &NullableCDCInstanceManagerPOST{value: val, isSet: true}
}

func (v NullableCDCInstanceManagerPOST) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDCInstanceManagerPOST) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
