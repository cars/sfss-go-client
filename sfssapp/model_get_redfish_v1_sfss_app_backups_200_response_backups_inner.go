/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetRedfishV1SFSSAppBackups200ResponseBackupsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRedfishV1SFSSAppBackups200ResponseBackupsInner{}

// GetRedfishV1SFSSAppBackups200ResponseBackupsInner struct for GetRedfishV1SFSSAppBackups200ResponseBackupsInner
type GetRedfishV1SFSSAppBackups200ResponseBackupsInner struct {
	OdataId string `json:"@odata.id"`
}

type _GetRedfishV1SFSSAppBackups200ResponseBackupsInner GetRedfishV1SFSSAppBackups200ResponseBackupsInner

// NewGetRedfishV1SFSSAppBackups200ResponseBackupsInner instantiates a new GetRedfishV1SFSSAppBackups200ResponseBackupsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRedfishV1SFSSAppBackups200ResponseBackupsInner(odataId string) *GetRedfishV1SFSSAppBackups200ResponseBackupsInner {
	this := GetRedfishV1SFSSAppBackups200ResponseBackupsInner{}
	this.OdataId = odataId
	return &this
}

// NewGetRedfishV1SFSSAppBackups200ResponseBackupsInnerWithDefaults instantiates a new GetRedfishV1SFSSAppBackups200ResponseBackupsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRedfishV1SFSSAppBackups200ResponseBackupsInnerWithDefaults() *GetRedfishV1SFSSAppBackups200ResponseBackupsInner {
	this := GetRedfishV1SFSSAppBackups200ResponseBackupsInner{}
	return &this
}

// GetOdataId returns the OdataId field value
func (o *GetRedfishV1SFSSAppBackups200ResponseBackupsInner) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppBackups200ResponseBackupsInner) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *GetRedfishV1SFSSAppBackups200ResponseBackupsInner) SetOdataId(v string) {
	o.OdataId = v
}

func (o GetRedfishV1SFSSAppBackups200ResponseBackupsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRedfishV1SFSSAppBackups200ResponseBackupsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["@odata.id"] = o.OdataId
	return toSerialize, nil
}

func (o *GetRedfishV1SFSSAppBackups200ResponseBackupsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"@odata.id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRedfishV1SFSSAppBackups200ResponseBackupsInner := _GetRedfishV1SFSSAppBackups200ResponseBackupsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRedfishV1SFSSAppBackups200ResponseBackupsInner)

	if err != nil {
		return err
	}

	*o = GetRedfishV1SFSSAppBackups200ResponseBackupsInner(varGetRedfishV1SFSSAppBackups200ResponseBackupsInner)

	return err
}

type NullableGetRedfishV1SFSSAppBackups200ResponseBackupsInner struct {
	value *GetRedfishV1SFSSAppBackups200ResponseBackupsInner
	isSet bool
}

func (v NullableGetRedfishV1SFSSAppBackups200ResponseBackupsInner) Get() *GetRedfishV1SFSSAppBackups200ResponseBackupsInner {
	return v.value
}

func (v *NullableGetRedfishV1SFSSAppBackups200ResponseBackupsInner) Set(val *GetRedfishV1SFSSAppBackups200ResponseBackupsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRedfishV1SFSSAppBackups200ResponseBackupsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRedfishV1SFSSAppBackups200ResponseBackupsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRedfishV1SFSSAppBackups200ResponseBackupsInner(val *GetRedfishV1SFSSAppBackups200ResponseBackupsInner) *NullableGetRedfishV1SFSSAppBackups200ResponseBackupsInner {
	return &NullableGetRedfishV1SFSSAppBackups200ResponseBackupsInner{value: val, isSet: true}
}

func (v NullableGetRedfishV1SFSSAppBackups200ResponseBackupsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRedfishV1SFSSAppBackups200ResponseBackupsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


