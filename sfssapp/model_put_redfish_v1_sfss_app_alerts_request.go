/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PutRedfishV1SFSSAppAlertsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutRedfishV1SFSSAppAlertsRequest{}

// PutRedfishV1SFSSAppAlertsRequest
type PutRedfishV1SFSSAppAlertsRequest struct {
	Protocol     string        `json:"Protocol"`
	Identifier   string        `json:"Identifier"`
	Context      string        `json:"Context"`
	EventTypes   []interface{} `json:"EventTypes"`
	CdcInstances []interface{} `json:"CdcInstances"`
	HttpHeaders  []interface{} `json:"HttpHeaders"`
	Destination  string        `json:"Destination"`
}

type _PutRedfishV1SFSSAppAlertsRequest PutRedfishV1SFSSAppAlertsRequest

// NewPutRedfishV1SFSSAppAlertsRequest instantiates a new PutRedfishV1SFSSAppAlertsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutRedfishV1SFSSAppAlertsRequest(protocol string, identifier string, context string, eventTypes []interface{}, cdcInstances []interface{}, httpHeaders []interface{}, destination string) *PutRedfishV1SFSSAppAlertsRequest {
	this := PutRedfishV1SFSSAppAlertsRequest{}
	this.Protocol = protocol
	this.Identifier = identifier
	this.Context = context
	this.EventTypes = eventTypes
	this.CdcInstances = cdcInstances
	this.HttpHeaders = httpHeaders
	this.Destination = destination
	return &this
}

// NewPutRedfishV1SFSSAppAlertsRequestWithDefaults instantiates a new PutRedfishV1SFSSAppAlertsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutRedfishV1SFSSAppAlertsRequestWithDefaults() *PutRedfishV1SFSSAppAlertsRequest {
	this := PutRedfishV1SFSSAppAlertsRequest{}
	return &this
}

// GetProtocol returns the Protocol field value
func (o *PutRedfishV1SFSSAppAlertsRequest) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppAlertsRequest) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *PutRedfishV1SFSSAppAlertsRequest) SetProtocol(v string) {
	o.Protocol = v
}

// GetIdentifier returns the Identifier field value
func (o *PutRedfishV1SFSSAppAlertsRequest) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppAlertsRequest) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *PutRedfishV1SFSSAppAlertsRequest) SetIdentifier(v string) {
	o.Identifier = v
}

// GetContext returns the Context field value
func (o *PutRedfishV1SFSSAppAlertsRequest) GetContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppAlertsRequest) GetContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *PutRedfishV1SFSSAppAlertsRequest) SetContext(v string) {
	o.Context = v
}

// GetEventTypes returns the EventTypes field value
func (o *PutRedfishV1SFSSAppAlertsRequest) GetEventTypes() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppAlertsRequest) GetEventTypesOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTypes, true
}

// SetEventTypes sets field value
func (o *PutRedfishV1SFSSAppAlertsRequest) SetEventTypes(v []interface{}) {
	o.EventTypes = v
}

// GetCdcInstances returns the CdcInstances field value
func (o *PutRedfishV1SFSSAppAlertsRequest) GetCdcInstances() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.CdcInstances
}

// GetCdcInstancesOk returns a tuple with the CdcInstances field value
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppAlertsRequest) GetCdcInstancesOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.CdcInstances, true
}

// SetCdcInstances sets field value
func (o *PutRedfishV1SFSSAppAlertsRequest) SetCdcInstances(v []interface{}) {
	o.CdcInstances = v
}

// GetHttpHeaders returns the HttpHeaders field value
func (o *PutRedfishV1SFSSAppAlertsRequest) GetHttpHeaders() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.HttpHeaders
}

// GetHttpHeadersOk returns a tuple with the HttpHeaders field value
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppAlertsRequest) GetHttpHeadersOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.HttpHeaders, true
}

// SetHttpHeaders sets field value
func (o *PutRedfishV1SFSSAppAlertsRequest) SetHttpHeaders(v []interface{}) {
	o.HttpHeaders = v
}

// GetDestination returns the Destination field value
func (o *PutRedfishV1SFSSAppAlertsRequest) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *PutRedfishV1SFSSAppAlertsRequest) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *PutRedfishV1SFSSAppAlertsRequest) SetDestination(v string) {
	o.Destination = v
}

func (o PutRedfishV1SFSSAppAlertsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutRedfishV1SFSSAppAlertsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Protocol"] = o.Protocol
	toSerialize["Identifier"] = o.Identifier
	toSerialize["Context"] = o.Context
	toSerialize["EventTypes"] = o.EventTypes
	toSerialize["CdcInstances"] = o.CdcInstances
	toSerialize["HttpHeaders"] = o.HttpHeaders
	toSerialize["Destination"] = o.Destination
	return toSerialize, nil
}

func (o *PutRedfishV1SFSSAppAlertsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Protocol",
		"Identifier",
		"Context",
		"EventTypes",
		"CdcInstances",
		"HttpHeaders",
		"Destination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPutRedfishV1SFSSAppAlertsRequest := _PutRedfishV1SFSSAppAlertsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPutRedfishV1SFSSAppAlertsRequest)

	if err != nil {
		return err
	}

	*o = PutRedfishV1SFSSAppAlertsRequest(varPutRedfishV1SFSSAppAlertsRequest)

	return err
}

type NullablePutRedfishV1SFSSAppAlertsRequest struct {
	value *PutRedfishV1SFSSAppAlertsRequest
	isSet bool
}

func (v NullablePutRedfishV1SFSSAppAlertsRequest) Get() *PutRedfishV1SFSSAppAlertsRequest {
	return v.value
}

func (v *NullablePutRedfishV1SFSSAppAlertsRequest) Set(val *PutRedfishV1SFSSAppAlertsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutRedfishV1SFSSAppAlertsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutRedfishV1SFSSAppAlertsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutRedfishV1SFSSAppAlertsRequest(val *PutRedfishV1SFSSAppAlertsRequest) *NullablePutRedfishV1SFSSAppAlertsRequest {
	return &NullablePutRedfishV1SFSSAppAlertsRequest{value: val, isSet: true}
}

func (v NullablePutRedfishV1SFSSAppAlertsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutRedfishV1SFSSAppAlertsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
