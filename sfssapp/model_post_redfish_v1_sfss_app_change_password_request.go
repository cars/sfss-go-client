/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostRedfishV1SFSSAppChangePasswordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostRedfishV1SFSSAppChangePasswordRequest{}

// PostRedfishV1SFSSAppChangePasswordRequest 
type PostRedfishV1SFSSAppChangePasswordRequest struct {
	// Old password
	OldPassword string `json:"OldPassword"`
	// New password
	NewPassword string `json:"NewPassword"`
}

type _PostRedfishV1SFSSAppChangePasswordRequest PostRedfishV1SFSSAppChangePasswordRequest

// NewPostRedfishV1SFSSAppChangePasswordRequest instantiates a new PostRedfishV1SFSSAppChangePasswordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostRedfishV1SFSSAppChangePasswordRequest(oldPassword string, newPassword string) *PostRedfishV1SFSSAppChangePasswordRequest {
	this := PostRedfishV1SFSSAppChangePasswordRequest{}
	this.OldPassword = oldPassword
	this.NewPassword = newPassword
	return &this
}

// NewPostRedfishV1SFSSAppChangePasswordRequestWithDefaults instantiates a new PostRedfishV1SFSSAppChangePasswordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostRedfishV1SFSSAppChangePasswordRequestWithDefaults() *PostRedfishV1SFSSAppChangePasswordRequest {
	this := PostRedfishV1SFSSAppChangePasswordRequest{}
	return &this
}

// GetOldPassword returns the OldPassword field value
func (o *PostRedfishV1SFSSAppChangePasswordRequest) GetOldPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OldPassword
}

// GetOldPasswordOk returns a tuple with the OldPassword field value
// and a boolean to check if the value has been set.
func (o *PostRedfishV1SFSSAppChangePasswordRequest) GetOldPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OldPassword, true
}

// SetOldPassword sets field value
func (o *PostRedfishV1SFSSAppChangePasswordRequest) SetOldPassword(v string) {
	o.OldPassword = v
}

// GetNewPassword returns the NewPassword field value
func (o *PostRedfishV1SFSSAppChangePasswordRequest) GetNewPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value
// and a boolean to check if the value has been set.
func (o *PostRedfishV1SFSSAppChangePasswordRequest) GetNewPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewPassword, true
}

// SetNewPassword sets field value
func (o *PostRedfishV1SFSSAppChangePasswordRequest) SetNewPassword(v string) {
	o.NewPassword = v
}

func (o PostRedfishV1SFSSAppChangePasswordRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostRedfishV1SFSSAppChangePasswordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["OldPassword"] = o.OldPassword
	toSerialize["NewPassword"] = o.NewPassword
	return toSerialize, nil
}

func (o *PostRedfishV1SFSSAppChangePasswordRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"OldPassword",
		"NewPassword",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostRedfishV1SFSSAppChangePasswordRequest := _PostRedfishV1SFSSAppChangePasswordRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostRedfishV1SFSSAppChangePasswordRequest)

	if err != nil {
		return err
	}

	*o = PostRedfishV1SFSSAppChangePasswordRequest(varPostRedfishV1SFSSAppChangePasswordRequest)

	return err
}

type NullablePostRedfishV1SFSSAppChangePasswordRequest struct {
	value *PostRedfishV1SFSSAppChangePasswordRequest
	isSet bool
}

func (v NullablePostRedfishV1SFSSAppChangePasswordRequest) Get() *PostRedfishV1SFSSAppChangePasswordRequest {
	return v.value
}

func (v *NullablePostRedfishV1SFSSAppChangePasswordRequest) Set(val *PostRedfishV1SFSSAppChangePasswordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostRedfishV1SFSSAppChangePasswordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostRedfishV1SFSSAppChangePasswordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostRedfishV1SFSSAppChangePasswordRequest(val *PostRedfishV1SFSSAppChangePasswordRequest) *NullablePostRedfishV1SFSSAppChangePasswordRequest {
	return &NullablePostRedfishV1SFSSAppChangePasswordRequest{value: val, isSet: true}
}

func (v NullablePostRedfishV1SFSSAppChangePasswordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostRedfishV1SFSSAppChangePasswordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


