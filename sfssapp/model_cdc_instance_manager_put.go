/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CDCInstanceManagerPUT type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDCInstanceManagerPUT{}

// CDCInstanceManagerPUT This model updates the CDC instance configuration.
type CDCInstanceManagerPUT struct {
	// Administrative state of the CDC instance
	CDCAdminState string `json:"CDCAdminState"`
	// Administrative state of the discovery service
	DiscoverySvcAdminState string `json:"DiscoverySvcAdminState"`
	// CDC instance identifier
	InstanceIdentifier string `json:"InstanceIdentifier"`
	// Interface that is assigned to the CDC instance
	Interfaces      []interface{} `json:"Interfaces"`
	ServiceNetworks []interface{} `json:"ServiceNetworks"`
	OdataId         string        `json:"@odata.id"`
	OdataType       string        `json:"@odata.type"`
	OdataContext    string        `json:"@odata.context"`
}

type _CDCInstanceManagerPUT CDCInstanceManagerPUT

// NewCDCInstanceManagerPUT instantiates a new CDCInstanceManagerPUT object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDCInstanceManagerPUT(cDCAdminState string, discoverySvcAdminState string, instanceIdentifier string, interfaces []interface{}, serviceNetworks []interface{}, odataId string, odataType string, odataContext string) *CDCInstanceManagerPUT {
	this := CDCInstanceManagerPUT{}
	this.CDCAdminState = cDCAdminState
	this.DiscoverySvcAdminState = discoverySvcAdminState
	this.InstanceIdentifier = instanceIdentifier
	this.Interfaces = interfaces
	this.ServiceNetworks = serviceNetworks
	this.OdataId = odataId
	this.OdataType = odataType
	this.OdataContext = odataContext
	return &this
}

// NewCDCInstanceManagerPUTWithDefaults instantiates a new CDCInstanceManagerPUT object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDCInstanceManagerPUTWithDefaults() *CDCInstanceManagerPUT {
	this := CDCInstanceManagerPUT{}
	return &this
}

// GetCDCAdminState returns the CDCAdminState field value
func (o *CDCInstanceManagerPUT) GetCDCAdminState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CDCAdminState
}

// GetCDCAdminStateOk returns a tuple with the CDCAdminState field value
// and a boolean to check if the value has been set.
func (o *CDCInstanceManagerPUT) GetCDCAdminStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CDCAdminState, true
}

// SetCDCAdminState sets field value
func (o *CDCInstanceManagerPUT) SetCDCAdminState(v string) {
	o.CDCAdminState = v
}

// GetDiscoverySvcAdminState returns the DiscoverySvcAdminState field value
func (o *CDCInstanceManagerPUT) GetDiscoverySvcAdminState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DiscoverySvcAdminState
}

// GetDiscoverySvcAdminStateOk returns a tuple with the DiscoverySvcAdminState field value
// and a boolean to check if the value has been set.
func (o *CDCInstanceManagerPUT) GetDiscoverySvcAdminStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscoverySvcAdminState, true
}

// SetDiscoverySvcAdminState sets field value
func (o *CDCInstanceManagerPUT) SetDiscoverySvcAdminState(v string) {
	o.DiscoverySvcAdminState = v
}

// GetInstanceIdentifier returns the InstanceIdentifier field value
func (o *CDCInstanceManagerPUT) GetInstanceIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceIdentifier
}

// GetInstanceIdentifierOk returns a tuple with the InstanceIdentifier field value
// and a boolean to check if the value has been set.
func (o *CDCInstanceManagerPUT) GetInstanceIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceIdentifier, true
}

// SetInstanceIdentifier sets field value
func (o *CDCInstanceManagerPUT) SetInstanceIdentifier(v string) {
	o.InstanceIdentifier = v
}

// GetInterfaces returns the Interfaces field value
func (o *CDCInstanceManagerPUT) GetInterfaces() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value
// and a boolean to check if the value has been set.
func (o *CDCInstanceManagerPUT) GetInterfacesOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Interfaces, true
}

// SetInterfaces sets field value
func (o *CDCInstanceManagerPUT) SetInterfaces(v []interface{}) {
	o.Interfaces = v
}

// GetServiceNetworks returns the ServiceNetworks field value
func (o *CDCInstanceManagerPUT) GetServiceNetworks() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.ServiceNetworks
}

// GetServiceNetworksOk returns a tuple with the ServiceNetworks field value
// and a boolean to check if the value has been set.
func (o *CDCInstanceManagerPUT) GetServiceNetworksOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceNetworks, true
}

// SetServiceNetworks sets field value
func (o *CDCInstanceManagerPUT) SetServiceNetworks(v []interface{}) {
	o.ServiceNetworks = v
}

// GetOdataId returns the OdataId field value
func (o *CDCInstanceManagerPUT) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *CDCInstanceManagerPUT) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *CDCInstanceManagerPUT) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataType returns the OdataType field value
func (o *CDCInstanceManagerPUT) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *CDCInstanceManagerPUT) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *CDCInstanceManagerPUT) SetOdataType(v string) {
	o.OdataType = v
}

// GetOdataContext returns the OdataContext field value
func (o *CDCInstanceManagerPUT) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *CDCInstanceManagerPUT) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *CDCInstanceManagerPUT) SetOdataContext(v string) {
	o.OdataContext = v
}

func (o CDCInstanceManagerPUT) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDCInstanceManagerPUT) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CDCAdminState"] = o.CDCAdminState
	toSerialize["DiscoverySvcAdminState"] = o.DiscoverySvcAdminState
	toSerialize["InstanceIdentifier"] = o.InstanceIdentifier
	toSerialize["Interfaces"] = o.Interfaces
	toSerialize["ServiceNetworks"] = o.ServiceNetworks
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.type"] = o.OdataType
	toSerialize["@odata.context"] = o.OdataContext
	return toSerialize, nil
}

func (o *CDCInstanceManagerPUT) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CDCAdminState",
		"DiscoverySvcAdminState",
		"InstanceIdentifier",
		"Interfaces",
		"ServiceNetworks",
		"@odata.id",
		"@odata.type",
		"@odata.context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCDCInstanceManagerPUT := _CDCInstanceManagerPUT{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCDCInstanceManagerPUT)

	if err != nil {
		return err
	}

	*o = CDCInstanceManagerPUT(varCDCInstanceManagerPUT)

	return err
}

type NullableCDCInstanceManagerPUT struct {
	value *CDCInstanceManagerPUT
	isSet bool
}

func (v NullableCDCInstanceManagerPUT) Get() *CDCInstanceManagerPUT {
	return v.value
}

func (v *NullableCDCInstanceManagerPUT) Set(val *CDCInstanceManagerPUT) {
	v.value = val
	v.isSet = true
}

func (v NullableCDCInstanceManagerPUT) IsSet() bool {
	return v.isSet
}

func (v *NullableCDCInstanceManagerPUT) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDCInstanceManagerPUT(val *CDCInstanceManagerPUT) *NullableCDCInstanceManagerPUT {
	return &NullableCDCInstanceManagerPUT{value: val, isSet: true}
}

func (v NullableCDCInstanceManagerPUT) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDCInstanceManagerPUT) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
