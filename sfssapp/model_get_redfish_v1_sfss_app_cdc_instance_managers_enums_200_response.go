/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response{}

// GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response
type GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response struct {
	// Administrative state of the CDC instance
	CDCAdminState []string `json:"CDCAdminState"`
	// Administrative state of the discovery service
	DiscoverySvcAdminState []string `json:"DiscoverySvcAdminState"`
	// Status of Add CDC operation; possible values include INIT, INPROGRESS, SUCCESS, FAIL, and ABORT
	Status []string `json:"Status"`
}

type _GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response

// NewGetRedfishV1SFSSAppCDCInstanceManagersEnums200Response instantiates a new GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRedfishV1SFSSAppCDCInstanceManagersEnums200Response(cDCAdminState []string, discoverySvcAdminState []string, status []string) *GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response {
	this := GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response{}
	this.CDCAdminState = cDCAdminState
	this.DiscoverySvcAdminState = discoverySvcAdminState
	this.Status = status
	return &this
}

// NewGetRedfishV1SFSSAppCDCInstanceManagersEnums200ResponseWithDefaults instantiates a new GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRedfishV1SFSSAppCDCInstanceManagersEnums200ResponseWithDefaults() *GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response {
	this := GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response{}
	return &this
}

// GetCDCAdminState returns the CDCAdminState field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) GetCDCAdminState() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CDCAdminState
}

// GetCDCAdminStateOk returns a tuple with the CDCAdminState field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) GetCDCAdminStateOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CDCAdminState, true
}

// SetCDCAdminState sets field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) SetCDCAdminState(v []string) {
	o.CDCAdminState = v
}

// GetDiscoverySvcAdminState returns the DiscoverySvcAdminState field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) GetDiscoverySvcAdminState() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DiscoverySvcAdminState
}

// GetDiscoverySvcAdminStateOk returns a tuple with the DiscoverySvcAdminState field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) GetDiscoverySvcAdminStateOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiscoverySvcAdminState, true
}

// SetDiscoverySvcAdminState sets field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) SetDiscoverySvcAdminState(v []string) {
	o.DiscoverySvcAdminState = v
}

// GetStatus returns the Status field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) GetStatus() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) GetStatusOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status, true
}

// SetStatus sets field value
func (o *GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) SetStatus(v []string) {
	o.Status = v
}

func (o GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CDCAdminState"] = o.CDCAdminState
	toSerialize["DiscoverySvcAdminState"] = o.DiscoverySvcAdminState
	toSerialize["Status"] = o.Status
	return toSerialize, nil
}

func (o *GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CDCAdminState",
		"DiscoverySvcAdminState",
		"Status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRedfishV1SFSSAppCDCInstanceManagersEnums200Response := _GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRedfishV1SFSSAppCDCInstanceManagersEnums200Response)

	if err != nil {
		return err
	}

	*o = GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response(varGetRedfishV1SFSSAppCDCInstanceManagersEnums200Response)

	return err
}

type NullableGetRedfishV1SFSSAppCDCInstanceManagersEnums200Response struct {
	value *GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response
	isSet bool
}

func (v NullableGetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) Get() *GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response {
	return v.value
}

func (v *NullableGetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) Set(val *GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRedfishV1SFSSAppCDCInstanceManagersEnums200Response(val *GetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) *NullableGetRedfishV1SFSSAppCDCInstanceManagersEnums200Response {
	return &NullableGetRedfishV1SFSSAppCDCInstanceManagersEnums200Response{value: val, isSet: true}
}

func (v NullableGetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRedfishV1SFSSAppCDCInstanceManagersEnums200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
