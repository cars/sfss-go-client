/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"encoding/json"
)

// checks if the GetRedfishV1SFSSAppNTP200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRedfishV1SFSSAppNTP200Response{}

// GetRedfishV1SFSSAppNTP200Response struct for GetRedfishV1SFSSAppNTP200Response
type GetRedfishV1SFSSAppNTP200Response struct {
	// IP address of the NTP server; only IPv4 address is supported
	NtpServer *string `json:"NtpServer,omitempty"`
	// Connection status with the NTP server; possible values include Connected and Not Connected
	State *string `json:"State,omitempty"`
	// Status of the NTP service; possible values include Enable and Disable
	Status *string `json:"Status,omitempty"`
	OdataId *string `json:"@odata.id,omitempty"`
	OdataType *string `json:"@odata.type,omitempty"`
	OdataContext *string `json:"@odata.context,omitempty"`
}

// NewGetRedfishV1SFSSAppNTP200Response instantiates a new GetRedfishV1SFSSAppNTP200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRedfishV1SFSSAppNTP200Response() *GetRedfishV1SFSSAppNTP200Response {
	this := GetRedfishV1SFSSAppNTP200Response{}
	return &this
}

// NewGetRedfishV1SFSSAppNTP200ResponseWithDefaults instantiates a new GetRedfishV1SFSSAppNTP200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRedfishV1SFSSAppNTP200ResponseWithDefaults() *GetRedfishV1SFSSAppNTP200Response {
	this := GetRedfishV1SFSSAppNTP200Response{}
	return &this
}

// GetNtpServer returns the NtpServer field value if set, zero value otherwise.
func (o *GetRedfishV1SFSSAppNTP200Response) GetNtpServer() string {
	if o == nil || IsNil(o.NtpServer) {
		var ret string
		return ret
	}
	return *o.NtpServer
}

// GetNtpServerOk returns a tuple with the NtpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppNTP200Response) GetNtpServerOk() (*string, bool) {
	if o == nil || IsNil(o.NtpServer) {
		return nil, false
	}
	return o.NtpServer, true
}

// HasNtpServer returns a boolean if a field has been set.
func (o *GetRedfishV1SFSSAppNTP200Response) HasNtpServer() bool {
	if o != nil && !IsNil(o.NtpServer) {
		return true
	}

	return false
}

// SetNtpServer gets a reference to the given string and assigns it to the NtpServer field.
func (o *GetRedfishV1SFSSAppNTP200Response) SetNtpServer(v string) {
	o.NtpServer = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *GetRedfishV1SFSSAppNTP200Response) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppNTP200Response) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *GetRedfishV1SFSSAppNTP200Response) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *GetRedfishV1SFSSAppNTP200Response) SetState(v string) {
	o.State = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GetRedfishV1SFSSAppNTP200Response) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppNTP200Response) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *GetRedfishV1SFSSAppNTP200Response) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *GetRedfishV1SFSSAppNTP200Response) SetStatus(v string) {
	o.Status = &v
}

// GetOdataId returns the OdataId field value if set, zero value otherwise.
func (o *GetRedfishV1SFSSAppNTP200Response) GetOdataId() string {
	if o == nil || IsNil(o.OdataId) {
		var ret string
		return ret
	}
	return *o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppNTP200Response) GetOdataIdOk() (*string, bool) {
	if o == nil || IsNil(o.OdataId) {
		return nil, false
	}
	return o.OdataId, true
}

// HasOdataId returns a boolean if a field has been set.
func (o *GetRedfishV1SFSSAppNTP200Response) HasOdataId() bool {
	if o != nil && !IsNil(o.OdataId) {
		return true
	}

	return false
}

// SetOdataId gets a reference to the given string and assigns it to the OdataId field.
func (o *GetRedfishV1SFSSAppNTP200Response) SetOdataId(v string) {
	o.OdataId = &v
}

// GetOdataType returns the OdataType field value if set, zero value otherwise.
func (o *GetRedfishV1SFSSAppNTP200Response) GetOdataType() string {
	if o == nil || IsNil(o.OdataType) {
		var ret string
		return ret
	}
	return *o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppNTP200Response) GetOdataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OdataType) {
		return nil, false
	}
	return o.OdataType, true
}

// HasOdataType returns a boolean if a field has been set.
func (o *GetRedfishV1SFSSAppNTP200Response) HasOdataType() bool {
	if o != nil && !IsNil(o.OdataType) {
		return true
	}

	return false
}

// SetOdataType gets a reference to the given string and assigns it to the OdataType field.
func (o *GetRedfishV1SFSSAppNTP200Response) SetOdataType(v string) {
	o.OdataType = &v
}

// GetOdataContext returns the OdataContext field value if set, zero value otherwise.
func (o *GetRedfishV1SFSSAppNTP200Response) GetOdataContext() string {
	if o == nil || IsNil(o.OdataContext) {
		var ret string
		return ret
	}
	return *o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppNTP200Response) GetOdataContextOk() (*string, bool) {
	if o == nil || IsNil(o.OdataContext) {
		return nil, false
	}
	return o.OdataContext, true
}

// HasOdataContext returns a boolean if a field has been set.
func (o *GetRedfishV1SFSSAppNTP200Response) HasOdataContext() bool {
	if o != nil && !IsNil(o.OdataContext) {
		return true
	}

	return false
}

// SetOdataContext gets a reference to the given string and assigns it to the OdataContext field.
func (o *GetRedfishV1SFSSAppNTP200Response) SetOdataContext(v string) {
	o.OdataContext = &v
}

func (o GetRedfishV1SFSSAppNTP200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRedfishV1SFSSAppNTP200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NtpServer) {
		toSerialize["NtpServer"] = o.NtpServer
	}
	if !IsNil(o.State) {
		toSerialize["State"] = o.State
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.OdataId) {
		toSerialize["@odata.id"] = o.OdataId
	}
	if !IsNil(o.OdataType) {
		toSerialize["@odata.type"] = o.OdataType
	}
	if !IsNil(o.OdataContext) {
		toSerialize["@odata.context"] = o.OdataContext
	}
	return toSerialize, nil
}

type NullableGetRedfishV1SFSSAppNTP200Response struct {
	value *GetRedfishV1SFSSAppNTP200Response
	isSet bool
}

func (v NullableGetRedfishV1SFSSAppNTP200Response) Get() *GetRedfishV1SFSSAppNTP200Response {
	return v.value
}

func (v *NullableGetRedfishV1SFSSAppNTP200Response) Set(val *GetRedfishV1SFSSAppNTP200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRedfishV1SFSSAppNTP200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRedfishV1SFSSAppNTP200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRedfishV1SFSSAppNTP200Response(val *GetRedfishV1SFSSAppNTP200Response) *NullableGetRedfishV1SFSSAppNTP200Response {
	return &NullableGetRedfishV1SFSSAppNTP200Response{value: val, isSet: true}
}

func (v NullableGetRedfishV1SFSSAppNTP200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRedfishV1SFSSAppNTP200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


