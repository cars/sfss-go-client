/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner{}

// GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner struct for GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner
type GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner struct {
	// Backup identifier
	ID string `json:"ID"`
	// Remote server location where the backup file is copied to; only IPv4 communication is supported
	ImageServerLocation string `json:"ImageServerLocation"`
	// Detailed status message of the backup operation
	StatusMessage string `json:"StatusMessage"`
	// Password to access the remote server
	ImageServerPassword string `json:"ImageServerPassword"`
	// Status of the backup; possible values include Success, Failure, NotStarted, InProgress
	Status string `json:"Status"`
	// Date and time at which the backup was taken; date in mm/dd/yyyy format and time in hh:mm:ss format
	TimeStamp string `json:"TimeStamp"`
	// Transport type used to copy the backup file to the remote server; possible values include SCP, HTTP, HTTPS, and SFTP
	TransportType string `json:"TransportType"`
	// Username to access the remote server
	ImageServerUserName string `json:"ImageServerUserName"`
	OdataId string `json:"@odata.id"`
	OdataType string `json:"@odata.type"`
	OdataContext string `json:"@odata.context"`
}

type _GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner

// NewGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner instantiates a new GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner(iD string, imageServerLocation string, statusMessage string, imageServerPassword string, status string, timeStamp string, transportType string, imageServerUserName string, odataId string, odataType string, odataContext string) *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner {
	this := GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner{}
	this.ID = iD
	this.ImageServerLocation = imageServerLocation
	this.StatusMessage = statusMessage
	this.ImageServerPassword = imageServerPassword
	this.Status = status
	this.TimeStamp = timeStamp
	this.TransportType = transportType
	this.ImageServerUserName = imageServerUserName
	this.OdataId = odataId
	this.OdataType = odataType
	this.OdataContext = odataContext
	return &this
}

// NewGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInnerWithDefaults instantiates a new GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInnerWithDefaults() *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner {
	this := GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner{}
	return &this
}

// GetID returns the ID field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ID
}

// GetIDOk returns a tuple with the ID field value
// and a boolean to check if the value has been set.
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ID, true
}

// SetID sets field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) SetID(v string) {
	o.ID = v
}

// GetImageServerLocation returns the ImageServerLocation field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetImageServerLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageServerLocation
}

// GetImageServerLocationOk returns a tuple with the ImageServerLocation field value
// and a boolean to check if the value has been set.
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetImageServerLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageServerLocation, true
}

// SetImageServerLocation sets field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) SetImageServerLocation(v string) {
	o.ImageServerLocation = v
}

// GetStatusMessage returns the StatusMessage field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetStatusMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusMessage
}

// GetStatusMessageOk returns a tuple with the StatusMessage field value
// and a boolean to check if the value has been set.
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetStatusMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusMessage, true
}

// SetStatusMessage sets field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) SetStatusMessage(v string) {
	o.StatusMessage = v
}

// GetImageServerPassword returns the ImageServerPassword field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetImageServerPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageServerPassword
}

// GetImageServerPasswordOk returns a tuple with the ImageServerPassword field value
// and a boolean to check if the value has been set.
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetImageServerPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageServerPassword, true
}

// SetImageServerPassword sets field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) SetImageServerPassword(v string) {
	o.ImageServerPassword = v
}

// GetStatus returns the Status field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) SetStatus(v string) {
	o.Status = v
}

// GetTimeStamp returns the TimeStamp field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetTimeStamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value
// and a boolean to check if the value has been set.
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetTimeStampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeStamp, true
}

// SetTimeStamp sets field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) SetTimeStamp(v string) {
	o.TimeStamp = v
}

// GetTransportType returns the TransportType field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetTransportType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransportType
}

// GetTransportTypeOk returns a tuple with the TransportType field value
// and a boolean to check if the value has been set.
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetTransportTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransportType, true
}

// SetTransportType sets field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) SetTransportType(v string) {
	o.TransportType = v
}

// GetImageServerUserName returns the ImageServerUserName field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetImageServerUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageServerUserName
}

// GetImageServerUserNameOk returns a tuple with the ImageServerUserName field value
// and a boolean to check if the value has been set.
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetImageServerUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageServerUserName, true
}

// SetImageServerUserName sets field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) SetImageServerUserName(v string) {
	o.ImageServerUserName = v
}

// GetOdataId returns the OdataId field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataType returns the OdataType field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) SetOdataType(v string) {
	o.OdataType = v
}

// GetOdataContext returns the OdataContext field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) SetOdataContext(v string) {
	o.OdataContext = v
}

func (o GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ID"] = o.ID
	toSerialize["ImageServerLocation"] = o.ImageServerLocation
	toSerialize["StatusMessage"] = o.StatusMessage
	toSerialize["ImageServerPassword"] = o.ImageServerPassword
	toSerialize["Status"] = o.Status
	toSerialize["TimeStamp"] = o.TimeStamp
	toSerialize["TransportType"] = o.TransportType
	toSerialize["ImageServerUserName"] = o.ImageServerUserName
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.type"] = o.OdataType
	toSerialize["@odata.context"] = o.OdataContext
	return toSerialize, nil
}

func (o *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ID",
		"ImageServerLocation",
		"StatusMessage",
		"ImageServerPassword",
		"Status",
		"TimeStamp",
		"TransportType",
		"ImageServerUserName",
		"@odata.id",
		"@odata.type",
		"@odata.context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner := _GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner)

	if err != nil {
		return err
	}

	*o = GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner(varGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner)

	return err
}

type NullableGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner struct {
	value *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner
	isSet bool
}

func (v NullableGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) Get() *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner {
	return v.value
}

func (v *NullableGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) Set(val *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner(val *GetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) *NullableGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner {
	return &NullableGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner{value: val, isSet: true}
}

func (v NullableGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetExpandRedfishV1SFSSAppBackups200ResponseBackupsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


