/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CDCInstanceManagerENUMs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDCInstanceManagerENUMs{}

// CDCInstanceManagerENUMs This model lists the supported enumerations for the CDC instance configuration.
type CDCInstanceManagerENUMs struct {
	// Administrative state of the CDC instance; possible values include Enabled and Disabled
	CDCAdminState []interface{} `json:"CDCAdminState"`
	// Administrative state of the discovery service; possible values include Enabled and Disabled
	DiscoverySvcAdminState []interface{} `json:"DiscoverySvcAdminState"`
	// Status of the CDC instance; possible values include Init, InProgress, Success, Fail, and Abort
	Status []interface{} `json:"Status"`
}

type _CDCInstanceManagerENUMs CDCInstanceManagerENUMs

// NewCDCInstanceManagerENUMs instantiates a new CDCInstanceManagerENUMs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDCInstanceManagerENUMs(cDCAdminState []interface{}, discoverySvcAdminState []interface{}, status []interface{}) *CDCInstanceManagerENUMs {
	this := CDCInstanceManagerENUMs{}
	this.CDCAdminState = cDCAdminState
	this.DiscoverySvcAdminState = discoverySvcAdminState
	this.Status = status
	return &this
}

// NewCDCInstanceManagerENUMsWithDefaults instantiates a new CDCInstanceManagerENUMs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDCInstanceManagerENUMsWithDefaults() *CDCInstanceManagerENUMs {
	this := CDCInstanceManagerENUMs{}
	return &this
}

// GetCDCAdminState returns the CDCAdminState field value
func (o *CDCInstanceManagerENUMs) GetCDCAdminState() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.CDCAdminState
}

// GetCDCAdminStateOk returns a tuple with the CDCAdminState field value
// and a boolean to check if the value has been set.
func (o *CDCInstanceManagerENUMs) GetCDCAdminStateOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.CDCAdminState, true
}

// SetCDCAdminState sets field value
func (o *CDCInstanceManagerENUMs) SetCDCAdminState(v []interface{}) {
	o.CDCAdminState = v
}

// GetDiscoverySvcAdminState returns the DiscoverySvcAdminState field value
func (o *CDCInstanceManagerENUMs) GetDiscoverySvcAdminState() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.DiscoverySvcAdminState
}

// GetDiscoverySvcAdminStateOk returns a tuple with the DiscoverySvcAdminState field value
// and a boolean to check if the value has been set.
func (o *CDCInstanceManagerENUMs) GetDiscoverySvcAdminStateOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiscoverySvcAdminState, true
}

// SetDiscoverySvcAdminState sets field value
func (o *CDCInstanceManagerENUMs) SetDiscoverySvcAdminState(v []interface{}) {
	o.DiscoverySvcAdminState = v
}

// GetStatus returns the Status field value
func (o *CDCInstanceManagerENUMs) GetStatus() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CDCInstanceManagerENUMs) GetStatusOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status, true
}

// SetStatus sets field value
func (o *CDCInstanceManagerENUMs) SetStatus(v []interface{}) {
	o.Status = v
}

func (o CDCInstanceManagerENUMs) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDCInstanceManagerENUMs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CDCAdminState"] = o.CDCAdminState
	toSerialize["DiscoverySvcAdminState"] = o.DiscoverySvcAdminState
	toSerialize["Status"] = o.Status
	return toSerialize, nil
}

func (o *CDCInstanceManagerENUMs) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CDCAdminState",
		"DiscoverySvcAdminState",
		"Status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCDCInstanceManagerENUMs := _CDCInstanceManagerENUMs{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCDCInstanceManagerENUMs)

	if err != nil {
		return err
	}

	*o = CDCInstanceManagerENUMs(varCDCInstanceManagerENUMs)

	return err
}

type NullableCDCInstanceManagerENUMs struct {
	value *CDCInstanceManagerENUMs
	isSet bool
}

func (v NullableCDCInstanceManagerENUMs) Get() *CDCInstanceManagerENUMs {
	return v.value
}

func (v *NullableCDCInstanceManagerENUMs) Set(val *CDCInstanceManagerENUMs) {
	v.value = val
	v.isSet = true
}

func (v NullableCDCInstanceManagerENUMs) IsSet() bool {
	return v.isSet
}

func (v *NullableCDCInstanceManagerENUMs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDCInstanceManagerENUMs(val *CDCInstanceManagerENUMs) *NullableCDCInstanceManagerENUMs {
	return &NullableCDCInstanceManagerENUMs{value: val, isSet: true}
}

func (v NullableCDCInstanceManagerENUMs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDCInstanceManagerENUMs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
