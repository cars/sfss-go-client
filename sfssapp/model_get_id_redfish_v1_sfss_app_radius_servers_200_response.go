/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetIDRedfishV1SFSSAppRadiusServers200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetIDRedfishV1SFSSAppRadiusServers200Response{}

// GetIDRedfishV1SFSSAppRadiusServers200Response 
type GetIDRedfishV1SFSSAppRadiusServers200Response struct {
	// IP address of the RADIUS server
	ServerIp string `json:"ServerIp"`
	// Password to access the RADIUS server 
	ServerPass string `json:"ServerPass"`
	OdataId string `json:"@odata.id"`
	OdataType string `json:"@odata.type"`
	OdataContext string `json:"@odata.context"`
}

type _GetIDRedfishV1SFSSAppRadiusServers200Response GetIDRedfishV1SFSSAppRadiusServers200Response

// NewGetIDRedfishV1SFSSAppRadiusServers200Response instantiates a new GetIDRedfishV1SFSSAppRadiusServers200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetIDRedfishV1SFSSAppRadiusServers200Response(serverIp string, serverPass string, odataId string, odataType string, odataContext string) *GetIDRedfishV1SFSSAppRadiusServers200Response {
	this := GetIDRedfishV1SFSSAppRadiusServers200Response{}
	this.ServerIp = serverIp
	this.ServerPass = serverPass
	this.OdataId = odataId
	this.OdataType = odataType
	this.OdataContext = odataContext
	return &this
}

// NewGetIDRedfishV1SFSSAppRadiusServers200ResponseWithDefaults instantiates a new GetIDRedfishV1SFSSAppRadiusServers200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetIDRedfishV1SFSSAppRadiusServers200ResponseWithDefaults() *GetIDRedfishV1SFSSAppRadiusServers200Response {
	this := GetIDRedfishV1SFSSAppRadiusServers200Response{}
	return &this
}

// GetServerIp returns the ServerIp field value
func (o *GetIDRedfishV1SFSSAppRadiusServers200Response) GetServerIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerIp
}

// GetServerIpOk returns a tuple with the ServerIp field value
// and a boolean to check if the value has been set.
func (o *GetIDRedfishV1SFSSAppRadiusServers200Response) GetServerIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerIp, true
}

// SetServerIp sets field value
func (o *GetIDRedfishV1SFSSAppRadiusServers200Response) SetServerIp(v string) {
	o.ServerIp = v
}

// GetServerPass returns the ServerPass field value
func (o *GetIDRedfishV1SFSSAppRadiusServers200Response) GetServerPass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerPass
}

// GetServerPassOk returns a tuple with the ServerPass field value
// and a boolean to check if the value has been set.
func (o *GetIDRedfishV1SFSSAppRadiusServers200Response) GetServerPassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerPass, true
}

// SetServerPass sets field value
func (o *GetIDRedfishV1SFSSAppRadiusServers200Response) SetServerPass(v string) {
	o.ServerPass = v
}

// GetOdataId returns the OdataId field value
func (o *GetIDRedfishV1SFSSAppRadiusServers200Response) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *GetIDRedfishV1SFSSAppRadiusServers200Response) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *GetIDRedfishV1SFSSAppRadiusServers200Response) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataType returns the OdataType field value
func (o *GetIDRedfishV1SFSSAppRadiusServers200Response) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *GetIDRedfishV1SFSSAppRadiusServers200Response) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *GetIDRedfishV1SFSSAppRadiusServers200Response) SetOdataType(v string) {
	o.OdataType = v
}

// GetOdataContext returns the OdataContext field value
func (o *GetIDRedfishV1SFSSAppRadiusServers200Response) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *GetIDRedfishV1SFSSAppRadiusServers200Response) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *GetIDRedfishV1SFSSAppRadiusServers200Response) SetOdataContext(v string) {
	o.OdataContext = v
}

func (o GetIDRedfishV1SFSSAppRadiusServers200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetIDRedfishV1SFSSAppRadiusServers200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ServerIp"] = o.ServerIp
	toSerialize["ServerPass"] = o.ServerPass
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.type"] = o.OdataType
	toSerialize["@odata.context"] = o.OdataContext
	return toSerialize, nil
}

func (o *GetIDRedfishV1SFSSAppRadiusServers200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ServerIp",
		"ServerPass",
		"@odata.id",
		"@odata.type",
		"@odata.context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetIDRedfishV1SFSSAppRadiusServers200Response := _GetIDRedfishV1SFSSAppRadiusServers200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetIDRedfishV1SFSSAppRadiusServers200Response)

	if err != nil {
		return err
	}

	*o = GetIDRedfishV1SFSSAppRadiusServers200Response(varGetIDRedfishV1SFSSAppRadiusServers200Response)

	return err
}

type NullableGetIDRedfishV1SFSSAppRadiusServers200Response struct {
	value *GetIDRedfishV1SFSSAppRadiusServers200Response
	isSet bool
}

func (v NullableGetIDRedfishV1SFSSAppRadiusServers200Response) Get() *GetIDRedfishV1SFSSAppRadiusServers200Response {
	return v.value
}

func (v *NullableGetIDRedfishV1SFSSAppRadiusServers200Response) Set(val *GetIDRedfishV1SFSSAppRadiusServers200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIDRedfishV1SFSSAppRadiusServers200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIDRedfishV1SFSSAppRadiusServers200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIDRedfishV1SFSSAppRadiusServers200Response(val *GetIDRedfishV1SFSSAppRadiusServers200Response) *NullableGetIDRedfishV1SFSSAppRadiusServers200Response {
	return &NullableGetIDRedfishV1SFSSAppRadiusServers200Response{value: val, isSet: true}
}

func (v NullableGetIDRedfishV1SFSSAppRadiusServers200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIDRedfishV1SFSSAppRadiusServers200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


