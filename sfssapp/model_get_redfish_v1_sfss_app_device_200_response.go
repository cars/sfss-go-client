/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GetRedfishV1SFSSAppDevice200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRedfishV1SFSSAppDevice200Response{}

// GetRedfishV1SFSSAppDevice200Response
type GetRedfishV1SFSSAppDevice200Response struct {
	// SFSS VM device identifier
	DeviceId string `json:"DeviceId"`
	// Total number of endpoints that the license supports
	TotalNumOfEndPoints float32 `json:"TotalNumOfEndPoints"`
	OdataId             string  `json:"@odata.id"`
	OdataType           string  `json:"@odata.type"`
	OdataContext        string  `json:"@odata.context"`
	// The total number of NVMe hosts and subsystems that register with the CDC instances configured in the SFSS VM
	NumOfEndPointInUse float32 `json:"NumOfEndPointInUse"`
}

type _GetRedfishV1SFSSAppDevice200Response GetRedfishV1SFSSAppDevice200Response

// NewGetRedfishV1SFSSAppDevice200Response instantiates a new GetRedfishV1SFSSAppDevice200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRedfishV1SFSSAppDevice200Response(deviceId string, totalNumOfEndPoints float32, odataId string, odataType string, odataContext string, numOfEndPointInUse float32) *GetRedfishV1SFSSAppDevice200Response {
	this := GetRedfishV1SFSSAppDevice200Response{}
	this.DeviceId = deviceId
	this.TotalNumOfEndPoints = totalNumOfEndPoints
	this.OdataId = odataId
	this.OdataType = odataType
	this.OdataContext = odataContext
	this.NumOfEndPointInUse = numOfEndPointInUse
	return &this
}

// NewGetRedfishV1SFSSAppDevice200ResponseWithDefaults instantiates a new GetRedfishV1SFSSAppDevice200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRedfishV1SFSSAppDevice200ResponseWithDefaults() *GetRedfishV1SFSSAppDevice200Response {
	this := GetRedfishV1SFSSAppDevice200Response{}
	return &this
}

// GetDeviceId returns the DeviceId field value
func (o *GetRedfishV1SFSSAppDevice200Response) GetDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppDevice200Response) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *GetRedfishV1SFSSAppDevice200Response) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetTotalNumOfEndPoints returns the TotalNumOfEndPoints field value
func (o *GetRedfishV1SFSSAppDevice200Response) GetTotalNumOfEndPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalNumOfEndPoints
}

// GetTotalNumOfEndPointsOk returns a tuple with the TotalNumOfEndPoints field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppDevice200Response) GetTotalNumOfEndPointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalNumOfEndPoints, true
}

// SetTotalNumOfEndPoints sets field value
func (o *GetRedfishV1SFSSAppDevice200Response) SetTotalNumOfEndPoints(v float32) {
	o.TotalNumOfEndPoints = v
}

// GetOdataId returns the OdataId field value
func (o *GetRedfishV1SFSSAppDevice200Response) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppDevice200Response) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *GetRedfishV1SFSSAppDevice200Response) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataType returns the OdataType field value
func (o *GetRedfishV1SFSSAppDevice200Response) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppDevice200Response) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *GetRedfishV1SFSSAppDevice200Response) SetOdataType(v string) {
	o.OdataType = v
}

// GetOdataContext returns the OdataContext field value
func (o *GetRedfishV1SFSSAppDevice200Response) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppDevice200Response) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *GetRedfishV1SFSSAppDevice200Response) SetOdataContext(v string) {
	o.OdataContext = v
}

// GetNumOfEndPointInUse returns the NumOfEndPointInUse field value
func (o *GetRedfishV1SFSSAppDevice200Response) GetNumOfEndPointInUse() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NumOfEndPointInUse
}

// GetNumOfEndPointInUseOk returns a tuple with the NumOfEndPointInUse field value
// and a boolean to check if the value has been set.
func (o *GetRedfishV1SFSSAppDevice200Response) GetNumOfEndPointInUseOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumOfEndPointInUse, true
}

// SetNumOfEndPointInUse sets field value
func (o *GetRedfishV1SFSSAppDevice200Response) SetNumOfEndPointInUse(v float32) {
	o.NumOfEndPointInUse = v
}

func (o GetRedfishV1SFSSAppDevice200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRedfishV1SFSSAppDevice200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["DeviceId"] = o.DeviceId
	toSerialize["TotalNumOfEndPoints"] = o.TotalNumOfEndPoints
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.type"] = o.OdataType
	toSerialize["@odata.context"] = o.OdataContext
	toSerialize["NumOfEndPointInUse"] = o.NumOfEndPointInUse
	return toSerialize, nil
}

func (o *GetRedfishV1SFSSAppDevice200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"DeviceId",
		"TotalNumOfEndPoints",
		"@odata.id",
		"@odata.type",
		"@odata.context",
		"NumOfEndPointInUse",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRedfishV1SFSSAppDevice200Response := _GetRedfishV1SFSSAppDevice200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRedfishV1SFSSAppDevice200Response)

	if err != nil {
		return err
	}

	*o = GetRedfishV1SFSSAppDevice200Response(varGetRedfishV1SFSSAppDevice200Response)

	return err
}

type NullableGetRedfishV1SFSSAppDevice200Response struct {
	value *GetRedfishV1SFSSAppDevice200Response
	isSet bool
}

func (v NullableGetRedfishV1SFSSAppDevice200Response) Get() *GetRedfishV1SFSSAppDevice200Response {
	return v.value
}

func (v *NullableGetRedfishV1SFSSAppDevice200Response) Set(val *GetRedfishV1SFSSAppDevice200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRedfishV1SFSSAppDevice200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRedfishV1SFSSAppDevice200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRedfishV1SFSSAppDevice200Response(val *GetRedfishV1SFSSAppDevice200Response) *NullableGetRedfishV1SFSSAppDevice200Response {
	return &NullableGetRedfishV1SFSSAppDevice200Response{value: val, isSet: true}
}

func (v NullableGetRedfishV1SFSSAppDevice200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRedfishV1SFSSAppDevice200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
