/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LicensesGETExpandLicensesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicensesGETExpandLicensesInner{}

// LicensesGETExpandLicensesInner struct for LicensesGETExpandLicensesInner
type LicensesGETExpandLicensesInner struct {
	// License identifier
	Identifier string `json:"Identifier"`
	// Type of license; possible values include Evaluation, Enterprise, Partner, and Expansion licenses
	LicenseType string `json:"LicenseType"`
	// Total number of endpoints the license supports
	TotalNumOfEndPoints float32 `json:"TotalNumOfEndPoints"`
	// End User License Agreement
	EULA string `json:"EULA"`
	// License service tag
	ServiceTag string `json:"ServiceTag"`
	// License expiry date
	LicenseExpiry string `json:"LicenseExpiry"`
	// A unique NVMe Qualified Name (NQN) that is used to identify the SFSS VM.
	DeviceId string `json:"DeviceId"`
}

type _LicensesGETExpandLicensesInner LicensesGETExpandLicensesInner

// NewLicensesGETExpandLicensesInner instantiates a new LicensesGETExpandLicensesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicensesGETExpandLicensesInner(identifier string, licenseType string, totalNumOfEndPoints float32, eULA string, serviceTag string, licenseExpiry string, deviceId string) *LicensesGETExpandLicensesInner {
	this := LicensesGETExpandLicensesInner{}
	this.Identifier = identifier
	this.LicenseType = licenseType
	this.TotalNumOfEndPoints = totalNumOfEndPoints
	this.EULA = eULA
	this.ServiceTag = serviceTag
	this.LicenseExpiry = licenseExpiry
	this.DeviceId = deviceId
	return &this
}

// NewLicensesGETExpandLicensesInnerWithDefaults instantiates a new LicensesGETExpandLicensesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicensesGETExpandLicensesInnerWithDefaults() *LicensesGETExpandLicensesInner {
	this := LicensesGETExpandLicensesInner{}
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *LicensesGETExpandLicensesInner) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *LicensesGETExpandLicensesInner) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *LicensesGETExpandLicensesInner) SetIdentifier(v string) {
	o.Identifier = v
}

// GetLicenseType returns the LicenseType field value
func (o *LicensesGETExpandLicensesInner) GetLicenseType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseType
}

// GetLicenseTypeOk returns a tuple with the LicenseType field value
// and a boolean to check if the value has been set.
func (o *LicensesGETExpandLicensesInner) GetLicenseTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseType, true
}

// SetLicenseType sets field value
func (o *LicensesGETExpandLicensesInner) SetLicenseType(v string) {
	o.LicenseType = v
}

// GetTotalNumOfEndPoints returns the TotalNumOfEndPoints field value
func (o *LicensesGETExpandLicensesInner) GetTotalNumOfEndPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalNumOfEndPoints
}

// GetTotalNumOfEndPointsOk returns a tuple with the TotalNumOfEndPoints field value
// and a boolean to check if the value has been set.
func (o *LicensesGETExpandLicensesInner) GetTotalNumOfEndPointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalNumOfEndPoints, true
}

// SetTotalNumOfEndPoints sets field value
func (o *LicensesGETExpandLicensesInner) SetTotalNumOfEndPoints(v float32) {
	o.TotalNumOfEndPoints = v
}

// GetEULA returns the EULA field value
func (o *LicensesGETExpandLicensesInner) GetEULA() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EULA
}

// GetEULAOk returns a tuple with the EULA field value
// and a boolean to check if the value has been set.
func (o *LicensesGETExpandLicensesInner) GetEULAOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EULA, true
}

// SetEULA sets field value
func (o *LicensesGETExpandLicensesInner) SetEULA(v string) {
	o.EULA = v
}

// GetServiceTag returns the ServiceTag field value
func (o *LicensesGETExpandLicensesInner) GetServiceTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceTag
}

// GetServiceTagOk returns a tuple with the ServiceTag field value
// and a boolean to check if the value has been set.
func (o *LicensesGETExpandLicensesInner) GetServiceTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceTag, true
}

// SetServiceTag sets field value
func (o *LicensesGETExpandLicensesInner) SetServiceTag(v string) {
	o.ServiceTag = v
}

// GetLicenseExpiry returns the LicenseExpiry field value
func (o *LicensesGETExpandLicensesInner) GetLicenseExpiry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseExpiry
}

// GetLicenseExpiryOk returns a tuple with the LicenseExpiry field value
// and a boolean to check if the value has been set.
func (o *LicensesGETExpandLicensesInner) GetLicenseExpiryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseExpiry, true
}

// SetLicenseExpiry sets field value
func (o *LicensesGETExpandLicensesInner) SetLicenseExpiry(v string) {
	o.LicenseExpiry = v
}

// GetDeviceId returns the DeviceId field value
func (o *LicensesGETExpandLicensesInner) GetDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *LicensesGETExpandLicensesInner) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *LicensesGETExpandLicensesInner) SetDeviceId(v string) {
	o.DeviceId = v
}

func (o LicensesGETExpandLicensesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicensesGETExpandLicensesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Identifier"] = o.Identifier
	toSerialize["LicenseType"] = o.LicenseType
	toSerialize["TotalNumOfEndPoints"] = o.TotalNumOfEndPoints
	toSerialize["EULA"] = o.EULA
	toSerialize["ServiceTag"] = o.ServiceTag
	toSerialize["LicenseExpiry"] = o.LicenseExpiry
	toSerialize["DeviceId"] = o.DeviceId
	return toSerialize, nil
}

func (o *LicensesGETExpandLicensesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Identifier",
		"LicenseType",
		"TotalNumOfEndPoints",
		"EULA",
		"ServiceTag",
		"LicenseExpiry",
		"DeviceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLicensesGETExpandLicensesInner := _LicensesGETExpandLicensesInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLicensesGETExpandLicensesInner)

	if err != nil {
		return err
	}

	*o = LicensesGETExpandLicensesInner(varLicensesGETExpandLicensesInner)

	return err
}

type NullableLicensesGETExpandLicensesInner struct {
	value *LicensesGETExpandLicensesInner
	isSet bool
}

func (v NullableLicensesGETExpandLicensesInner) Get() *LicensesGETExpandLicensesInner {
	return v.value
}

func (v *NullableLicensesGETExpandLicensesInner) Set(val *LicensesGETExpandLicensesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableLicensesGETExpandLicensesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableLicensesGETExpandLicensesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicensesGETExpandLicensesInner(val *LicensesGETExpandLicensesInner) *NullableLicensesGETExpandLicensesInner {
	return &NullableLicensesGETExpandLicensesInner{value: val, isSet: true}
}

func (v NullableLicensesGETExpandLicensesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicensesGETExpandLicensesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
