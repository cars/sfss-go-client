/*
SmartFabric Storage Software Application REST APIs

REST APIs used for managing SFSS application are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssapp

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the IpAddressManagementGETEXPAND type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpAddressManagementGETEXPAND{}

// IpAddressManagementGETEXPAND This model lists detailed information about all the available and configured interfaces in SFSS.
type IpAddressManagementGETEXPAND struct {
	// A set of available interfaces
	IpAddressManagements []IpAddressManagementGETEXPANDIpAddressManagementsInner `json:"IpAddressManagements"`
	// Total number of available interfaces
	IpAddressManagementsodataCount float32 `json:"IpAddressManagements@odata.count"`
	OdataId                        string  `json:"@odata.id"`
	OdataContext                   string  `json:"@odata.context"`
	OdataType                      string  `json:"@odata.type"`
}

type _IpAddressManagementGETEXPAND IpAddressManagementGETEXPAND

// NewIpAddressManagementGETEXPAND instantiates a new IpAddressManagementGETEXPAND object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpAddressManagementGETEXPAND(ipAddressManagements []IpAddressManagementGETEXPANDIpAddressManagementsInner, ipAddressManagementsodataCount float32, odataId string, odataContext string, odataType string) *IpAddressManagementGETEXPAND {
	this := IpAddressManagementGETEXPAND{}
	this.IpAddressManagements = ipAddressManagements
	this.IpAddressManagementsodataCount = ipAddressManagementsodataCount
	this.OdataId = odataId
	this.OdataContext = odataContext
	this.OdataType = odataType
	return &this
}

// NewIpAddressManagementGETEXPANDWithDefaults instantiates a new IpAddressManagementGETEXPAND object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpAddressManagementGETEXPANDWithDefaults() *IpAddressManagementGETEXPAND {
	this := IpAddressManagementGETEXPAND{}
	return &this
}

// GetIpAddressManagements returns the IpAddressManagements field value
func (o *IpAddressManagementGETEXPAND) GetIpAddressManagements() []IpAddressManagementGETEXPANDIpAddressManagementsInner {
	if o == nil {
		var ret []IpAddressManagementGETEXPANDIpAddressManagementsInner
		return ret
	}

	return o.IpAddressManagements
}

// GetIpAddressManagementsOk returns a tuple with the IpAddressManagements field value
// and a boolean to check if the value has been set.
func (o *IpAddressManagementGETEXPAND) GetIpAddressManagementsOk() ([]IpAddressManagementGETEXPANDIpAddressManagementsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpAddressManagements, true
}

// SetIpAddressManagements sets field value
func (o *IpAddressManagementGETEXPAND) SetIpAddressManagements(v []IpAddressManagementGETEXPANDIpAddressManagementsInner) {
	o.IpAddressManagements = v
}

// GetIpAddressManagementsodataCount returns the IpAddressManagementsodataCount field value
func (o *IpAddressManagementGETEXPAND) GetIpAddressManagementsodataCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.IpAddressManagementsodataCount
}

// GetIpAddressManagementsodataCountOk returns a tuple with the IpAddressManagementsodataCount field value
// and a boolean to check if the value has been set.
func (o *IpAddressManagementGETEXPAND) GetIpAddressManagementsodataCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAddressManagementsodataCount, true
}

// SetIpAddressManagementsodataCount sets field value
func (o *IpAddressManagementGETEXPAND) SetIpAddressManagementsodataCount(v float32) {
	o.IpAddressManagementsodataCount = v
}

// GetOdataId returns the OdataId field value
func (o *IpAddressManagementGETEXPAND) GetOdataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *IpAddressManagementGETEXPAND) GetOdataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *IpAddressManagementGETEXPAND) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataContext returns the OdataContext field value
func (o *IpAddressManagementGETEXPAND) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *IpAddressManagementGETEXPAND) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *IpAddressManagementGETEXPAND) SetOdataContext(v string) {
	o.OdataContext = v
}

// GetOdataType returns the OdataType field value
func (o *IpAddressManagementGETEXPAND) GetOdataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *IpAddressManagementGETEXPAND) GetOdataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *IpAddressManagementGETEXPAND) SetOdataType(v string) {
	o.OdataType = v
}

func (o IpAddressManagementGETEXPAND) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpAddressManagementGETEXPAND) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["IpAddressManagements"] = o.IpAddressManagements
	toSerialize["IpAddressManagements@odata.count"] = o.IpAddressManagementsodataCount
	toSerialize["@odata.id"] = o.OdataId
	toSerialize["@odata.context"] = o.OdataContext
	toSerialize["@odata.type"] = o.OdataType
	return toSerialize, nil
}

func (o *IpAddressManagementGETEXPAND) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"IpAddressManagements",
		"IpAddressManagements@odata.count",
		"@odata.id",
		"@odata.context",
		"@odata.type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIpAddressManagementGETEXPAND := _IpAddressManagementGETEXPAND{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIpAddressManagementGETEXPAND)

	if err != nil {
		return err
	}

	*o = IpAddressManagementGETEXPAND(varIpAddressManagementGETEXPAND)

	return err
}

type NullableIpAddressManagementGETEXPAND struct {
	value *IpAddressManagementGETEXPAND
	isSet bool
}

func (v NullableIpAddressManagementGETEXPAND) Get() *IpAddressManagementGETEXPAND {
	return v.value
}

func (v *NullableIpAddressManagementGETEXPAND) Set(val *IpAddressManagementGETEXPAND) {
	v.value = val
	v.isSet = true
}

func (v NullableIpAddressManagementGETEXPAND) IsSet() bool {
	return v.isSet
}

func (v *NullableIpAddressManagementGETEXPAND) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpAddressManagementGETEXPAND(val *IpAddressManagementGETEXPAND) *NullableIpAddressManagementGETEXPAND {
	return &NullableIpAddressManagementGETEXPAND{value: val, isSet: true}
}

func (v NullableIpAddressManagementGETEXPAND) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpAddressManagementGETEXPAND) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
