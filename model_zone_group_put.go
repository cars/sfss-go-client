/*
RestServices

REST APIs used for managing CDC instances are captured in this section.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sfssrest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ZoneGroupPUT type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneGroupPUT{}

// ZoneGroupPUT This model updates zone group configuration.
type ZoneGroupPUT struct {
	ActivateStatus string `json:"ActivateStatus"`
}

type _ZoneGroupPUT ZoneGroupPUT

// NewZoneGroupPUT instantiates a new ZoneGroupPUT object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneGroupPUT(activateStatus string) *ZoneGroupPUT {
	this := ZoneGroupPUT{}
	this.ActivateStatus = activateStatus
	return &this
}

// NewZoneGroupPUTWithDefaults instantiates a new ZoneGroupPUT object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneGroupPUTWithDefaults() *ZoneGroupPUT {
	this := ZoneGroupPUT{}
	return &this
}

// GetActivateStatus returns the ActivateStatus field value
func (o *ZoneGroupPUT) GetActivateStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActivateStatus
}

// GetActivateStatusOk returns a tuple with the ActivateStatus field value
// and a boolean to check if the value has been set.
func (o *ZoneGroupPUT) GetActivateStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActivateStatus, true
}

// SetActivateStatus sets field value
func (o *ZoneGroupPUT) SetActivateStatus(v string) {
	o.ActivateStatus = v
}

func (o ZoneGroupPUT) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneGroupPUT) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ActivateStatus"] = o.ActivateStatus
	return toSerialize, nil
}

func (o *ZoneGroupPUT) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ActivateStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varZoneGroupPUT := _ZoneGroupPUT{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varZoneGroupPUT)

	if err != nil {
		return err
	}

	*o = ZoneGroupPUT(varZoneGroupPUT)

	return err
}

type NullableZoneGroupPUT struct {
	value *ZoneGroupPUT
	isSet bool
}

func (v NullableZoneGroupPUT) Get() *ZoneGroupPUT {
	return v.value
}

func (v *NullableZoneGroupPUT) Set(val *ZoneGroupPUT) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneGroupPUT) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneGroupPUT) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneGroupPUT(val *ZoneGroupPUT) *NullableZoneGroupPUT {
	return &NullableZoneGroupPUT{value: val, isSet: true}
}

func (v NullableZoneGroupPUT) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneGroupPUT) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


